
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>


<head>
<title>RaydiumWikiNi:RaydiumApiReference</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
<meta name="keywords" content="" />
<meta name="description" content="" />
<link rel="stylesheet" type="text/css" media="screen" href="/wiki/style/wakka.css" />
<link rel="stylesheet" type="text/css" media="print" href="/wiki/style/print.css" />
<!-- <link rel="alternate" type="application/rss+xml" title="Dernières Modifications Wiki" href="http://wiki.raydium.org/wiki/DerniersChangementsRSS/xml" /> -->
<style type="text/css" media="all"></style>


<script type="text/javascript">
function fKeyDown()	{
	if (event.keyCode == 9) {
		event.returnValue= false;
		document.selection.createRange().text = String.fromCharCode(9) } }
</script>
</head>


<body ondblclick="document.location='http://wiki.raydium.org/wiki/RaydiumApiReference/edit';"  >
<div class="topbanner">
    <ul>
        <li>CQFD Corp web</li>
	<li><a href='http://raydium.org'>Raydium</a></li>
	<li><a href='http://memak.raydium.org'>MeMak</a></li>
	<li><a href='http://wiki.raydium.org/'>Wiki</a></li>
	<li><a href='http://maniadrive.raydium.org'>ManiaDrive</a></li>
	<li><a href='http://skydiver.raydium.org'>NewSkyDiver</a></li>
	<li><a href='http://cqfd-corp.org/'>WWW</a></li>
	<li><a href='http://cqfd-corp.org/wap/'>WAP</a></li>
	<li><a href='http://mail.cqfd-corp.org'>Mails</a></li>
	<li><a href='http://cam.cqfd-corp.org'>webcam</a></li>
	<li><a href='http://shell.cqfd-corp.org'>Shell</a></li>
	<li><a href='http://asso.cqfd-corp.org/'>Asso</a></li>
	<li><a href='http://cqfd-corp.org/jo.php'>JOTR</a></li>
	<li><a href='http://old.cqfd-corp.org'>Oldies</a></li>
    </ul>
</div>

<div style="display: none;"><a href="http://wiki.raydium.org/wiki/RaydiumApiReference/resetstyle" accesskey="7"></a></div>


<h1 class="wiki_name">RaydiumWikiNi</h1>


<h1 class="page_name">
<a href="http://wiki.raydium.org/wiki/RechercheTexte&amp;phrase=RaydiumApiReference">
RaydiumApiReference</a>
</h1>


<div class="header">
<a href="http://wiki.raydium.org/wiki/PagePrincipale">PagePrincipale</a> ::
<a href="http://wiki.raydium.org/wiki/DerniersChangements">DerniersChangements</a> :: <a href="http://wiki.raydium.org/wiki/ParametresUtilisateur">ParametresUtilisateur</a> :: 
Vous &ecirc;tes CPE38c85ca64f8e-CM38c85ca64f8c.cpe.net.cable.rogers.com</div>


<div class="page">
<br />
<h1>Raydium API Reference</h1>
<br />
<h2>CQFD Corp.</h2>
<br />
This document is the most up-to-date version. <b>This is a work in progress</b>:<br />
there's again some errors and wrong informations. Try, wait, or contribute ;)<br />
<br />
<a href=http://wiki.raydium.org/wiki/RaydiumApiReference#chapters>Index of chapters</a><br />
<a href=http://wiki.raydium.org/wiki/RaydiumApiReference#index>Index of all Raydium functions</a><br />
<br />
<hr />
This document is autogenerated, any change will be lost,<br />
use <a href="http://wiki.raydium.org/wiki/RaydiumApiReferenceComments">RaydiumApiReferenceComments</a> for any need.<br />
Generated: 2011-02-08 11:50:05, for Raydium <b>0.800</b><br />
<hr />
<a name="main.h"></a><br />
<h2>1 Introduction to Raydium:</h2>
<h3><a name=&gt;&lt;/a&gt;1.1 About:====
Well, first of all, let me talk about [[Raydium]] goals: this project
aims to be simple, easy to use, portable, and quite fast.

[[Raydium]] is a C written abstract layer, on top of OpenGL,
and [[GLU]]: this means you can write an entire 3D
application without calling any OpenGL function.
Want to draw an object ? call the suitable [[Raydium]] function,
and all textures and vertices will be loaded, and your object drawn.
Want to make an explosion ? Same thing: call the right function.
Note that you can call OpenGL functions anyway, if necessary.

About portability, I can say a few things: [[Raydium]] was initially
planned for Linux only, but with a "clean" (nearly [[ANSI]]) code,
and, in facts, we have been able to compile Raydium under Visual Studio (Windows)
and mingw with a very few modifications.
So you can expect a correct result on any system providing
OpenGL (at least 1.2), [[GLU]] and a C compiler. Using Raydium as a shared
library (.so or DLL), you can also use C++ language for you own applications

As we ([[CQFD Corp]].) needed a library for our own games, demos,
and... and things like that, and as I was interested by OpenGL,
I starts to write [[Raydium]].

Raydium is perfect for outdoors spaces, integrating a landscape engine,
with suitable physic, supports dynamic lighting, fog, blending, water
and waves, reflections, and more, but also provides everything for indoor,
with radiosity lightmaps for example.

Some other advanced features are available : physics, scripting,
live video, transparent networking, GUI, shaders, ...

This features list will probably grow up during Raydium developpement, see
Raydium website: http://raydium.org/

You'll find, in this document, a list of many functions and possibilities
of [[Raydium]], but if it's your first view of Raydium, you should
start with tutorials ( http://wiki.raydium.org/wiki/RaydiumTutorials ) and
packaged demo programs.

After this short introduction, let's talk about the [[API]] itself,
starting with the main file (from the programmer's point of vue)
of [[Raydium]]: common.c

====&lt;a name=></a>1.2 Defines:</h3>
As mentioned above, the file common.c is quite interesting,<br />
for several reasons: first, as this file includes all others <a href="http://wiki.raydium.org/wiki/Raydium">Raydium</a>'s<br />
files, you can have an overview of the whole project, just by looking at this.<br />
<br />
It can also be used as a "quick help", since all variables are declared<br />
here, and not in the corresponding files. I mean, for example,<br />
that "<tt>raydium_light_intensity...</tt>" will be declared in common.c,<br />
not in light.c . There's many reasons for using such "style",<br />
but you must only retain that it is simpler for you :)<br />
<br />
Ok, after this little disclaimer, we can have a look to the first part<br />
of our file.<br />
<br />
After usual #include (nothing interesting here), we find some #defines.<br />
<br />
<h4>generic limits</h4>
<br />
The first #define block determine limits of your application,<br />
and here you are the actual values for basic defines:<br />
<div class="code"><pre><span style="color: #339933;">#define RAYDIUM_MAX_VERTICES 500000</span>
<span style="color: #339933;">#define RAYDIUM_MAX_TEXTURES 256</span>
<span style="color: #339933;">#define RAYDIUM_MAX_LIGHTS 8</span>
<span style="color: #339933;">#define RAYDIUM_MAX_NAME_LEN 255</span>
<span style="color: #339933;">#define RAYDIUM_MAX_OBJECTS 1024 </span>
&nbsp;</pre>
</div><br />
<br />
- As you may expect, <tt>MAX_VERTICES</tt> defines the amount of memory you'll<br />
waste with vertex tables. These tables will contain all loaded objects,<br />
then remember each time you draw something (object),<br />
<a href="http://wiki.raydium.org/wiki/Raydium">Raydium</a> loads it (if not already done). Currently, there is no "delete"<br />
mechanism implemented (except by deleting all objects).<br />
Let me give you a scale: with an Athlon XP1900+, <a href="http://wiki.raydium.org/wiki/GeForce">GeForce</a> 3,<br />
actual <a href="http://wiki.raydium.org/wiki/Raydium">Raydium</a> devel. version 0.31, with around 100 000 vertices,<br />
losts of options (sky, blending, 2 lights, 15 textures, ...),<br />
Raydium renders ~ 45 FPS. Beyond this, a very correct object uses less<br />
than 10 000 vertices. So 500 000 vertices, the actual default,<br />
is quite large. It's also important to talk about memory: Linux is<br />
very efficient on this point, and allocates only "really used" memory.<br />
Under Linux, with the above scene, Raydium used about 20 MB (data only),<br />
instead of "much more" (~ 5x). I haven't made any test about this under<br />
Windows, but we can expect worse results.<br />
<br />
- There's nothing really important to say about <tt>MAX_TEXTURES</tt>,<br />
since that doesn't influence the amount of memory used. You are not<br />
limited to 8 bits values, but 256 seems very comfortable (and you must<br />
pay attention to the capacities of your 3D hardware !)<br />
<br />
- The next define, <tt>MAX_LIGHTS</tt> is very important: <a href="http://wiki.raydium.org/wiki/OpenGL">OpenGL</a>, for now<br />
(version 1.3 and lower), impose 8 lights at least, and all current<br />
hardware doesn't manage more. If this situation is likely to evolve,<br />
we will move this #define to a variable, and will ask hardware for its<br />
capacities at initialization, but, for the moment, do not exceed 8.<br />
<br />
- Next, <tt>NAME_LEN</tt>, limits the maximum length of strings (textures and<br />
objects names) used by Raydium. Default value should be perfect.<br />
(avoid higher values, since it could slow down name searches)<br />
<br />
- <tt>MAX_OBJECTS</tt> use the same mechanism as <tt>MAX_TEXTURES</tt>, and addition<br />
with the fact that hardware is not concerned, it can be ignored.<br />
<br />
<h4>Options and parameters</h4>
<br />
This is the next part of our #define section, I will not explain these<br />
constants here, but in respective sections, so you'll have just you to<br />
remember they're declared here.<br />
<br />
<h3><a name=&gt;&lt;/a&gt;1.3 Basic vars:====

This section aims to describe each variable [[Raydium]] use, one by one.
Some (most ?) of them are used internaly only, but you could need to access
it. Moreover, you'll better understand how Raydium works by looking at
these variables.

===Keyboard input===

Following variables can be found:

##raydium_key_last## will always contains the last key (normal or special)
pressed down. You'll find a explanation about normal and special keys above.

##raydium_key[]## hosts all special keys state. Currently, you must use
[[GLUT]] define's (Raydium aliases will come soon), limited to
following keys:

- ##GLUT_KEY_F1## to ##GLUT_KEY_F12##
- ##GLUT_KEY_LEFT##, ##GLUT_KEY_RIGHT##, ##GLUT_KEY_UP##, ##GLUT_KEY_DOWN##
- ##GLUT_KEY_PAGE_UP##, ##GLUT_KEY_PAGE_DOWN##
- ##GLUT_KEY_HOME##, ##GLUT_KEY_END##, ##GLUT_KEY_INSERT##

These are "special" keys: they have 2 states. released (0),
and pressed (non zero). It means you can do something
(move an object, turn on a light) **UNTIL** user stops to press the key.
"Normal" keys have a different behavior: you can do something **IF** user
press a key (exit from application if ESC is pressed, for example).
You'll have no information about key's release.

A normal key is sent through ##raydium_key_last##, a special one through
##raydium_key[]## AND ##raydium_key_last##.

You must see ##raydium_key_last## as an "event", fired when the user press
a key (ANY key: special or not). When a normal key is pressed, you'll get
the ASCII value + 1000 assigned to ##raydium_key_last##. (1027 for "ESC", for
example)

Here is a method to use special keys:
%%(c) if(raydium_key[GLUT_KEY_UP]) move_car(); %%

Yes, it's easy. You can also use
%%(c) if(raydium_key_last==GLUT_KEY_UP) explose(); %%
for example, if you need to carry out a specific action.

It's ok for you ? use ##raydium_key[]## to keep the car moving until
user release UP key, or use ##raydium_key_last## to explode the car
when the user tries to start it :)

===Mouse input===

Easy.

You can get actual mouse position on the window (relative to window's
position on screen, I mean) with ##raydium_mouse_x## and ##raydium_mouse_y##
(GLuint), starting at (0,0) for upper left
(Warning: some [[GLUT]] implementations can give mouse position even
when mouse is out of the window ! Check boundaries before using these values).

Raydium use: 1 for left button, 2 for right button, and 3 for
middle button (0 for none) with ##raydium_mouse_click## for the last click
value. (generated one time per click)
Raydium will now use 4 (up) and 5 (down) for mouse wheel, if any.

You can permanently get a button's state, up (0) or down (non zero),
using ##raydium_mouse_button[x]##, where x is 0 for left button, 1 for right
one, and 2 for middle button.

===Textures===

##raydium_texture_index## and ##raydium_texture_current_main## (GLuint) are used
internaly to determine repectively how many textures are loaded,
wich is the current one.

The next variable, ##raydium_texture_filter##, is very important. You can
assign ##RAYDIUM_TEXTURE_FILTER_NONE## (default), ##RAYDIUM_TEXTURE_FILTER_BILINEAR##
or ##RAYDIUM_TEXTURE_FILTER_TRILINEAR## (recommended).
Raydium now support anisotropic filtering with ##RAYDIUM_TEXTURE_FILTER_ANISO##.
Do not change the variable yourself, use the ##raydium_texture_filter_change()##
function instead, it allows the user to override your setting from the
command line (--filer option).

Using no texture filter can gives you higher framerate on old 3D hardware,
but this is quite ugly.

You can activate bilinear filtering without any framerate impact on
most recent video cards, and get a much more attractive rendering.

Trilinear filtering uses Bilinear filtering and MipMaps. A MipMaped
texture is a duplicated texture (3 times, with Raydium), but at different
sizes. A 512x512 texture will generate, for example, a (smoothed)
256x256 texture, and a (smoothed) 128x128 one. Your video card will
use these textures according to distance from POV (point of vue),
reducing flickering effect.

This is on of the best filtering Raydium can use, for a great rendering
quality. See also anisotropic filter, in Texture chapter of this document.
Good and recent 3D hardware can do trilinear filtering in a single pass,
so it must be the default setting for your application.

About ##raydium_texture_filter## itself: changing this variable will not modify
the rendering, but the way to load textures. It means you can (for example)
use trilinear only for landscape textures, and bilinear for others.
It also means you must reload (erase) a texture to change it's filter.

See (and prefer)  ##raydium_texture_filter_change()## to change the filter.

Note that Raydium will never use trilinear filter with blended (transparent)
textures, for good reasons :)

Let's talk quickly about next (internal) texture variables:
##raydium_texture_blended[]## is a flag table, where each element is
non zero for a blended (RGBA) texture, and 0 for an RGB one.

For Raydium, when a texture does not contain a "bitmap" (texture file,
for example), it contains a plain color, and this color is stored in
##raydium_texture_rgb[][4]## (4 is for RGBA, values between 0 and 1).
You can load an rgb texture with "rgb" keyword. For example, instead of
loading "red.tga", you can load "rgb(0.8,0.1,0.1)".

##raydium_texture_name[]## table simply contains texture filenames.

Last thing, ##raydium_texture_to_replace##,
can be used to erase an already loaded texture.
Set the variable to n, and load a new texture: texture number "n" will be
replaced in memory.

===Projection===

Raydium supports 2 types of projection: ##RAYDIUM_PROJECTION_ORTHO##
(orthographic) and ##RAYDIUM_PROJECTION_PERSPECTIVE##.

First of all, let us point out what "projection" is. Using a "perspective"
projection, closest objects will looks larger than the orthers. It is
typically used in video games (since human eye runs like that),
by opposition to orthographic projection, wich is mostly used by 3D
modeling tools. The principle is simple, discover it by yourself :)

Raydium reads ##raydium_projection## to determine wich method to use.
Each projection is configured with ##raydium_projection_*## variables.
Some of these variables are used both by "perspective" and "orthographic"
projections.

Here is what common.c says:

%%(c)
GLFLOAT RAYDIUM_PROJECTION_FOV; // PERSPECTIVE ONLY
GLFLOAT RAYDIUM_PROJECTION_NEAR; // PERSPECTIVE & ORTHO
GLFLOAT RAYDIUM_PROJECTION_FAR; // PERSPECTIVE & ORTHO
GLFLOAT RAYDIUM_PROJECTION_LEFT; // ORTHO ONLY
GLFLOAT RAYDIUM_PROJECTION_RIGHT; // ORTHO ONLY
GLFLOAT RAYDIUM_PROJECTION_BOTTOM; // ORTHO ONLY
GLFLOAT RAYDIUM_PROJECTION_TOP; // ORTHO ONLY
%%

You've probably noticed that orthographic projection defines a "box"
with your screen: near, far, left, right, bottom. Everything out ouf
this box will never be displayed.

Perspective projection is based on FOV: Field Of Vision, given in degrees.
A common "human" fov is 60°, up to 90° without any noticeable deformation.
"near" and "far" are used for many things: Z-Buffer precision is affected,
and clipping too: as with "orthographic", nothing will be displayed beyond
"far", and fog, if enabled, will hide this "limit". This is right for "near",
too, but without fog, obviously :)

Also remember that decreasing FOV will zoom in.

You must call ##raydium_window_view_update()## after any modification on one
(or more) of these variables (see "Window Managment" section for more
information)

===Frame size and color===

##raydium_window_tx## and ##raydium_window_ty## are read-only variables,
providing you actual frame size.

##raydium_background_color[4]## is a RGBA table, and will be used for
frame clearing, and fog color. You can change this variable, and call
respective update functions (frame and fog), or simply use
##raydium_background_color_change(GLfloat r, GLfloat g, GLfloat b, GLfloat a)##.

More informations in corresponding sections.

===Vertices===

Vertices data structure is distributed in 4 parts:

- ##raydium_vertex_*## : these tables will simply contains vertices coordinates

- ##raydium_vertex_normal_*## : vertices normals. Raydium will maintain
two distinct normal tables, and this one will be used for calculations.

- ##raydium_vertex_normal_visu_*## : the other normal table, used for
lighting. Smoothing "visu" normals will provides a better rendering, and Raydium includes
all necessary functions to automate this task.

- ##raydium_vertex_texture_u##, ##*raydium_vertex_texture_v##,
##*raydium_vertex_texture## contains, for each vertex stored
in the vertices data structure, u and v mapping information,
and associated texture number. U and V are texture mapping coordinates.

Raydium can automatically generates some of these data
(normals and uv coords, that is), Read "Vertices" section above
for more information.

PLEASE, do not write directly in these tables, use dedicated functions.

===Objects===

Objects are loaded in Vertices stream, identified by a "start" and an "end"
(##raydium_object_start[]## and ##raydium_object_end[]##) in this stream.
An index is incremented each time you load an object
(##GLuint raydium_object_index##). Filename is also stored in
##raydium_object_name[][]##. Go to "Objects" section to know more.

===Lights===

First of all, ##raydium_light_enabled_tag## contains 0 when light is
disabled, non-zero otherwise. This is a read-only variable, so use
suitable functions.

Currently, for Raydium, a light can have 3 states: on, off, or blinking.
##raydium_light_internal_state[]## stores this.

Next comes all light's features: position, color, intensity. You can
modify directly these variables, and call update fonctions,
if needed (not recommended).

Next, ##raydium_light_blink_*## are used internaly for blinking lights,
setting lowest, higher light intensity, and blinking speed.
Do noy modify these variables, use suitable functions.

You should read the chapter dedicated to lights for more information.

===Fog===

Only one variable, here: ##raydium_fog_enabled_tag##, switching from zero
to non zero if fog is enabled. Do NOT use this variable to enable or
disable fog, but suitable functions, this variable is just a tag.

===Camera===

Since many calls to camera functions are done during one frame,
Raydium must track if any call to these functions was already done,
using ##raydium_frame_first_camera_pass## boolean.

##raydium_camera_pushed##, also used as a boolean, stores stack state.
When you place your camera in the scene with Raydium, it pushes matrix
on top of the stack, so you can modify it (the matrix), placing an object
for example, an restore it quickly after, by popping matrix off.


&lt;a name="math.h"&gt;&lt;/a&gt;
=====2 Maths:=====
====&lt;a name=></a>2.1 Little introduction to math.c:</h3>
This section is mostly designed for internal uses, but provides some<br />
usefull maths functions, mostly for trigonometrical uses.<br />
<br />
Historical note: most functions here were originally named with "trigo" prefix,<br />
since this module was named trigo.c. Aliases are provided for compatibility<br />
reasons, of course. (but watch out for old bindings !)<br />
<br />
<h3><a name="raydium_math_cos"></a>2.2 GLfloat raydium_math_cos (GLfloat i):</h3>
Obvious (degrees)<br />
<br />
<h3><a name="raydium_math_sin"></a>2.3 GLfloat raydium_math_sin (GLfloat i):</h3>
Obvious (degrees)<br />
<br />
<h3><a name="raydium_math_cos_inv"></a>2.4 GLfloat raydium_math_cos_inv (GLfloat i):</h3>
Obvious (degrees)<br />
<br />
<h3><a name="raydium_math_sin_inv"></a>2.5 GLfloat raydium_math_sin_inv (GLfloat i):</h3>
Obvious (degrees)<br />
<br />
<h3><a name="raydium_math_abs"></a>2.6 raydium_math_abs(a) (macro):</h3>
Obvious<br />
define raydium_trigo_abs is deprecated, for compatibility only.<br />
<br />
<h3><a name="raydium_math_min"></a>2.7 raydium_math_min(a,b) (macro):</h3>
Obvious<br />
define raydium_trigo_min is deprecated, for compatibility only.<br />
<br />
<h3><a name="raydium_math_max"></a>2.8 raydium_math_max(a,b) (macro):</h3>
Obvious<br />
define raydium_trigo_max is deprecated, for compatibility only.<br />
<br />
<h3><a name="raydium_math_isfloat"></a>2.9 raydium_math_isfloat(a) (macro):</h3>
Test two cases : "Not a Number" and "Infinite"<br />
define raydium_trigo_isfloat is deprecated, for compatibility only.<br />
<br />
<h3><a name="raydium_math_round"></a>2.10 raydium_math_round(a) (macro):</h3>
Will obviously "round" <tt>a</tt> instead of the default C floor behaviour<br />
define raydium_trigo_round is deprecated, for compatibility only.<br />
<br />
<h3><a name="raydium_math_rotate"></a>2.11 void raydium_math_rotate (GLfloat * p, GLfloat rx, GLfloat ry, GLfloat rz, GLfloat * res):</h3>
Rotate p (GLfloat * 3) by (rx,ry,rx) angles (degrees).<br />
Result is stored in res (GLfloat * 3)<br />
<br />
<h3><a name="raydium_math_pos_to_matrix"></a>2.12 void raydium_math_pos_to_matrix (GLfloat * pos, GLfloat * m):</h3>
Generates a ODE style matrix (16 Glfloat) from pos (GLfloat * 3)<br />
<br />
<h3><a name="raydium_math_pos_get_modelview"></a>2.13 void raydium_math_pos_get_modelview (GLfloat * res):</h3>
Stores the translation part of the current <a href="http://wiki.raydium.org/wiki/OpenGL">OpenGL</a> MODELVIEW matrix in res (3 GLfloat)<br />
<br />
<h3><a name="raydium_math_pow2_next"></a>2.14 int raydium_math_pow2_next(int value):</h3>
Returns next power of two of <tt>value</tt>. Ugly.<br />
<br />
<h3><a name="raydium_math_MatrixInverse"></a>2.15 int _raydium_math_MatrixInverse(const float *m,float *out):</h3>
Our matrix_inverse seems broken.<br />
This code works, thanks to Alexander Zaprjagaev (frustum@public.tsu.ru)<br />
This code is not native<br />
<br />
<h3><a name="raydium_math_quaternion_normalize"></a>2.16 void raydium_math_quaternion_normalize(float *quat):</h3>
Normalize <tt>quat</tt> quaternion. I suppose such code is already available<br />
in ODE.<br />
<br />
<h3><a name="raydium_math_quaternion_slerp"></a>2.17 void raydium_math_quaternion_slerp(float *start, float *end, float alpha,float *result):</h3>
Spherical Linear Interpolation of quaternions, from <tt>start</tt> to <tt>end</tt><br />
with alpha [0,1] as interpolation point.<br />
<br />
<h3><a name="raydium_math_quaternion_multiply"></a>2.18 void raydium_math_quaternion_multiply(float *q1, float *q2, float *result):</h3>
Multiply two quaternions and fill the <tt>result</tt> with the resulting<br />
quaternion.<br />
Quite usefull for making rotations over quaternions.<br />
Here a list of common quaternions:<br />
W X Y Z<br />
1,0,0,0 	 				Identity quaternion, no rotation<br />
0,1,0,0 					180' turn around X axis<br />
0,0,1,0 					180' turn around Y axis<br />
0,0,0,1 					180' turn around Z axis<br />
sqrt(0.5),sqrt(0.5),0,0	90' rotation around X axis<br />
sqrt(0.5),0,sqrt(0.5),0	90' rotation around Y axis<br />
sqrt(0.5),0,0,sqrt(0.5)	90' rotation around Z axis<br />
sqrt(0.5),-sqrt(0.5),0,0	-90' rotation around X axis<br />
sqrt(0.5),0,-sqrt(0.5),0	-90' rotation around Y axis<br />
sqrt(0.5),0,0,-sqrt(0.5)	-90' rotation around Z axis<br />
TODO: Those could be added like defines<br />
<br />
<h3><a name="raydium_math_angle_from_projections"></a>2.19 float raydium_math_angle_from_projections(float px, float py):</h3>
This function will return the real angle (in radians) for a pair of X<br />
and Y projections of a vector. The vector has to be normalized, this is<br />
, with the values betwen -1 and 1;<br />
The returned angle will be in the range [0-2PI].<br />
<br />
<h3><a name="raydium_math_point_unproject_3D"></a>2.20 signed char raydium_math_point_unproject_3D(GLfloat x, GLfloat y, GLfloat z, float* resx, float* resy):</h3>
Return the (x,y) screen coordinates for a 3D point viewed from the<br />
current camera.<br />
The <tt>resx</tt> and <tt>resy</tt> results are in the [0..100] interval.<br />
This function will return <tt>0</tt> if the point is behind the camera (and then,<br />
probably not interesting), and <tt>1</tt> if the point is in the POV of the<br />
camera ("in front of" is more exact).<br />
<br />
warning 1: the camera must be placed before calling this function.<br />
warning 2: this function will replace the camera by itself.<br />
<br />
<h3><a name="raydium_math_hms"></a>2.21 void raydium_math_hms(double t, int *h, int *m, int *s, int *ms):</h3>
Converts a duration (in seconds) to H:M:S:MS format.<br />
<br />
<a name="log.h"></a><br />
<h2>3 Logging:</h2>
<h3><a name="raydium_math_hms"></a>3.1 Introduction to log.c:</h3>
Raydium uses and provides his own logging system,<br />
hidden behind a single function, as shown below.<br />
<br />
<h3><a name="raydium_log"></a>3.2 void raydium_log (char *format, ...):</h3>
This function must be used like "printf", using a format<br />
("%s, %i, %x, ...") and then, suitable variables,<br />
but without the end-line char ('\n')<br />
<br />
<div class="code"><pre>raydium_log<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"You are player %i, %s"</span>,player_number,player_name<span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
For now, this function writes to the parent terminal and the in-game console, with "Raydium: " string prefix.<br />
The user can force logging to a file, using <tt>--logfile</tt> command line switch.<br />
<br />
<a name="random.h"></a><br />
<h2>4 Random:</h2>
<h3><a name="raydium_log"></a>4.1 Introduction:</h3>
These functions deals with random numbers generation.<br />
<br />
<h3><a name="raydium_random_randomize"></a>4.2 void raydium_random_randomize (void):</h3>
This function initialize the random number generator<br />
with current time for seed.<br />
<b>Note: </b> You are not supposed to use this function.<br />
<br />
<h3><a name="raydium_random_pos_1"></a>4.3 GLfloat raydium_random_pos_1 (void):</h3>
"positive, to one": 0 &lt;= res &lt;= 1<br />
<br />
<h3><a name="raydium_random_neg_pos_1"></a>4.4 GLfloat raydium_random_neg_pos_1 (void):</h3>
"negative and positive, one as absolute limit": -1 &lt;= res &lt;= 1<br />
<br />
<h3><a name="raydium_random_0_x"></a>4.5 GLfloat raydium_random_0_x (GLfloat i):</h3>
"zero to x": 0 &lt;= res &lt;= x<br />
<br />
<h3><a name="raydium_random_f"></a>4.6 GLfloat raydium_random_f (GLfloat min, GLfloat max):</h3>
min &lt;= res &lt;= max (float)<br />
<br />
<h3><a name="raydium_random_i"></a>4.7 int raydium_random_i (int min, int max):</h3>
min &lt;= res &lt;= max (integer)<br />
<br />
<h3><a name="raydium_random_proba"></a>4.8 signed char raydium_random_proba (GLfloat proba):</h3>
Returns true or false (0 or 1) depending of "proba" factor.<br />
<tt>proba</tt> must be: 0 &lt;= proba &lt;=1<br />
ex: 90% = 0.9 (this will "very probably" return true)<br />
<br />
<a name="fog.h"></a><br />
<h2>5 Fog:</h2>
<h3><a name="raydium_random_proba"></a>5.1 Introduction:</h3>
Fog is usefull for two major reasons:<br />
<br />
1. Realism: Just try, and you'll understand:<br />
amazing depth impression, no ?<br />
<br />
2. Speed: For a correct fog effect (i'm talking<br />
about estetic aspect), you must bring near_clipping to a closer value,<br />
reducing the overall number of triangles displayed at the same time.<br />
<br />
There are 3 types of fog. They are:<br />
* Linear: fog = (Far-z) / (Far-Near)<br />
* Exp: fog = e^(-density*z)<br />
* <span class="missingpage">Exp2</span><a href="http://wiki.raydium.org/wiki/Exp2/edit">?</a>: fog = e^((-density*z)^2)<br />
<br />
Above <tt>z</tt> is the distance to the calculated point from the camera.<br />
As you can see, linear mode doesn't use <tt>density</tt>, and Exp & <span class="missingpage">Exp2</span><a href="http://wiki.raydium.org/wiki/Exp2/edit">?</a> modes don't<br />
use near and far values. Remember that.<br />
<br />
<h3><a name="raydium_fog_enable"></a>5.2 void raydium_fog_enable (void):</h3>
Obvious<br />
<br />
<h3><a name="raydium_fog_disable"></a>5.3 void raydium_fog_disable (void):</h3>
Obvious<br />
<br />
<h3><a name="raydium_fog_color_update"></a>5.4 void raydium_fog_color_update (void):</h3>
If you have modified <tt>raydium_background_color</tt> array, you must<br />
call this function, applying the specified color to hardware.<br />
See also: <tt>raydium_background_color_change</tt><br />
<br />
<h3><a name="raydium_fog_mode"></a>5.5 void raydium_fog_mode(GLuint mode):</h3>
The fog mode can be change with this function. There are 3 different ways<br />
to apply the fog:<br />
<br />
1. <tt>RAYDIUM_FOG_MODE_LINEAR</tt> - Used by default, the fog is directly applied<br />
according the distance. Not real world fog, but used to avoid drawing<br />
too distant objects.<br />
<tt>IMPORTANT</tt>: LINEAR mode ignores the <tt>density</tt> value,<br />
only uses <tt>near</tt> and <tt>far</tt>.<br />
<br />
2. <tt>RAYDIUM_FOG_MODE_EXP</tt> - The fog grows exponentially with the distance.<br />
Usual mist in the real world.<br />
<tt>IMPORTANT</tt>: EXP mode ignores the <tt>near</tt> and <tt>far</tt> values,<br />
only uses the <tt>density</tt>.<br />
<br />
3. <tt>RAYDIUM_FOG_MODE_EXP2</tt> - The fog grows twice exponentially with the<br />
distance. Used when the observer is inside a cloud/mist.<br />
<tt>IMPORTANT</tt>: EXP2 mode ignores the <tt>near</tt> and <tt>far</tt> values,<br />
only uses the <tt>density</tt>.<br />
<br />
<h3><a name="raydium_fog_density"></a>5.6 void raydium_fog_density(GLfloat density):</h3>
Sets the density of the fog.<br />
Useless if you are using LINEAR mode.<br />
<br />
<h3><a name="raydium_fog_near"></a>5.7 void raydium_fog_near(GLfloat near):</h3>
Sets the near point to apply the fog.<br />
Useless if you are using EXP or EXP2 modes.<br />
<br />
<h3><a name="raydium_fog_far"></a>5.8 void raydium_fog_far(GLfloat far):</h3>
Sets the far point of the fog.<br />
Useless if you are using EXP or EXP2 modes.<br />
<br />
<h3><a name="raydium_fog_apply"></a>5.9 void raydium_fog_apply(void):</h3>
Used to apply changes in your setup of fog.<br />
Also is used to continue a previously stopped fog.<br />
See: <tt>raydium_fog_wait()</tt> below.<br />
<br />
<h3><a name="raydium_fog_wait"></a>5.10 void raydium_fog_wait(void):</h3>
With this function you can deactivate TEMPORALY the fog, but the internal state<br />
of the fog in Raydium won't change, so when you use raydium_fog_apply, the fog<br />
will continue like it was before being stoped.<br />
It's very usefull for certain rendering effects that need to<br />
stop the fog temporaly.<br />
<br />
<h3><a name="raydium_fog_volumetric_support"></a>5.11 void raydium_fog_volumetric_support(void):</h3>
With this function, you're saying to Raydium that you want a support<br />
for volumetric fog in you application. Call this function as soon as possible<br />
after engine init, since it will change the way Raydium renders objects (think<br />
about display lists).<br />
<br />
<h3><a name="raydium_fog_volumetric_enable"></a>5.12 void raydium_fog_volumetric_enable(void):</h3>
When you call this function, fog is no more applied using fragment depth,<br />
but using <tt>RENDER_VOLUMETRIC_FOG_AXIS</tt> (see config.h).<br />
You must have called <tt>raydium_fog_volumetric_support()</tt> before enabling<br />
volumetric fog.<br />
<br />
<h3><a name="raydium_fog_volumetric_disable"></a>5.13 void raydium_fog_volumetric_disable(void):</h3>
Reset fog sytem to default behavior (fragment depth).<br />
<br />
<a name="window.h"></a><br />
<h2>6 Window management:</h2>
<h3><a name="raydium_fog_volumetric_disable"></a>6.1 Introduction:</h3>
Some important functions, used for window creation and managment.<br />
<br />
<h3><a name="raydium_window_close"></a>6.2 void raydium_window_close (void):</h3>
This function is called by Raydium, do not use.<br />
<br />
<h3><a name="raydium_window_create"></a>6.3 void raydium_window_create (GLuint tx, GLuint ty, signed char rendering, char *name):</h3>
You must call this function once in your program, with following arguments:<br />
<br />
1. <tt>tx</tt>, <tt>ty</tt>: window size, in pixel<br />
2. <tt>rendering</tt>: window mode: <tt>RAYDIUM_RENDERING_*</tt> :<br />
<tt>NONE</tt>, <tt>WINDOW</tt> (resizable), <tt>WINDOW_FIXED</tt> (unresizable) and <tt>FULLSCREEN</tt>.<br />
3. <tt>name</tt>: window's name<br />
<br />
Raydium is using <span class="missingpage">MyGLUT</span><a href="http://wiki.raydium.org/wiki/MyGLUT/edit">?</a> for window management, and <span class="missingpage">MyGLUT</span><a href="http://wiki.raydium.org/wiki/MyGLUT/edit">?</a> fullscreen is not<br />
the same between all implementations. For instance, the Linux <span class="missingpage">MyGLUT</span><a href="http://wiki.raydium.org/wiki/MyGLUT/edit">?</a> does<br />
not resize the X screen, therefore doesn't care about <tt>tx</tt> and <tt>ty</tt>.<br />
But the win32 implementation did resize screen.<br />
<br />
This design choice allows to respect usual behaviors of operating systems.<br />
<br />
Note that user can force fullscreen using <tt>--fullscreen</tt> on the command line.<br />
<br />
<h3><a name="raydium_window_resize_callback"></a>6.4 void raydium_window_resize_callback (GLsizei Width, GLsizei Height):</h3>
This function is automaticaly called during a window resize,<br />
and resize <a href="http://wiki.raydium.org/wiki/OpenGL">OpenGL</a> rendering space.<br />
<br />
There is almost no reason to call this function by yourself.<br />
<br />
<h3><a name="raydium_window_view_update"></a>6.5 void raydium_window_view_update (void):</h3>
If you've changed 3D window size (clipping: raydium_projection_*),<br />
apply to hardware with this fonction.<br />
<br />
<h3><a name="raydium_window_view_perspective"></a>6.6 void raydium_window_view_perspective(GLfloat fov, GLfloat fnear, GLfloat ffar):</h3>
All-in-one function: sets all "perspective" variables, and updates.<br />
<br />
<a name="capture.h"></a><br />
<h2>7 Capture (2D):</h2>
<h3><a name="raydium_window_view_perspective"></a>7.1 Quickview:</h3>
Captures are made in TGA (without RLE compression) or JPEG formats and saved into<br />
the current directory.<br />
These functions may fail (garbage in resulting capture) if frame size if<br />
not "standard", mostly after a window resize.<br />
<br />
Also there are "auto" functions that provide a simplest method to make an screen<br />
capture. <a href="http://So,the">So,the</a> following example (put into the <tt>display()</tt> function), allows jpeg<br />
screenshots just pressing F9 key:<br />
<div class="code"><pre><span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>raydium_key_last==<span style="color: #cc66cc;">9</span><span style="color: #66cc66;">&#41;</span> raydium_capture_frame_jpeg_auto<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
Raydium also allow you to capture movies: activate <tt>DEBUG_MOVIE</tt> option<br />
in <tt>raydium/config.h</tt> with the needed framerate, and press F11. Raydium<br />
will use a dedicated time line, allowing smooth capture. This system may cause<br />
strange behaviours with movies providing network action.<br />
The movie is stored in multiples files in <tt>movie</tt> directory, and you can<br />
use mencoder like this:<br />
<tt>mencoder -ovc lavc -lavcopts vcodec=mpeg4:vhq:vbitrate=780<br />
<a href="mf://\*.tga">mf://\*.tga</a> -vf scale=320:240 -mf fps=25 -o ~/ray.avi</tt><br />
You can also use audio file adding this:<br />
<tt> -audiofile audio.mp3 -oac copy</tt> for example.<br />
<br />
<h3><a name="raydium_capture_frame"></a>7.2 void raydium_capture_frame(char *filename):</h3>
Capture current frame to <tt>filename</tt>.<br />
<br />
<h3><a name="raydium_capture_frame_auto"></a>7.3 void raydium_capture_frame_auto(void):</h3>
Same as above, but to an auto-generated filename (raycap*).<br />
<br />
<h3><a name="raydium_capture_frame_jpeg"></a>7.4 void raydium_capture_frame_jpeg(char *filename):</h3>
Same as <tt>raydium_capture_frame()</tt> but using JPEG image format.<br />
See <tt>raydium/config.h</tt> for quality setting.<br />
<br />
<h3><a name="raydium_capture_frame_now"></a>7.5 void raydium_capture_frame_now(char *filename):</h3>
Same as <tt>raydium_capture_frame()</tt>, but without waiting the end of the frame,<br />
saving the hardware color buffer, whatever it contains. Use with caution.<br />
<br />
<h3><a name="raydium_capture_frame_jpeg_now"></a>7.6 void raydium_capture_frame_jpeg_now(char *filename):</h3>
Same as above, but using JPEG image format.<br />
<br />
<h3><a name="raydium_capture_filename_auto"></a>7.7 void raydium_capture_filename_auto(char *dest,char *format):</h3>
Internal Use. Generates filenames for new screenshots.<br />
<br />
<h3><a name="raydium_capture_frame_auto"></a>7.8 void raydium_capture_frame_auto(void):</h3>
Capture the current frame giving the resulting file and automatic name.<br />
<br />
<h3><a name="raydium_capture_frame_jpeg_auto"></a>7.9 void raydium_capture_frame_jpeg_auto(void):</h3>
Same as above, but using JPEG image format.<br />
<br />
<a name="background.h"></a><br />
<h2>8 Background:</h2>
<h3><a name="raydium_background_color_change"></a>8.1 void raydium_background_color_change (GLfloat r, GLfloat g, GLfloat b, GLfloat a):</h3>
Will change <tt>raydium_background_color</tt> array and apply this modification.<br />
(will update fog color, obviously).<br />
<br />
<a name="clear.h"></a><br />
<h2>9 Frame clearing:</h2>
<h3><a name="raydium_clear_frame"></a>9.1 void raydium_clear_frame (void):</h3>
You need to call this function every frame to clear all hardware buffers.<br />
<br />
<h3><a name="raydium_clear_color_update"></a>9.2 void raydium_clear_color_update (void):</h3>
Will apply background color modification. Probably useless for you.<br />
<br />
<a name="light.h"></a><br />
<h2>10 Lights:</h2>
<h3><a name="raydium_clear_color_update"></a>10.1 Introduction to Raydium light system:</h3>
When we starts Raydium development, the main idea was to use native <a href="http://wiki.raydium.org/wiki/OpenGL">OpenGL</a><br />
lights, and not lightmaps or another method.<br />
<br />
This method (native lights) provides 8 simultaneous movable lights,<br />
and is quite effective with recent <a href="http://wiki.raydium.org/wiki/OpenGL">OpenGL</a> hardware.<br />
<br />
You can modify intensity, position, color, you can turn on any light at<br />
any time, make them blinking... Mixing all theses features can result<br />
many effects, as realtime sunset, flashing lights for cars, explosions, ...<br />
<br />
Usage is very easy: no need to create lights, just turn them on.<br />
<br />
See also: <a href="http://wiki.raydium.org/wiki/LightMaps">LightMaps</a><br />
<br />
<h3><a name="raydium_light_enable"></a>10.2 void raydium_light_enable (void):</h3>
Obvious.<br />
<br />
<h3><a name="raydium_light_disable"></a>10.3 void raydium_light_disable (void):</h3>
Obvious.<br />
<br />
<h3><a name="raydium_light_texture"></a>10.4 signed char raydium_light_texture(int texture, signed char enable):</h3>
Texture <tt>l</tt> will not use lighting if <tt>enable</tt> is set to 0. Call this<br />
function <b>before</b> loading any object using this texture, because<br />
of display lists. Same way, it's not possible to change back this value<br />
after the first object drawing without disabling display lists.<br />
<br />
<h3><a name="raydium_light_texture_name"></a>10.5 signed char raydium_light_texture_name(char *name, signed char enable):</h3>
Same as above, but using texture <tt>name</tt>.<br />
<br />
<h3><a name="raydium_light_to_GL_light"></a>10.6 GLuint raydium_light_to_GL_light (GLuint l):</h3>
Probably useless for end user. (internal uses)<br />
<br />
<h3><a name="raydium_light_on"></a>10.7 void raydium_light_on (GLuint l):</h3>
Turns <tt>l</tt> light on ( 0 &lt;= l &lt;= RAYDIUM_MAX_LIGHTS )<br />
<br />
<h3><a name="raydium_light_off"></a>10.8 void raydium_light_off (GLuint l):</h3>
Turns <tt>l</tt> light off<br />
<br />
<h3><a name="raydium_light_switch"></a>10.9 void raydium_light_switch (GLuint l):</h3>
Will swith <tt>l</tt> light state (from "on" to "off", for example).<br />
<br />
<h3><a name="raydium_light_update_position"></a>10.10 void raydium_light_update_position (GLuint l):</h3>
Updates <tt>raydium_light_position[l]</tt> array changes to hardware.<br />
This function is now used internaly by Raydium,<br />
so you have no reasons to call it by yourself.<br />
<br />
<h3><a name="raydium_light_update_position_all"></a>10.11 void raydium_light_update_position_all (void):</h3>
See above.<br />
<br />
<h3><a name="raydium_light_update_intensity"></a>10.12 void raydium_light_update_intensity (GLuint l):</h3>
See above.<br />
<br />
<h3><a name="raydium_light_update_all"></a>10.13 void raydium_light_update_all (GLuint l):</h3>
See above.<br />
<br />
<h3><a name="raydium_light_move"></a>10.14 void raydium_light_move (GLuint l, GLfloat * vect):</h3>
Moves light to position <tt>vect</tt> for light <tt>l</tt> (vect is GLfloat[4]: x,y,z,dummy).<br />
<br />
Just move your lights before camera placement, or your changes<br />
will be applied to the next frame only.<br />
<br />
<h3><a name="raydium_light_reset"></a>10.15 void raydium_light_reset (GLuint l):</h3>
This function will restore all defaults for <tt>l</tt> light.<br />
<br />
<h3><a name="raydium_light_blink_internal_update"></a>10.16 void raydium_light_blink_internal_update (GLuint l):</h3>
Useless for end-user.<br />
<br />
<h3><a name="raydium_light_blink_start"></a>10.17 void raydium_light_blink_start (GLuint l, int fpc):</h3>
Makes <tt>l</tt> light blinking at <tt>fpc</tt> (frames per cycle) rate.<br />
This function will use timecalls soon ("fpc" -&gt; "hertz")<br />
<br />
<h3><a name="raydium_light_callback"></a>10.18 void raydium_light_callback (void):</h3>
Useless for end-user.<br />
<br />
<a name="key.h"></a><br />
<h2>11 Keyboard & keys:</h2>
<h3><a name="raydium_key_normal_callback"></a>11.1 void raydium_key_normal_callback (GLuint key, int x, int y):</h3>
Internal callback.<br />
<br />
<h3><a name="raydium_key_special_callback"></a>11.2 void raydium_key_special_callback (GLuint key, int x, int y):</h3>
Internal callback.<br />
<br />
<h3><a name="raydium_key_special_up_callback"></a>11.3 void raydium_key_special_up_callback (GLuint key, int x, int y):</h3>
Internal callback.<br />
<br />
<h3><a name="raydium_key_pressed"></a>11.4 int raydium_key_pressed (GLuint key):</h3>
Will return state of <tt>key</tt> in the <tt>raydium_keys[]</tt> array.<br />
This function is usefull to test keyboard from PHP, since <a href="http://wiki.raydium.org/wiki/RayPHP">RayPHP</a> doest not<br />
support array for now.<br />
<br />
<a name="mouse.h"></a><br />
<h2>12 Mouse:</h2>
<h3><a name="raydium_key_pressed"></a>12.1 Introduction:</h3>
Mouse API is almost explainded at the top of this guide, but here it<br />
is some other usefull functions (macros, in fact).<br />
<br />
<h3><a name="raydium_mouse_hide"></a>12.2 raydium_mouse_hide() (macro):</h3>
Hides mouse cursor.<br />
<br />
<h3><a name="raydium_mouse_show"></a>12.3 raydium_mouse_show() (macro):</h3>
Shows mouse cursor.<br />
<br />
<h3><a name="raydium_mouse_move"></a>12.4 void raydium_mouse_move(int x, int y):</h3>
Moves cursor to (<tt>x</tt>,<tt>y</tt>) position (in pixel).<br />
Example if you want to move cursor at window's center:<br />
<div class="code"><pre>raydium_mouse_move<span style="color: #66cc66;">&#40;</span>raydium_window_tx/<span style="color: #cc66cc;">2</span>, raydium_window_ty/<span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
<h3><a name="raydium_mouse_isvisible"></a>12.5 signed char raydium_mouse_isvisible(void):</h3>
Returns true or false (0 or 1), if the mouse is visible or not.<br />
See <tt>raydium_mouse_show()</tt> and <tt>raydium_mouse_hide()</tt> above.<br />
<br />
<h3><a name="raydium_mouse_init"></a>12.6 void raydium_mouse_init (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_mouse_click_callback"></a>12.7 void raydium_mouse_click_callback (int but, int state, int x, int y):</h3>
Internal callback.<br />
<br />
<h3><a name="raydium_mouse_move_callback"></a>12.8 void raydium_mouse_move_callback (int x, int y):</h3>
Internal callback.<br />
<br />
<h3><a name="raydium_mouse_button_pressed"></a>12.9 int raydium_mouse_button_pressed (int button):</h3>
returns <tt>button</tt> state. (See first part of this document)<br />
<br />
<h3><a name="raydium_mouse_button_pressed"></a>12.10 Mouse Wheel:</h3>
To get the mouse wheel status you have to check directly the variable<br />
<tt>raydium_mouse_click</tt>.<br />
-Value 4 means "mouse wheel up".<br />
-Value 5 means "mouse wheel down".<br />
Usage example:<br />
<div class="code"><pre><span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>raydium_mouse_click==<span style="color: #cc66cc;">4</span><span style="color: #66cc66;">&#41;</span>
zoom*=<span style="color: #cc66cc;">1</span>.1f;
<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>raydium_mouse_click==<span style="color: #cc66cc;">5</span><span style="color: #66cc66;">&#41;</span>
zoom*=<span style="color: #cc66cc;">0</span>.9f;</pre>
</div><br />
This piece of code will change the value of zoom according mouse wheel.<br />
<br />
<h3><a name="raydium_mouse_grab_delta"></a>12.11 void raydium_mouse_grab_delta(int *x, int *y):</h3>
This function will "grab" the mouse and return mouse moves since last call.<br />
Output parameters <tt>x</tt> and <tt>y</tt> will gives you the delta.<br />
<br />
You can yse this function for any "FPS like" mouse look controls, or any other<br />
situation where you need to known how far the user moves the mouse since<br />
the last frame.<br />
<br />
This function now use a box model, so its compliant with all window sizes,<br />
even odd ones.<br />
<br />
<a name="texture.h"></a><br />
<h2>13 Textures:</h2>
<h3><a name="raydium_mouse_grab_delta"></a>13.1 Introduction:</h3>
For now, Raydium only handles TGA textures.<br />
As explainded in the first part of this guide, Raydium provides four<br />
texture filters (none, bilinear, trilinear using <a href="http://wiki.raydium.org/wiki/MipMaps">MipMaps</a>, and anisotropic ).<br />
<br />
Texture must be 8 (alpha mask), 24 (RGB) or 32 (RGBA) bits, and sizes should<br />
be a power of two (so all hardware can handle it). Compression is available.<br />
<br />
Raydium supports simple color materials,  using a "rgb(r,g,b)" string<br />
as texture name, where r, g and b are 0 &lt;= x &lt;= 1 (floats).<br />
With 3 negative values, you will generate a "phantom texture". Phantom textures<br />
are only drawn into the z-buffer (and not color buffer).<br />
Texture clamping and advanced multitexturing effects are supported by Raydium,<br />
but not fully documented here for now.<br />
A few quick tips:<br />
- "BOX" filename prefix (ex: BOX_foo.tga) is used as a clamp-to-edge attribute.<br />
- "HDR" prefix is used to set a texture as a "light emitter" (sky, lamp, ...)<br />
- "ENV" prefix is used for environment (sphere) mapping.<br />
- "ATM" prefix is used for "Alpha-Tested Magnification" vector textures.<br />
- ";" operator is used for basic multitexturing in TRI files.<br />
- "|" operator for UV coords with multitextured lines in TRI files.<br />
- "#" operator is used for environnement mapped multitexturing in TRI files.<br />
<br />
A few things about the last operator, "#":<br />
Effective environment mapping (one pass, two texture units) is available using<br />
a special filename separator for texture field in TRI files : #<br />
See this example:<br />
<tt>0.232258 0.225387 -0.149804 0.012198 -0.274925 0.961388 0.731411 0.980236 fiesta_diffuse.tga#ENV_map.tga</tt><br />
Environment texture name must start with "ENV" to allow spherical mapping, wich<br />
is needed for such effect. See also <tt>RAYDIUM_RENDER_REFLECTION_FACT</tt> in<br />
file <tt>common.h</tt> if you want reflection to be more or less visible.<br />
<br />
This separator can also be used for shaders, to load multiple textures in the<br />
hardware (up to RAYDIUM_RENDER_MAX_TEXUNITS on the same line of the tri file).<br />
<br />
For more informations about other operators and prefixes, you may have a look<br />
at the Wiki or at engine's source code.<br />
<br />
Some informations about textures with alpha channel, since it can be to root of<br />
a few rendering issues. Translucent textures are not Z-buffer compliant, so<br />
Raydium will always render it last. But it's a "per-object" behavior, so it<br />
can still "fight" with other objects, or even with other translucent textures<br />
from the same object. Think about rendering order (textures and objects) when<br />
possible, it will help avoiding such troubles.<br />
<br />
Sometime, alpha channel is only needed to create "holes" in textures. If you<br />
can't handle this directly in the geometry of the object (slower but better<br />
quality), the easy option is <tt>RAYDIUM_TEXTURE_BLEND_CUTOUT</tt> textures. Raydium<br />
will detect such textures when alpha channel shows only perfectly opaque pixels<br />
and prefectly transparent ones. Any intermediate value will make the engine<br />
falling back to the regular <tt>RAYDIUM_TEXTURE_BLEND_BLENDED</tt> mode.<br />
<br />
Keep this in mind when you create textures like trees, for instance, where you<br />
should have only 0 or 100% alpha values. You can do this with software<br />
like The GIMP, using tools like "Threshold Alpha". Note that the engine will<br />
not apply advanced filters (trilinear, aniso, ...) on such textures to avoid<br />
rendering artifacts.<br />
<br />
<h3><a name="raydium_texture_size_is_correct"></a>13.2 signed char raydium_texture_size_is_correct (GLuint size):</h3>
Returns true if <tt>size</tt> is a correct texture size, depending of<br />
hardware capacities and "power of 2" constraint.<br />
<br />
<h3><a name="raydium_texture_load_internal"></a>13.3 GLuint raydium_texture_load_internal(char *filename, char *as, signed char faked, int faked_tx, int faked_ty, int faked_bpp, int or_live_id_fake):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_texture_load"></a>13.4 GLuint raydium_texture_load (char *filename):</h3>
Loads "filename" texture into hardware memory. Function results<br />
texture index, but in most cases, you can identify later a texture<br />
by his name, without providing his index, so you can probably ignore<br />
this value.<br />
<br />
0 is returned if texture loading have failed.<br />
<br />
<h3><a name="raydium_texture_load_erase"></a>13.5 GLuint raydium_texture_load_erase (char *filename, GLuint to_replace):</h3>
Same as above, but <tt>to_replace</tt> texture (index) is erased with <tt>filename</tt>.<br />
<br />
<h3><a name="raydium_texture_free"></a>13.6 void raydium_texture_free(int number):</h3>
experimental function to free textures<br />
<br />
<h3><a name="raydium_texture_free_name"></a>13.7 void raydium_texture_free_name(char *name):</h3>
experimental function to free textures by its name<br />
<br />
<h3><a name="raydium_texture_is_slot_used"></a>13.8 int raydium_texture_is_slot_used(int slot):</h3>
Returns true (1) if the texture <tt>slot</tt> is used for a texture, and<br />
therefore, valid.<br />
<br />
<h3><a name="raydium_texture_get_next_free_slot_internal"></a>13.9 int raydium_texture_get_next_free_slot_internal(void):</h3>
Internal use. Will search a new free texture slot.<br />
<br />
<h3><a name="raydium_texture_current_set"></a>13.10 signed char raydium_texture_current_set (GLuint current):</h3>
Switch active texture to "current" index. Mostly used for runtime object<br />
creation:<br />
"set current texture, add vertices, set another texture,<br />
add vertices, ... and save all to an objet"<br />
(see below for vertices management).<br />
<br />
<h3><a name="raydium_texture_current_set_name"></a>13.11 signed char raydium_texture_current_set_name (char *name):</h3>
Same as above, but using texture name. This function will load <tt>name</tt><br />
if not alread done.<br />
<br />
<h3><a name="raydium_texture_find_by_name"></a>13.12 GLuint raydium_texture_find_by_name (char *name):</h3>
Returns index for texture "name", and load it if not already done.<br />
<br />
<h3><a name="raydium_texture_exists"></a>13.13 GLint raydium_texture_exists(char *name):</h3>
Same as above, but don't load texture if <tt>name</tt> isn't already loaded and<br />
then returns -1. Returns texture id otherwise.<br />
<br />
<h3><a name="raydium_texture_npot_enable"></a>13.14 void raydium_texture_npot_enable(void):</h3>
You can allow the load of Non-power-of-two textures with this function.<br />
<br />
<h3><a name="raydium_texture_npot_disable"></a>13.15 void raydium_texture_npot_disable(void):</h3>
Function to disabled the previous behaviour. By default Raydium already<br />
has this behaviour disabled.<br />
<br />
<h3><a name="raydium_texture_filter_change"></a>13.16 void raydium_texture_filter_change (GLuint filter):</h3>
<br />
Change texture filter. The new filter will apply on all "next" textures,<br />
but will not change already loaded ones (this was the case in old Raydium<br />
releases), since it may generate strange bugs with dynamic (aka "faked")<br />
textures, and it was very slow.<br />
<br />
<div class="code"><pre><span style="color: #808080; font-style: italic;">// will switch to bilinear filter for next textures</span>
raydium_texture_filter_change<span style="color: #66cc66;">&#40;</span>RAYDIUM_TEXTURE_FILTER_BILINEAR<span style="color: #66cc66;">&#41;</span></pre>
</div><br />
<br />
<h3><a name="raydium_texture_compression"></a>13.17 void raydium_texture_compression(signed char enable):</h3>
This function allows Raydium to compress textures if hardware supports this<br />
feature. You can also use the "--compress" command line switch.<br />
The default is <tt>0</tt> ("no").<br />
<br />
<a name="render.h"></a><br />
<h2>14 Rendering:</h2>
<h3><a name="raydium_texture_compression"></a>14.1 Introduction:</h3>
render.c contains Raydium rendering core, so only "public" and<br />
interesting function will be documented.<br />
<br />
A few variable may be very useful here. First, you can see how many frames<br />
were rendered during last second, reading <tt>raydium_render_fps</tt> (interger,<br />
read only). This variable is refreshed every second. If you need a<br />
instantaneous measure, see below.<br />
<br />
You may also read <tt>raydium_frame_time</tt> (float, read only) since it gives you<br />
the elasped time during the last frame ! (in seconds). This a very easy way<br />
to make framerate independent things. See this example, featuring two different<br />
uses of this variable:<br />
<div class="code"><pre><span style="color: #993333;">void</span> display<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">void</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
<span style="color: #993333;">static</span> <span style="color: #993333;">float</span> posx=<span style="color: #cc66cc;">0</span>;
<span style="color: #993333;">float</span> speed=<span style="color: #cc66cc;">10</span>; <span style="color: #808080; font-style: italic;">// our object should move of 10 units per second</span>
<span style="color: #993333;">static</span> <span style="color: #993333;">float</span> time_elasped_in_seconds=<span style="color: #cc66cc;">0</span>;
...
<span style="color: #202020;">posx</span> = posx + <span style="color: #66cc66;">&#40;</span>speed * raydium_frame_time<span style="color: #66cc66;">&#41;</span>;
time_elasped_in_seconds+=raydium_frame_time;
...
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
Note that you can have instantaneous framerate with, for instance:<br />
<div class="code"><pre><span style="color: #993333;">float</span> fps=<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span>.<span style="color: #202020;">f</span><span style="color: #66cc66;">&#41;</span>/raydium_frame_time;</pre>
</div><br />
<br />
As a note, I must said that it' obvious for me that many parts of render.c<br />
have to be rewritten (tips: slow, buggy, old, ... :)<br />
<br />
<h3><a name="raydium_render_lightmap_color"></a>14.2 void raydium_render_lightmap_color(GLfloat *color):</h3>
You may force a new lightmap rendering color "filter" anytime with this<br />
function, allowing advanced lighting effects.<br />
HUGE WARNING: You must turn off display lists if you change this value after<br />
first object's render.<br />
See <tt>raydium_rendering_displaylists_disable()</tt> if needed.<br />
<br />
<h3><a name="raydium_render_lightmap_color_4f"></a>14.3 void raydium_render_lightmap_color_4f(GLfloat r, GLfloat g, GLfloat b, GLfloat a):</h3>
Same as above, using 4 values.<br />
<br />
<h3><a name="raydium_rendering_prepare_texture_unit"></a>14.4 int  raydium_rendering_prepare_texture_unit (GLenum tu, GLuint tex):</h3>
This function will "prepare" hardawre texture unit <tt>tu</tt> to render <tt>tex</tt> texture.<br />
There almost no reason to call this function by yourself.<br />
<br />
<h3><a name="raydium_rendering_internal_prepare_texture_render"></a>14.5 void raydium_rendering_internal_prepare_texture_render (GLuint tex):</h3>
Same as above, but for texture unit #0 only.<br />
<br />
<h3><a name="raydium_rendering_internal_restore_render_state"></a>14.6 void raydium_rendering_internal_restore_render_state (void):</h3>
Internal. Deprecated.<br />
<br />
<h3><a name="raydium_rendering_from_to_simple"></a>14.7 void raydium_rendering_from_to_simple(GLuint from, GLuint to):</h3>
Same as <tt>raydium_rendering_from_to()</tt>, but only with vertices (no<br />
UV, no normals, no textures, no colors, ...).<br />
Mostly used for internal shadow maps creation.<br />
<br />
<h3><a name="raydium_rendering_from_to"></a>14.8 void raydium_rendering_from_to (GLuint from, GLuint to):</h3>
Renders vertices from <tt>from</tt> to <tt>to</tt>.<br />
Using object management functions is a better idea.<br />
<br />
<h3><a name="raydium_rendering"></a>14.9 void raydium_rendering (void):</h3>
Renders all vertices (probably useless, now).<br />
<br />
<h3><a name="raydium_rendering_finish"></a>14.10 void raydium_rendering_finish (void):</h3>
You must call this function at the end of each frame. This will flush all<br />
commands to hardware, fire a lot off callbacks, and prepare next frame.<br />
<br />
<h3><a name="raydium_rendering_wireframe"></a>14.11 void raydium_rendering_wireframe (void):</h3>
Switch to wireframe rendering.<br />
<br />
<h3><a name="raydium_rendering_normal"></a>14.12 void raydium_rendering_normal (void):</h3>
Switch back to standard rendering.<br />
<br />
<h3><a name="raydium_rendering_rgb_force"></a>14.13 void raydium_rendering_rgb_force (GLfloat r, GLfloat g, GLfloat b):</h3>
Force all RGB colored vertices to take <tt>(r,g,b)</tt> color. One example of this<br />
use is for making "team colored" cars : Do not apply textures to some faces<br />
while modelling, and force to team color each time you render a car.<br />
<br />
<h3><a name="raydium_rendering_rgb_normal"></a>14.14 void raydium_rendering_rgb_normal (void):</h3>
Disable "rgb force" state. See above.<br />
<br />
<h3><a name="raydium_rendering_displaylists_disable"></a>14.15 void raydium_rendering_displaylists_disable(void):</h3>
Disable display lists usage.<br />
Some old video cards and broken drivers may get better performances WITHOUT<br />
display lists (on large objects, mainly).<br />
<br />
<h3><a name="raydium_rendering_displaylists_enable"></a>14.16 void raydium_rendering_displaylists_enable(void):</h3>
Enable display lists usage. default state.<br />
<br />
<h3><a name="raydium_render_fps_limit"></a>14.17 void raydium_render_fps_limit(float maxfps):</h3>
This function changes the maximum number of frames per second.<br />
Sometimes is wanted to reduce the consumption of cpu cycles by our application.<br />
In this situations we can use a method for delay each frame of the game<br />
until a desired framerate. In that way the residual frames won't be processed<br />
and a "lot" of cpu cycles will be saved.<br />
Also can be used to increase the stability in certains systems.<br />
Set <tt>maxfps</tt> to 0 if you want to disable this limit (this is the default).<br />
<br />
<h3><a name="raydium_render_loading"></a>14.18 void raydium_render_loading(void):</h3>
Internal. Display a "low level and cheap" loading screen, useful when<br />
R3S is downloading things from network.<br />
<br />
<a name="particle2.h"></a><br />
<h2>15 Particle engine:</h2>
<h3><a name="raydium_render_loading"></a>15.1 Introduction:</h3>
This is the second version of Raydium's particle engine. This engine is build<br />
on top of a dedicated file format (.prt and .sprt files), describing most<br />
(up to all, in facts) properties of generators.<br />
It probably better to start by an example (fountain.prt) :<br />
<div class="code"><pre><span style="color: #808080; font-style: italic;">// Simple blue fountain (change 'vector' if needed)</span>
ttl_generator=<span style="color: #cc66cc;">5</span>;
ttl_particles=<span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">5</span>;
ttl_particles_random=<span style="color: #cc66cc;">0</span>;
&nbsp;
particles_per_second=<span style="color: #cc66cc;">200</span>;
&nbsp;
texture=<span style="color: #ff0000;">"flare_nb.tga"</span>;
&nbsp;
size=<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">1</span>;
size_inc_per_sec=<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">1</span>;
&nbsp;
gravity=<span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>,-<span style="color: #cc66cc;">5</span><span style="color: #66cc66;">&#125;</span>;
vector=<span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">4</span><span style="color: #66cc66;">&#125;</span>;
vector_random=<span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">2</span>,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">2</span>,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#125;</span>;
&nbsp;
<span style="color: #808080; font-style: italic;">// RGBA</span>
color_start=<span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">6</span>,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">6</span>,<span style="color: #cc66cc;">1</span>,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">5</span><span style="color: #66cc66;">&#125;</span>;
color_start_random=<span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">2</span>,<span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#125;</span>;
color_end=<span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">1</span>,<span style="color: #cc66cc;">1</span>,<span style="color: #cc66cc;">1</span>,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#125;</span>;
&nbsp;
<span style="color: #808080; font-style: italic;">// end of file. </span>
&nbsp;</pre>
</div><br />
<br />
.prt files are readed using parsing functions (see appropriate chapter, if<br />
needed), and the list of all available properties can be found in particle2.c<br />
source file. A full toturial is also available on Raydium's Wiki.<br />
<br />
Once the particle file is written, you only need to load the file using the<br />
suitable function (see below). Some anchor are available to link generators to<br />
physic entities, if needed, as callbacks for a few events (one, for now).<br />
<br />
.sprt files are used to create a "snapshot" of particles, used for example by<br />
3D captures, and are not meant to be edited by hand.<br />
<br />
<h3><a name="raydium_particle_name_auto"></a>15.2 void raydium_particle_name_auto (char *prefix, char *dest):</h3>
Will generate a unique string using <tt>prefix</tt>. The string is created using<br />
space provided by <tt>dest</tt>.<br />
You can use this function when building a new generator.<br />
<br />
<h3><a name="raydium_particle_init"></a>15.3 void raydium_particle_init (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_particle_generator_isvalid"></a>15.4 signed char raydium_particle_generator_isvalid (int g):</h3>
Internal use, but you can call this function if you want to verify if a<br />
generator's id is valid (in bounds, and loaded).<br />
<br />
<h3><a name="raydium_particle_generator_find"></a>15.5 int raydium_particle_generator_find (char *name):</h3>
Lookups a generator using is name. Returns -1 if <tt>name</tt> is not found.<br />
<br />
<h3><a name="raydium_particle_find_free"></a>15.6 int raydium_particle_find_free (void):</h3>
Finds a free <b>particle</b> slot.<br />
<br />
<h3><a name="raydium_particle_generator_delete"></a>15.7 void raydium_particle_generator_delete (int gen):</h3>
Deletes a generator.<br />
<br />
<h3><a name="raydium_particle_generator_delete_name"></a>15.8 void raydium_particle_generator_delete_name (char *gen):</h3>
Same as above, but using generator's name.<br />
<br />
<h3><a name="raydium_particle_generator_enable"></a>15.9 void raydium_particle_generator_enable (int gen, signed char enabled):</h3>
Activate a disabled generator (see below).<br />
<br />
<h3><a name="raydium_particle_generator_enable_name"></a>15.10 void raydium_particle_generator_enable_name (char *gen, signed char enable):</h3>
Disable a generator (TTL is still decremented).<br />
<br />
<h3><a name="raydium_particle_preload"></a>15.11 void raydium_particle_preload (char *filename):</h3>
Loads .prt file and associated textures into suitable caches.<br />
Call this function if you want to avoid (small) jerks caused by "live"<br />
loading a generator.<br />
<br />
<h3><a name="raydium_particle_generator_load_internal"></a>15.12 void raydium_particle_generator_load_internal (int generator, FILE * fp, char *filename):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_particle_generator_load"></a>15.13 int raydium_particle_generator_load (char *filename, char *name):</h3>
Loads generator from <tt>filename</tt> as <tt>name</tt>. This <tt>name</tt> will be used for<br />
future references to this generator, as the returned interger id.<br />
<br />
<h3><a name="raydium_particle_generator_update"></a>15.14 void raydium_particle_generator_update (int g, GLfloat step):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_particle_update"></a>15.15 void raydium_particle_update (int part, GLfloat step):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_particle_callback"></a>15.16 void raydium_particle_callback (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_particle_state_dump"></a>15.17 int raydium_particle_state_dump(char *filename):</h3>
Dumped current particles to <tt>filename</tt> (.sprt [static particles]).<br />
<br />
<h3><a name="raydium_particle_state_restore"></a>15.18 int raydium_particle_state_restore(char *filename):</h3>
Append .sprt <tt>filename</tt> to current scene.<br />
<br />
<h3><a name="raydium_particle_draw"></a>15.19 void raydium_particle_draw (raydium_particle_Particle * p, GLfloat ux, GLfloat uy, GLfloat uz, GLfloat rx, GLfloat ry, GLfloat rz):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_particle_draw_all"></a>15.20 void raydium_particle_draw_all (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_particle_generator_move"></a>15.21 void raydium_particle_generator_move (int gen, GLfloat * pos):</h3>
Moves <tt>gen</tt> generator to <tt>pos</tt> position (3 * GLfloat array).<br />
<br />
<h3><a name="raydium_particle_generator_move_name"></a>15.22 void raydium_particle_generator_move_name (char *gen, GLfloat * pos):</h3>
Same as above, but using generator's name.<br />
<br />
<h3><a name="raydium_particle_generator_move_name_3f"></a>15.23 void raydium_particle_generator_move_name_3f (char *gen, GLfloat x, GLfloat y, GLfloat z):</h3>
Same as above, using 3 different GLfloat values.<br />
<br />
<h3><a name="raydium_particle_generator_particles_OnDelete"></a>15.24 void raydium_particle_generator_particles_OnDelete (int gen, void *<span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a>):</h3>
Sets a callback for <tt>gen</tt>, fired when any particle of this generator is<br />
deleted, providing a easy way to create "cascading" generators.<br />
The callback must respect the following prototype:<br />
<div class="code"><pre><span style="color: #993333;">void</span> cb<span style="color: #66cc66;">&#40;</span>raydium_particle_Particle *<span style="color: #66cc66;">&#41;</span></pre>
</div><br />
Do not free the provided particle.<br />
<br />
<h3><a name="raydium_particle_generator_particles_OnDelete_name"></a>15.25 void raydium_particle_generator_particles_OnDelete_name (char *gen, void *<span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a>):</h3>
Same as above, but using generator's name.<br />
<br />
<h3><a name="raydium_particle_scale_all"></a>15.26 void raydium_particle_scale_all(GLfloat scale):</h3>
Will scale all particles with <tt>scale</tt> factor. Use with caution.<br />
Default is obviously 1.<br />
<br />
<a name="callback.h"></a><br />
<h2>16 Callbacks:</h2>
<h3><a name="raydium_particle_scale_all"></a>16.1 Introduction:</h3>
This file contains many initializations, a few internal callbacks, but<br />
will provides a very important function for end-user, wich will<br />
gives user display function to Raydium: see below<br />
<br />
<h3><a name="raydium_callback_image"></a>16.2 void raydium_callback_image (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_callback_set"></a>16.3 void raydium_callback_set (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_callback"></a>16.4 void raydium_callback (void (*loop)):</h3>
This function will loop over the provided display function, indefinitely.<br />
"loop" must be:<br />
<div class="code"><pre><span style="color: #993333;">void</span> loop<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">void</span><span style="color: #66cc66;">&#41;</span></pre>
</div><br />
<br />
<h3><a name="raydium_callback_display_set"></a>16.5 void raydium_callback_display_set(void (*fdisplay)):</h3>
This function will install display callback but don't enter in an infinite loop.<br />
fdisplay is user display function.<br />
"fdisplay" must be:<br />
<div class="code"><pre><span style="color: #993333;">void</span> fdisplay<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">void</span><span style="color: #66cc66;">&#41;</span></pre>
</div><br />
<br />
<h3><a name="raydium_loop"></a>16.6 void raydium_loop(void):</h3>
Run raydium once. This function needs to be called periodically.<br />
This function return after loop completion.<br />
It is usefull to integrate raydium loop in another program.<br />
<br />
<a name="normal.h"></a><br />
<h2>17 Normals:</h2>
<h3><a name="raydium_loop"></a>17.1 Introduction:</h3>
This file provides some usefull functions for normal generation and smoothing.<br />
You can find some more informations about normals at the top of this guide.<br />
It now provide a few functions about tangent vectors smoothing.<br />
<br />
<h3><a name="raydium_normal_generate_lastest_triangle"></a>17.2 void raydium_normal_generate_lastest_triangle (int default_visu):</h3>
Generate normals for the last created triangle (see <tt>raydium_vertex_index</tt>)<br />
if <tt>default_visu</tt> is true ( != 0 ), this function will restore "visu"<br />
normals too.<br />
<br />
<h3><a name="raydium_normal_generate_lastest_tangent"></a>17.3 void raydium_normal_generate_lastest_tangent(void):</h3>
Generate tangents for the last created triangle. Internal use.<br />
<br />
<h3><a name="raydium_normal_restore_all"></a>17.4 void raydium_normal_restore_all (void):</h3>
This function restore visu normals with standard ones (<tt>raydium_vertex_normal_*</tt>)<br />
<br />
<h3><a name="raydium_normal_regenerate_all"></a>17.5 void raydium_normal_regenerate_all (void):</h3>
This function will regenerate standard and visu normals for the whole<br />
scene (ground, objects, ...).<br />
<br />
<h3><a name="raydium_normal_internal_smooth_generic"></a>17.6 void raydium_normal_internal_smooth_generic(char *type,GLuint from, GLuint to,GLfloat *in,GLfloat *out):</h3>
Internal. Generic smoothing function.<br />
<br />
<h3><a name="raydium_normal_smooth_all"></a>17.7 void raydium_normal_smooth_all (void):</h3>
This function will smooth the whole scene, using adjacent vertices.<br />
Note this function can take a lot of time.<br />
<br />
<h3><a name="raydium_normal_smooth_from_to"></a>17.8 void raydium_normal_smooth_from_to(GLuint from, GLuint to):</h3>
Same as above, but only from <tt>from</tt> vertex to <tt>to</tt> vertex (excluded).<br />
In other words: will smooth [from;to[<br />
<br />
<h3><a name="raydium_normal_tangent_smooth_all"></a>17.9 void raydium_normal_tangent_smooth_all (void):</h3>
Same as <tt>raydium_normal_smooth_all()</tt>, but for tangent vectors.<br />
<br />
<h3><a name="raydium_normal_tangent_smooth_from_to"></a>17.10 void raydium_normal_tangent_smooth_from_to(GLuint from, GLuint to):</h3>
Same as <tt>raydium_normal_smooth_from_to()</tt>, but for tangent vectors.<br />
<br />
<a name="vertex.h"></a><br />
<h2>18 vertices:</h2>
<h3><a name="raydium_normal_tangent_smooth_from_to"></a>18.1 Introduction:</h3>
You can create objets at runtime, if needed, using the following functions.<br />
Each of theses functions adds only one vertex so, obviously, you need to<br />
call three time the same function to add one triangle.<br />
<br />
<h3><a name="raydium_vertex_add"></a>18.2 void raydium_vertex_add (GLfloat x, GLfloat y, GLfloat z):</h3>
Adds a vertex at (<tt>x,y,z</tt>).<br />
<br />
<h3><a name="raydium_vertex_uv_add"></a>18.3 void raydium_vertex_uv_add (GLfloat x, GLfloat y, GLfloat z, GLfloat u, GLfloat v):</h3>
Same as above, but providing texture mapping informations with <tt>u</tt> and <tt>v</tt>.<br />
<br />
<h3><a name="raydium_vertex_uv_normals_add"></a>18.4 void raydium_vertex_uv_normals_add (GLfloat x, GLfloat y, GLfloat z, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat u, GLfloat v):</h3>
Same as above, giving vertex's normal with (<tt>nx,ny,nz</tt>).<br />
<br />
<a name="land.h"></a><br />
<h2>19 Land:</h2>
<h3><a name="raydium_vertex_uv_normals_add"></a>19.1 Introduction:</h3>
Historically, this file was quite complex, since Raydium was using<br />
his own physic. Now, this file is almost empty, since ODE integration<br />
now provides new landscape functions.<br />
<br />
<a name="sky.h"></a><br />
<h2>20 Sky and environement boxes:</h2>
<h3><a name="raydium_vertex_uv_normals_add"></a>20.1 Introduction:</h3>
Skyboxes are mostly automated.<br />
<br />
Currently, Raydium will use <tt>BOXfront.tga</tt>, <tt>BOXback.tga</tt>, <tt>BOXleft.tga</tt>,<br />
<tt>BOXright.tga</tt>, <tt>BOXbottom.tga</tt> and <tt>BOXtop.tga</tt> as default skybox<br />
and will draw a skybox only if fog is disabled (this is not for technical<br />
reasons, but only for realism, just think about it ;)... but you can force<br />
skybox with fog using <tt>raydium_sky_force</tt> if you really want).<br />
<br />
See <tt>raydium_sky_box_name()</tt> if you want to change default skybox.<br />
<br />
<h3><a name="raydium_sky_box_cache"></a>20.2 void raydium_sky_box_cache (void):</h3>
Internal use. Will init default skybox.<br />
<br />
<h3><a name="raydium_sky_box_cache"></a>20.3 void raydium_sky_box_cache (void):</h3>
As skybox texture are sometimes large files, you can pre-load skybox<br />
with this function. If you don't do it, Raydium will load textures<br />
during the first frame of your application.<br />
Calling this function will automatically define sky as a HDR emitter.<br />
See HDR chapter for more information.<br />
<br />
<h3><a name="raydium_sky_box_render"></a>20.4 void raydium_sky_box_render (GLfloat x, GLfloat y, GLfloat z):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_sky_sphere_render"></a>20.5 void raydium_sky_sphere_render(GLfloat x, GLfloat y, GLfloat z, int detail):</h3>
Internal use.<br />
Calculates and draw the sphere. Also rotate it according the angles or orbit.<br />
<br />
<h3><a name="raydium_sky_enable"></a>20.6 void raydium_sky_enable(void):</h3>
Allows to render the sky at background.<br />
<br />
<h3><a name="raydium_sky_disable"></a>20.7 void raydium_sky_disable(void):</h3>
Disable the render of sky at background.<br />
<br />
<h3><a name="raydium_sky_check"></a>20.8 int raydium_sky_check(void):</h3>
Returns 1 if the sky is going to be drawn at background or 0 if not.<br />
<br />
<h3><a name="raydium_sky_check"></a>20.9 Atmosphere:</h3>
Atmosphere are series of effects that intend to make the sky and the atmosphere<br />
of the game more realistic. As this is quite-beta state, only a orbital sky<br />
effect is available right now.<br />
To activate/deactivate this series of effects, you should use:<br />
<tt>raydium_sky_atmosphere_enable</tt> and <tt>raydium_sky_atmosphere_disable</tt><br />
respectively.<br />
If you need to check if the atmosphere is activated or not, use<br />
<tt>raydium_sky_atmosphere_check</tt>. The rest of the functions are internal<br />
and should not used by normal programs.<br />
<br />
<h3><a name="raydium_sky_atmosphere_enable"></a>20.10 void raydium_sky_atmosphere_enable(void):</h3>
turn on the use of atmosphere effects.<br />
This one and _disable function a program should use, the other<br />
<tt>raydium_sky_atmosphere_</tt> are internal ones.<br />
<br />
<h3><a name="raydium_sky_atmosphere_disable"></a>20.11 void raydium_sky_atmosphere_disable(void):</h3>
turn off the use of atmosphere effects.<br />
<br />
<h3><a name="raydium_sky_atmosphere_render"></a>20.12 void raydium_sky_atmosphere_render(GLfloat x, GLfloat y, GLfloat z,int detail):</h3>
Internal use. This internal function draws the atmosphere effects. Right<br />
now only draws a rotating sphere with a gradient of color (from black to white).<br />
In a future, it will draw multiples layers of sky (with and without textures),<br />
stars, satellites... Maybe rain and snow could be included here also.<br />
<br />
<h3><a name="raydium_sky_atmosphere_check"></a>20.13 signed char raydium_sky_atmosphere_check(void):</h3>
This functions only check if the atmosphere features are been used.<br />
Returns 1 if they are used, else 0.<br />
<br />
<h3><a name="raydium_sky_box_name"></a>20.14 void raydium_sky_box_name(char *name):</h3>
This function allows to load custom name sky textures.<br />
By default the names of the sky texture are:<br />
<tt>BOXfront.tga</tt>, <tt>BOXback.tga</tt>, <tt>BOXleft.tga</tt>, <tt>BOXright.tga</tt>,<br />
<tt>BOXbottom.tga</tt> and <tt>BOXtop.tga</tt>.<br />
<br />
However with this function you can define your own skybox textures, with the<br />
following name format:<br />
<tt>BOX_&lt;name&gt;_front.tga</tt>, <tt>BOX_&lt;name&gt;_front.tga</tt>, ...<br />
<br />
Example:<br />
<div class="code"><pre>raydium_sky_box_name<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"mybox"</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #808080; font-style: italic;">// Skybox textures will be BOX_mybox_top.tga, BOX_mybox_left.tga and so on ... </span>
&nbsp;</pre>
</div><br />
<br />
This function can be called anytime, but will cancel <tt>raydium_sky_box_cache()</tt><br />
effect: new textures will be loaded during this function call, causing a<br />
small freeze, and new textures will not have HDR tag.<br />
Note that you can call <tt>raydium_sky_box_cache()</tt> again to restore HDR tags.<br />
<br />
<a name="internal.h"></a><br />
<h2>21 "Internal" informations access:</h2>
<h3><a name="raydium_internal_dump"></a>21.1 void raydium_internal_dump (void):</h3>
This function is now systematically called by Raydium at application's exit,<br />
displaying some informations about loaded textures, objects, registered data,<br />
network statistics.<br />
<br />
<h3><a name="raydium_internal_dump_matrix"></a>21.2 void raydium_internal_dump_matrix (int n):</h3>
Dumps matrix to console.<br />
<tt>n</tt> values are:<br />
<div class="code">
<pre>
0 for GL_PROJECTION_MATRIX
1 for GL_MODELVIEW_MATRIX
</pre>
</div><br />
<br />
<a name="file.h"></a><br />
<h2>22 Files (generic):</h2>
<h3><a name="raydium_internal_dump_matrix"></a>22.1 Introduction:</h3>
File support is now splitted in two parts: generic functions and TRI format<br />
specific functions. This chapter talks about generic part, where you'll find<br />
some libc replacements and wrappers, and functions dealing with<br />
"private directory" of the current user.<br />
<br />
<h3><a name="raydium_file_dirname"></a>22.2 void raydium_file_dirname(char *dest,char *from):</h3>
Reliable and portable version of libc's <tt>dirname</tt> function.<br />
This function extracts directory from <tt>from</tt> filename, and writes it<br />
to <tt>dest</tt>.<br />
No memory allocation will be done by the function.<br />
<br />
<h3><a name="raydium_file_basename"></a>22.3 void raydium_file_basename(char *dest,char *from):</h3>
Another libc clone, for <tt>basename</tt> function. Extracts file name from a<br />
path into <tt>dest</tt> string.<br />
<br />
<h3><a name="raydium_file_ext"></a>22.4 void raydium_file_ext(char *dest, char *from):</h3>
Return the extension of <tt>from</tt> filename (can be a complete path), without<br />
the . (dot), or an empty string if extension is not found.<br />
<br />
<h3><a name="raydium_file_isdir"></a>22.5 signed char raydium_file_isdir(char *path):</h3>
Return <b>1</b> if <tt>path</tt> is a (readable) directory, <b>0</b> otherwise.<br />
<br />
<h3><a name="raydium_file_directory_writable"></a>22.6 signed char raydium_file_directory_writable(char *path):</h3>
Return <b>1</b> if <tt>path</tt> directory is writable, <b>0</b> otherwise.<br />
<br />
<h3><a name="raydium_file_readable"></a>22.7 signed char raydium_file_readable(char *filename):</h3>
Return <b>1</b> if <tt>filename</tt> exists and is readable, <b>0</b> otherwise.<br />
<br />
<h3><a name="raydium_file_log_fopen_display"></a>22.8 void raydium_file_log_fopen_display(void):</h3>
Display (console) all filenames that were opened before the call.<br />
<tt>--files</tt> command line option will call this function at the application's<br />
exit, closed or not.<br />
<br />
<h3><a name="raydium_file_cache_flush"></a>22.9 void raydium_file_cache_flush(void):</h3>
Flush files not found from log cache. Allow new attempt to open the file.<br />
<br />
<h3><a name="raydium_file_fopen"></a>22.10 FILE *raydium_file_fopen(char *file, char *mode):</h3>
Raydium wrapper to libc's <tt>fopen</tt> function.<br />
This function will:<br />
- Update some stats<br />
- Try to download the file from repositories if no local version is found, or<br />
will try to update the file if asked (<tt>--repository-refresh</tt> or<br />
<tt>repository-force</tt>). See R3S on Raydium's Wiki.<br />
- You can disable R3S client (for a "local only" file) adding a 'l'<br />
in <tt>mode</tt> ("rl" or "rbl" for example).<br />
- Use Raydium paths (see suitable chapter)<br />
<br />
<h3><a name="raydium_file_sum_simple"></a>22.11 unsigned long raydium_file_sum_simple(char *filename):</h3>
This function will generate a very simple checksum on <tt>filename</tt>.<br />
<br />
<h3><a name="raydium_file_sum_simple_mode"></a>22.12 unsigned long raydium_file_sum_simple_mode(char *filename,char *mode):</h3>
Same as above, but you can pass a fopen <tt>mode</tt> ("rt", or "rbl" for example).<br />
See <tt>raydium_file_fopen()</tt> for more informations about <tt>mode</tt>.<br />
<br />
<h3><a name="raydium_file_home_path"></a>22.13 char * raydium_file_home_path(char *file):</h3>
This function will return an absolute file path for <tt>file</tt> in the home<br />
directory of the current user.<br />
Returned value is a pointer to static memory. Do not free this memory and use<br />
it before any other call to this function, since it will be overwritten.<br />
Example:<br />
for <tt>test.cfg</tt>, this function will return <tt>/home/me/.raydium/test.cfg</tt><br />
See also <tt>raydium_init_args_name()</tt> if you want to tune this result.<br />
<br />
<h3><a name="raydium_file_home_path_cpy"></a>22.14 void raydium_file_home_path_cpy(char *file, char *dest):</h3>
Same as above, but you must provide memory with <tt>dest</tt>.<br />
<br />
<h3><a name="raydium_file_load"></a>22.15 char *raydium_file_load(char *filename):</h3>
This function loads <tt>filename</tt> (as a binary file under win32, no matter<br />
under Linux) in a string, and returns its address. <b>You</b> must free this<br />
memory when finished.<br />
<br />
<h3><a name="raydium_file_binary_fgets"></a>22.16 int raydium_file_binary_fgets(char *dest, int max, FILE *stream):</h3>
Binary version of LIBC's fgets. Read a maximum of <tt>max</tt> bytes from<br />
<tt>stream</tt>, including terminating 0 character, to <tt>dest</tt> buffer, and stops<br />
at the first 0 found or at EOF.<br />
No memory allocation is done, and string is always terminated by a 0.<br />
Returns the length of the readed string (without terminating 0).<br />
<br />
<h3><a name="raydium_file_utime"></a>22.17 int raydium_file_utime(const char *filename, struct utimbuf *times):</h3>
Portable version of utime(), since win32 version of this function is unable<br />
to deal with directories.<br />
From man page: This function shall set the access and modification times of<br />
the file <tt>filename</tt>.<br />
Upon successful completion, 0 shall be returned. Otherwise, -1. Errno is set.<br />
<br />
<h3><a name="raydium_file_rm_rf"></a>22.18 signed char raydium_file_rm_rf(char *path):</h3>
This a RECURSIVE rmdir function, deleting ALL FILES in <tt>path</tt> directory,<br />
and the directory himself. Of course, this function is not interactive, and<br />
will delete all in a blink of an eye, even if you ask "/" deletetion.<br />
You should not use this function, in facts.<br />
Note that the code is symlink aware and quite error proof. (sort of. perhaps.)<br />
<br />
<a name="file_tri.h"></a><br />
<h2>23 Files (TRI format):</h2>
<h3><a name="raydium_file_rm_rf"></a>23.1 Warning:</h3>
It's important to use only functions with <tt>raydium_file_*</tt> prefix.<br />
All other functions may change or disappear. Upper level functions are<br />
available (see <tt>object.c</tt>).<br />
<br />
<h3><a name="raydium_file_rm_rf"></a>23.2 Introduction:</h3>
<tt>file.c</tt> use .tri mesh files (text), available in 4 versions:<br />
<br />
1. version 1: providing normals and uv texture mapping informations.<br />
2. version 0: providing uv texture mapping.<br />
3. version -1: only providing vertices.<br />
4. version 2: mesh animation support<br />
<br />
Version 1 example file:<br />
<div class="code">
<pre>
1
5.1 15.75 -3.82 0.0000 0.0000 -1.0000 0.5158 0.5489 rgb(0.5,0.5,0.5)
6.3 11.75 -3.82 0.0000 0.0000 -1.0000 0.5196 0.5365 rgb(0.5,0.5,0.5)
5.0 11.75 -3.82 0.0000 0.0000 -1.0000 0.5158 0.5365 rgb(0.5,0.5,0.5)
...
</pre>
</div><br />
<br />
You can find the file version on first line, and then data.<br />
Next lines: vertex position (x,y,z), normal (x,y,z), texture mapping (u,v)<br />
and texture (string).<br />
<br />
Version 2 files are a bit different, as showed below:<br />
<div class="code">
<pre>
2
3 1743
0 39 stand
40 45 run
46 53 attack
1
5.1 15.75 -3.82 0.0000 0.0000 -1.0000 0.5158 0.5489 rgb(0.5,0.5,0.5)
6.3 11.75 -3.82 0.0000 0.0000 -1.0000 0.5196 0.5365 rgb(0.5,0.5,0.5)
5.0 11.75 -3.82 0.0000 0.0000 -1.0000 0.5158 0.5365 rgb(0.5,0.5,0.5)
...
</pre>
</div><br />
<br />
You may have seen that headers are longer for v2 files. You'll find (just<br />
after the version number) how many "anims" are hosted by this file, and how<br />
many vertices are required for one frame. Then you'll find one line per<br />
"anim", with starting frame, ending frame and anim's name.<br />
Then starts a regular tri file ("sub-file", with its own version number)<br />
with ALL concatened frames.<br />
<br />
<h3><a name="unsupportedvoiddump_vertex_to"></a>23.3 void dump_vertex_to (char *filename):</h3>
This function save all scene to filename (.tri file) in version 1.<br />
Vertice may be sorted.<br />
Please, try to do not use this function.<br />
<br />
<h3><a name="unsupportedvoiddump_vertex_to_alpha"></a>23.4 void dump_vertex_to_alpha (char *filename):</h3>
Now useless and deprecated.<br />
<br />
<h3><a name="raydium_file_set_textures"></a>23.5 int raydium_file_set_textures (char *name):</h3>
Internal use.<br />
This function analyze texture filename, and search for extended multitexturing<br />
informations (u,v and another texture).<br />
<br />
<h3><a name="unsupportedintread_vertex_from"></a>23.6 int read_vertex_from (char *filename):</h3>
Loads filename. Again, avoid use of this function.<br />
return 0 if filename access error/ 1 if load successfull<br />
<br />
<a name="path.h"></a><br />
<h2>24 File path:</h2>
<h3><a name="unsupportedintread_vertex_from"></a>24.1 Introduction:</h3>
When <tt>raydium_file_fopen()</tt> is called, by Raydium or by an application,<br />
the Path API is used to search the file.<br />
When the file is open for writing, Raydium will check if the current working<br />
directory is writable. If this is not the case, Raydium will try to write the<br />
file in the user home directory (~/.appname/data/), and will create it if<br />
needed.<br />
For reading, Raydium will also use the current directory <b>first</b>, and then<br />
will search in a list of directories of your choice (see example below).<br />
The user home directory is registered by default in this list.<br />
<br />
Now, the search patch system is able to work even if the '/' character is<br />
present in the requested filename, so you can use subdirectories if needed.<br />
<br />
Each path can have a <tt>priority</tt> (lower is better).<br />
Application local directory have highest structural priority.<br />
Path add by user have default 2 priority.<br />
Packages have a priority of 5. Packages files are searched just after local directory.<br />
~/.appname/data have lowest priority of 7<br />
<br />
Raydium now features a data package system, so you can store some files in<br />
a regular ZIP file (with subdirectories if you want) and then register this<br />
package in your application. Raydium will then automatically search files<br />
in the ZIP.<br />
<br />
<h3><a name="unsupportedintread_vertex_from"></a>24.2 Example of directory registering::</h3>
<div class="code"><pre>raydium_path_ext<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"./media/textures/"</span>,<span style="color: #ff0000;">"tga"</span><span style="color: #66cc66;">&#41;</span>;
raydium_path_ext<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"./media/fonts/"</span>,<span style="color: #ff0000;">"tga"</span><span style="color: #66cc66;">&#41;</span>;
raydium_path_ext<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"./media/shaders/"</span>,<span style="color: #ff0000;">"vert"</span><span style="color: #66cc66;">&#41;</span>;
raydium_path_ext<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"./media/shaders/"</span>,<span style="color: #ff0000;">"frag"</span><span style="color: #66cc66;">&#41;</span>;
raydium_path_ext<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"./media/meshes/"</span>,<span style="color: #ff0000;">"tri"</span><span style="color: #66cc66;">&#41;</span>;
raydium_path_ext<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"./media/themes/"</span>,<span style="color: #ff0000;">"gui"</span><span style="color: #66cc66;">&#41;</span>;
raydium_path_ext<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"./media/particles/"</span>,<span style="color: #ff0000;">"prt"</span><span style="color: #66cc66;">&#41;</span>;
raydium_path_ext<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"./media/cars/"</span>,<span style="color: #ff0000;">"car"</span><span style="color: #66cc66;">&#41;</span>;
raydium_path_ext<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"./media/cams/"</span>,<span style="color: #ff0000;">"cam"</span><span style="color: #66cc66;">&#41;</span>;
raydium_path_add<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"./media/"</span><span style="color: #66cc66;">&#41;</span>; <span style="color: #808080; font-style: italic;">// &quot;unsorted&quot; files </span>
&nbsp;</pre>
</div><br />
<br />
<h3><a name="raydium_path_find_free"></a>24.3 int raydium_path_find_free(void):</h3>
Internal (search a free path slot).<br />
<br />
<h3><a name="raydium_path_ext"></a>24.4 signed char raydium_path_ext(char *dir, char *ext):</h3>
Register <tt>dir</tt> directory for files with <tt>ext</tt> extension.<br />
Return 0 when it fails.<br />
<br />
<h3><a name="raydium_path_ext_priority"></a>24.5 signed char raydium_path_ext_priority(char *dir,char *ext,int priority):</h3>
Register <tt>dir</tt> directory for files with <tt>ext</tt> extension.<br />
Can specify path <tt>priority</tt> (<tt>1</tt> is <tt>highest</tt> priority).<br />
Return 0 when if fails.<br />
<br />
<h3><a name="raydium_path_add"></a>24.6 signed char raydium_path_add(char *dir):</h3>
Register <tt>dir</tt> directory.<br />
Return 0 when it fails.<br />
<br />
<h3><a name="raydium_path_find"></a>24.7 signed char raydium_path_find(char *pathfolder):</h3>
Returns 1 if the indicated folder is already in the path.<br />
<br />
<h3><a name="raydium_path_add_priority"></a>24.8 signed char raydium_path_add_priority(char *dir, int priority):</h3>
Register <tt>dir</tt> directory.<br />
Can specify <tt>priority</tt> (<tt>1</tt> is <tt>highest</tt> priority).<br />
Return 0 when it fails.<br />
<br />
<h3><a name="raydium_path_write"></a>24.9 signed char raydium_path_write(char *dir):</h3>
Change the writing directory to <tt>dir</tt> directory. You should probably also<br />
register this new directory, using <tt>raydium_path_add()</tt>.<br />
<br />
<h3><a name="raydium_path_string_from"></a>24.10 signed char raydium_path_string_from(char *str):</h3>
Reset all registrations (only current directory stays) and replace it with the<br />
provided formated string. Here it is an example for such string:<br />
<br />
<div class="code">
<pre>
/home/xfennec/.myapp/data:./media/textures/X.tga:./media/fonts/X.tga:
./media/shaders/X.vert:./media/shaders/X.frag:./media/meshes/X.tri:
./media/themes/X.gui:./media/particles/X.prt:./media/cars/X.car:
./media/cams/X.cam:./media
</pre>
</div><br />
(do not include line feeds and replace 'X' by '*')<br />
<br />
This string is based on the example at the top of this chapter.<br />
<br />
<h3><a name="raydium_path_string_to"></a>24.11 int raydium_path_string_to(char *out):</h3>
Dumps all registrations to <tt>out</tt> string.<br />
<br />
<h3><a name="raydium_path_resolv"></a>24.12 void raydium_path_resolv(char *in, char *out, char mode):</h3>
Internal (find the best absolute path for the requested file).<br />
<br />
<h3><a name="raydium_path_dump"></a>24.13 void raydium_path_dump(void):</h3>
Dumps read and write paths to console.<br />
<br />
<h3><a name="raydium_path_reset"></a>24.14 void raydium_path_reset(void):</h3>
Reset all registrations.<br />
You should probably better use <tt>raydium_path_string_from()</tt>.<br />
<br />
<h3><a name="raydium_path_write_local_deny"></a>24.15 void raydium_path_write_local_deny(signed char deny):</h3>
By default, Raydium always tries to write in the local directory (binary's<br />
directory, in other words), and if it's not possible, did it in the registered<br />
writing directory. Using this function (with deny=1) will force Raydium to use<br />
the second option each time. Then Raydium will never write to local directory.<br />
<br />
<h3><a name="raydium_path_init"></a>24.16 void raydium_path_init(void):</h3>
Internal.<br />
<br />
<h3><a name="raydium_path_package_find"></a>24.17 int raydium_path_package_find(char *name):</h3>
Return path index associated with package name <tt>name</tt>.<br />
<br />
<h3><a name="raydium_path_package_find_free"></a>24.18 int raydium_path_package_find_free(void):</h3>
Return free package slot.<br />
Return -1 if <tt>RAYDIUM_MAX_PACKAGES_FILES</tt> already registered.<br />
<br />
<h3><a name="raydium_path_package_register"></a>24.19 signed char raydium_path_package_register(char *file):</h3>
Call this function to register a new ZIP package (note that you can change<br />
the file extension if you want). All files in the archive will be available<br />
to the application with no other change !<br />
<br />
This feature is R3S compliant, so the ZIP file may be downloaded automatically.<br />
<br />
There's no persistence, you should register your packages at every run. A cache<br />
system makes the proccess very quick, as file access. Any change made to the<br />
registered ZIP file discards the cache automatically.<br />
<br />
Package have a default 'Middle' priority of <tt>5</tt> -&gt; File are first searched<br />
in local directory, then in path added explicitly by user and then in <tt>package</tt> file.<br />
<br />
<br />
<h3><a name="raydium_path_package_internal_add"></a>24.20 signed char raydium_path_package_internal_add(char * file):</h3>
Internal. Add a package to list of registered package.<br />
<br />
<h3><a name="raydium_path_package_mode"></a>24.21 void raydium_path_package_mode(char * name,unsigned char mode):</h3>
Define package mode: <tt>RAYDIUM_PACKAGE_READONLY</tt> / <tt>RAYDIUM_PACKAGE_READWRITE</tt><br />
With <tt>RAYDIUM_PACKAGE_READWRITE</tt> all opened files are automaticaly added/refreshed<br />
in package at application exit.<br />
Package mode is written in package file.<br />
To modify package mode use console within the application.<br />
<br />
<h3><a name="raydium_path_package_cache_clear"></a>24.22 signed char raydium_path_package_cache_clear(void):</h3>
This function will clear the packages cache, and exit the application (for<br />
some reasons, including laziness).<br />
<b>There's no reason to call this function</b>, cache is managed by Raydium itself.<br />
But you can use it to clear all old useless cache entries and get a bit more<br />
free disk space, why not.<br />
<br />
<a name="anim.h"></a><br />
<h2>25 Animation System:</h2>
<h3><a name="raydium_path_package_cache_clear"></a>25.1 unknown item:</h3>
Beta<br />
Animation system<br />
Based on <span class="missingpage">Cal3D</span><a href="http://wiki.raydium.org/wiki/Cal3D/edit">?</a> (<a href="http://home.gna.org/cal3d/)">http://home.gna.org/cal3d/)</a>.<br />
<br />
<h3><a name="raydium_anim_model_load"></a>25.2 int raydium_anim_model_load(char *filename):</h3>
Beta<br />
This function loads a model.<br />
Currently only <span class="missingpage">Cal3D</span><a href="http://wiki.raydium.org/wiki/Cal3D/edit">?</a> models are allowed. So you have to specify a *.cfg file in<br />
the <tt>filename</tt>.<br />
<br />
<tt>Parameters:</tt><br />
<tt>model</tt>:the index of the model to instanciate<br />
<br />
<tt>Returns:</tt><br />
the index of the new model, or -1 if fails<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre><span style="color: #993333;">int</span> paladin_model;
<span style="color: #993333;">int</span> create_model_paladin<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">void</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
paladin_model=raydium_anim_model_load<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"paladin.cfg"</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #b1b100;">return</span>
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
<h3><a name="raydium_anim_cal3d_model_load_internal"></a>25.3 int raydium_anim_cal3d_model_load_internal(int a,char *filename):</h3>
Beta<br />
Internal.<br />
<br />
<h3><a name="raydium_anim_models_destroy_all"></a>25.4 void raydium_anim_models_destroy_all(void):</h3>
Beta<br />
Destroy all models used in raydium.<br />
Beware. You should destroy all instances BEFORE call this function.<br />
<br />
<h3><a name="raydium_anim_init"></a>25.5 void raydium_anim_init(void):</h3>
Beta<br />
Initialise the animation system.<br />
<br />
<h3><a name="raydium_anim_instance_new"></a>25.6 int raydium_anim_instance_new(int model):</h3>
Beta<br />
Creates a new instance from a <tt>model</tt>.<br />
<br />
<tt>Parameters:</tt><br />
<tt>model</tt>:the index of the model to instanciate<br />
<br />
<tt>Returns:</tt><br />
The index of the new instance<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre><span style="color: #993333;">int</span> paladin_instance<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span>;
<span style="color: #993333;">int</span> paladin_model;
<span style="color: #993333;">void</span> create_paladin_instances<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">void</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
paladin_model=create_model_paladin<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
paladin_instance<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#93;</span>=raydium_anim_instance_new<span style="color: #66cc66;">&#40;</span>paladin_model<span style="color: #66cc66;">&#41;</span>;
paladin_instance<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#93;</span>=raydium_anim_instance_new<span style="color: #66cc66;">&#40;</span>paladin_model<span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
<h3><a name="raydium_anim_instance_update"></a>25.7 void raydium_anim_instance_update(int instance,float time):</h3>
Beta<br />
This function is a must if you want to animate you models(instances).<br />
<br />
<tt>Parameters:</tt><br />
<tt>instance</tt>:the index of the instance<br />
<tt>time</tt>: The time betwen the last call to thin function and this call.<br />
Commonly this value is equal to <tt>raydium_frame_time</tt><br />
<br />
<tt>Returns:</tt><br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre><span style="color: #993333;">void</span> display<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">void</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
<span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>raydium_key_last==<span style="color: #cc66cc;">1027</span><span style="color: #66cc66;">&#41;</span>
exit<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#41;</span>;
raydium_clear_frame<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
raydium_camera_freemove<span style="color: #66cc66;">&#40;</span>RAYDIUM_CAMERA_FREEEMOVE_NORMAL<span style="color: #66cc66;">&#41;</span>;
raydium_ode_draw_all<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#41;</span>;
raydium_anim_instance_update<span style="color: #66cc66;">&#40;</span>character,raydium_frame_time<span style="color: #66cc66;">&#41;</span>;
raydium_anim_instance_render_mesh<span style="color: #66cc66;">&#40;</span>character<span style="color: #66cc66;">&#41;</span>;
raydium_rendering_finish<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
<h3><a name="raydium_anim_animation_scale"></a>25.8 void raydium_anim_animation_scale(int model,int animation,float scale):</h3>
Beta<br />
This function allows you to scale an animation of your model BEFORE using it.<br />
<tt>Parameters:</tt><br />
<tt>model:</tt>id of the model to sacle<br />
<tt>animation</tt>:id of the animation to scale<br />
<tt>factor</tt>: scale factor<br />
<br />
<tt>Returns:</tt><br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre><span style="color: #993333;">void</span> scale_enemy<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">void</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
raydium_anim_animation_scale<span style="color: #66cc66;">&#40;</span>enemy_model,enemy_animations<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">7</span><span style="color: #66cc66;">&#93;</span>,<span style="color: #cc66cc;">2</span>.<span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
<h3><a name="raydium_anim_cal3d_instance_new_internal"></a>25.9 int raydium_anim_cal3d_instance_new_internal(int num,int model):</h3>
Beta<br />
This will create a new instance from a model<br />
<tt>Parameters:</tt><br />
<tt>num:</tt>id of the new instance to create. Should be an unused one.<br />
<tt>model</tt>:id of the model<br />
<br />
<tt>Returns:</tt> 1 if everything goes right, elso 0.<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre><span style="color: #993333;">void</span> new_enemy<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">void</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
<span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>raydium_anim_cal3d_instance_new_internal<span style="color: #66cc66;">&#40;</span>instace_counter,enemy_model<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
raydium_log<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"New enemy instance created"</span><span style="color: #66cc66;">&#41;</span>;
instance_counter++;
<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
<h3><a name="raydium_anim_instance_destroy"></a>25.10 void raydium_anim_instance_destroy(int instance):</h3>
Beta<br />
Destroy a certain instance<br />
<br />
<tt>Parameters:</tt><br />
<tt>instance:</tt>id of the instance to destroy<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre><span style="color: #993333;">void</span> enemy_die<span style="color: #66cc66;">&#40;</span>enemy_instance<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
raydium_anim_instance_destroy<span style="color: #66cc66;">&#40;</span>enemy_instance<span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
<h3><a name="raydium_anim_instance_get_pos_rot"></a>25.11 void raydium_anim_instance_get_pos_rot(int instance, float posrot[]):</h3>
Beta<br />
Returns the position,rotation of the instance<br />
<br />
<tt>Parameters:</tt><br />
<tt>instance:</tt>id of the instance to check<br />
<tt>posrot[]</tt>float[6] with the position(float[3]) and rotation(float[3]) of the instance<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre><span style="color: #993333;">void</span> enemy_suicide<span style="color: #66cc66;">&#40;</span>instance<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
<span style="color: #993333;">float</span> posrot*;
posrot=raydium_anim_instance_get_pos_rot<span style="color: #66cc66;">&#40;</span>instance<span style="color: #66cc66;">&#41;</span>;
raydium_anim_instance_destroy<span style="color: #66cc66;">&#40;</span>instance<span style="color: #66cc66;">&#41;</span>;
raydium_ode_explosion_blow_rand_3f<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">10</span>,<span style="color: #cc66cc;">50</span>,<span style="color: #cc66cc;">1</span>,posrot<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#93;</span>,posrot<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#93;</span>,posrot<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
<h3><a name="raydium_anim_model_destroy"></a>25.12 void raydium_anim_model_destroy(int a):</h3>
Beta<br />
Destroy a certain model<br />
<br />
<tt>Parameters:</tt><br />
<tt>a:</tt>id of the model to destroy<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre><span style="color: #993333;">void</span> enemy_extermination<span style="color: #66cc66;">&#40;</span>enemy_model<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
<span style="color: #b1b100;">for</span><span style="color: #66cc66;">&#40;</span>a=<span style="color: #cc66cc;">0</span>;a&lt;max_enemy_instances;a++<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
raydium_anim_instance_destroy<span style="color: #66cc66;">&#40;</span>a<span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span>
raydium_anim_model_destroy<span style="color: #66cc66;">&#40;</span>model<span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
<tt>Warning:</tt>The instances using this model should be previously destroyed<br />
<br />
<h3><a name="raydium_anim_instance_render_skeleton"></a>25.13 void raydium_anim_instance_render_skeleton(int instance):</h3>
Beta<br />
Renders just the skeleton of an instance<br />
<tt>Parameters:</tt><br />
<tt>instance:</tt>ID of the instance to render<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<h3><a name="raydium_anim_instances_destroy_all"></a>25.14 void raydium_anim_instances_destroy_all(void):</h3>
Beta<br />
Destroy all animation instances used by raydium<br />
<br />
<tt>Parameters:</tt><br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<h3><a name="raydium_anim_instance_attach_meshes"></a>25.15 void raydium_anim_instance_attach_meshes(int instance):</h3>
Beta<br />
Apply internally loaded meshes to an instance<br />
<tt>Parameters:</tt><br />
<tt>instance:</tt>instance ID where to attach meshes<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<br />
<h3><a name="raydium_anim_cal3d_instance_attach_meshes"></a>25.16 void raydium_anim_cal3d_instance_attach_meshes(int instance):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_instance_render_mesh"></a>25.17 void raydium_anim_cal3d_instance_render_mesh(int instance):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_loop_set"></a>25.18 void raydium_anim_loop_set(int instance,int animation, float influence, float delay_seconds):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_loop_set"></a>25.19 void raydium_anim_cal3d_loop_set(int instance,int animation, float influence, float delay_seconds):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_loop_clear"></a>25.20 void raydium_anim_loop_clear(int instance,int animation, float delay_seconds):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_loop_clear"></a>25.21 void raydium_anim_cal3d_loop_clear(int instance,int animation, float delay_seconds):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_action_set"></a>25.22 void raydium_anim_action_set(int instance,int animation, float fadein_seconds, float fadeout_seconds, int autolock):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_action_set"></a>25.23 void raydium_anim_cal3d_action_set(int instance,int animation, float fadein_seconds, float fadeout_seconds, int autolock):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_model_lod_set"></a>25.24 void raydium_anim_cal3d_model_lod_set(int instance, float lod_level):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_model_lod_set"></a>25.25 void raydium_anim_model_lod_set(int instance, float lod_level):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_model_materials_apply"></a>25.26 void raydium_anim_cal3d_model_materials_apply(int instance, int set):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_model_materials_apply"></a>25.27 void raydium_anim_model_materials_apply(int instance, int set):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_instance_render_mesh"></a>25.28 void raydium_anim_instance_render_mesh(int instance):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_action_remove"></a>25.29 void raydium_anim_cal3d_action_remove(int instance, int animation):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_action_remove"></a>25.30 void raydium_anim_action_remove(int instance,int animation):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_instance_render_skeleton"></a>25.31 void raydium_anim_cal3d_instance_render_skeleton(int instance):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_skeleton_scale"></a>25.32 void raydium_anim_skeleton_scale(int model,float scale):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_instance_update"></a>25.33 void raydium_anim_cal3d_instance_update(int instance, float time):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_animation_scale"></a>25.34 void raydium_anim_cal3d_animation_scale(int model,int animation,float scale):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_skeleton_scale"></a>25.35 void raydium_anim_cal3d_skeleton_scale(int model,float scale):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_cal3d_instance_destroy"></a>25.36 void raydium_anim_cal3d_instance_destroy(int instance):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_instance_render"></a>25.37 void raydium_anim_instance_render(int instance, int type):</h3>
Beta<br />
description<br />
<tt>Parameters:</tt><br />
<tt>param1:</tt>desc<br />
<br />
<tt>Returns:</tt> none<br />
<br />
<tt>Example:</tt><br />
<div class="code"><pre>code</pre>
</div><br />
<br />
<tt>Warning:</tt>desc<br />
TODO<br />
<br />
<h3><a name="raydium_anim_instance_move"></a>25.38 void raydium_anim_instance_move(int instance,float x, float y, float z):</h3>
Beta<br />
Moves the instance to a certain position<br />
<br />
<tt>Parameters:</tt><br />
<tt>instance:</tt>id of the model to check<br />
<tt>x,y,z:</tt>3D coords of the new position<br />
<br />
<tt>Returns:</tt> none<br />
<tt>Example:</tt><br />
TODO<br />
<br />
<h3><a name="raydium_anim_instance_move"></a>25.39 unknown item:</h3>
Beta<br />
Moves the instance a certain distance over the previous position<br />
<br />
<tt>Parameters:</tt><br />
<tt>instance:</tt>id of the model to check<br />
<tt>x,y,z:</tt>3D coords of the new position<br />
<br />
<tt>Returns:</tt> none<br />
<tt>Example:</tt><br />
TODO<br />
<br />
<h3><a name="raydium_anim_instance_rotate"></a>25.40 void raydium_anim_instance_rotate(int instance,float x, float y, float z):</h3>
Beta<br />
Rotates the instance to a desired angle (degrees)<br />
<br />
<tt>Parameters:</tt><br />
<tt>instance:</tt>id of the model to check<br />
<tt>x,y,z:</tt>3D components of the angle<br />
<br />
<tt>Returns:</tt> none<br />
<tt>Example:</tt><br />
TODO<br />
<br />
<h3><a name="raydium_anim_instance_rotate_relative"></a>25.41 void raydium_anim_instance_rotate_relative(int instance,float x, float y, float z):</h3>
Beta<br />
Rotates the instance to a desired angle (degrees) MORE than previously.<br />
<br />
<tt>Parameters:</tt><br />
<tt>instance:</tt>id of the model to check<br />
<tt>x,y,z:</tt>3D components of the angle<br />
<br />
<tt>Returns:</tt> none<br />
<tt>Example:</tt><br />
TODO<br />
<br />
<h3><a name="raydium_anim_bone_get_absolute_posrotq"></a>25.42 void raydium_anim_bone_get_absolute_posrotq(int instance,int boneid,float pos[],float *rotq):</h3>
Beta<br />
NOT WORKING!!!!<br />
<br />
<br />
<h3><a name="raydium_anim_cal3d_animation_get_number"></a>25.43 int raydium_anim_cal3d_animation_get_number(int model):</h3>
Beta<br />
Get the how many animations a model has.<br />
<tt>Parameters:</tt><br />
<tt>model:</tt>id of the model to check<br />
<br />
<tt>Returns:</tt> int. Number of animations of the model<br />
<br />
<tt>Example:</tt><br />
TODO<br />
<br />
<h3><a name="raydium_anim_animation_get_number"></a>25.44 int raydium_anim_animation_get_number(int model):</h3>
Beta<br />
Get the how many animations a model has.<br />
<tt>Parameters:</tt><br />
<tt>model:</tt>id of the model to check<br />
<br />
<tt>Returns:</tt> int. Number of animations of the model<br />
<br />
<tt>Example:</tt><br />
TODO<br />
<br />
<a name="camera.h"></a><br />
<h2>26 Camera:</h2>
<h3><a name="raydium_anim_animation_get_number"></a>26.1 Introduction:</h3>
Raydium provides camera management functions, allowing the coder to<br />
move camera with very simple functions, even for complex moves.<br />
You have to place your camera once per frame (not more, not less).<br />
<br />
"look_at" style functions can be affected by <tt>raydium_camera_look_at_roll</tt><br />
global variable, if needed.<br />
<br />
A few words about camera path: Take a look to a .cam file if you want to<br />
understand this simple file format, but you probably only need the <tt>cam.c</tt><br />
application, dedicated to camera path creation.<br />
<br />
Some camera functions are provided by physics module, see suitable chapter.<br />
<br />
<h3><a name="raydium_camera_vectors"></a>26.2 void raydium_camera_vectors (GLfloat * res3):</h3>
This function will return two vectors (2 * 3 * GLfloat), giving the camera<br />
orientation (front vector and up vector). At this day, the up vector is<br />
always the same as the world up vector, even if the camera is rotated<br />
or upside down (and yes, this MUST be corrected :).<br />
<br />
Designed for internal uses, before all.<br />
<br />
<h3><a name="raydium_camera_internal_prepare"></a>26.3 void raydium_camera_internal_prepare(void):</h3>
Internal use. (pre)<br />
<br />
<h3><a name="raydium_camera_internal"></a>26.4 void raydium_camera_internal (GLfloat x, GLfloat y, GLfloat z):</h3>
Internal use. (post)<br />
<br />
<h3><a name="raydium_camera_place"></a>26.5 void raydium_camera_place (GLfloat x, GLfloat y, GLfloat z, GLfloat lacet, GLfloat tangage, GLfloat roulis):</h3>
Sets the camera at (x,y,z) position, and using (lacet,tangage,roulis)<br />
as rotation angles.<br />
<br />
<h3><a name="raydium_camera_get_data"></a>26.6 float *raydium_camera_get_data(void):</h3>
Function to get the data of the camera in an array of 6 floats.<br />
The first 3 values are the position like x,y,z in universal coordinates.<br />
The next 3 are the rotation angles like r,s,t in degrees and universal orientation.<br />
example:<br />
<div class="code"><pre><span style="color: #993333;">float</span> *camdata;
...
<span style="color: #202020;">camdata</span>=raydium_camera_get_data<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
raydium_log<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"pos: %f %f %f rotation: %f %f %f"</span>,camdata<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#93;</span>,camdata<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#93;</span>,
camdata<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span>,camdata<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span>,camdata<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">4</span><span style="color: #66cc66;">&#93;</span>,camdata<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">5</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#41;</span>;
...</pre>
</div><br />
Returned data is related to the current frame.<br />
<br />
<h3><a name="raydium_camera_look_at"></a>26.7 void raydium_camera_look_at (GLfloat x, GLfloat y, GLfloat z, GLfloat x_to, GLfloat y_to, GLfloat z_to):</h3>
Sets the camera at (x,y,z) position, and looks at (x_to,y_to,z_to).<br />
<br />
<h3><a name="raydium_camera_replace"></a>26.8 void raydium_camera_replace (void):</h3>
You'll need to reset camera position and orientation after each object drawing.<br />
If this is unclear to you, read the "example" section, below.<br />
<br />
You will need to make your own 3D transformations (GLRotate, GLTranslate,<br />
...) to draw your objects, or you can use the following function.<br />
<br />
<h3><a name="raydium_camera_replace_go"></a>26.9 void raydium_camera_replace_go (GLfloat * pos, GLfloat * R):</h3>
This function will replace the camera, as <tt>raydium_camera_replace()</tt>,<br />
but will place "3D drawing cursor" at position <tt>pos</tt> (3 GLfloat) with<br />
rotation <tt>R</tt> (4 GLfloat quaternion).<br />
<br />
No eulers (rotx, roty, rotz) version of this function is provided for now..<br />
Do you really need it ?<br />
<br />
<h3><a name="raydium_camera_replace_go"></a>26.10 Example of camera use:</h3>
1. place camera<br />
2. move "drawing cursor" to object's place<br />
3. draw object<br />
4. reset camera to initial place (the one given at step 1)<br />
5. move "drawing cursor" to another object's place<br />
6. draw another object<br />
7. [...]<br />
<br />
Steps 4 and 5 can be done with raydium_camera_replace_go().<br />
<br />
<h3><a name="raydium_camera_rumble"></a>26.11 void raydium_camera_rumble(GLfloat amplitude, GLfloat ampl_evo, GLfloat secs):</h3>
Camera (any type) will rumble for <tt>secs</tt> seconds, with <tt>amplitude</tt> (radians).<br />
This <tt>amplitude</tt> will be incremented of <tt>ampl_evo</tt> every second (negative<br />
values are allowed for <tt>ampl_evo</tt>).<br />
An <tt>amplitude</tt> is always positive.<br />
<br />
<h3><a name="raydium_camera_smooth"></a>26.12 void raydium_camera_smooth (GLfloat px, GLfloat py, GLfloat pz, GLfloat lx, GLfloat ly, GLfloat lz, GLfloat zoom, GLfloat roll, GLfloat step):</h3>
Smooth style clone of <tt>raydium_camera_look_at</tt>.<br />
Roll is given by <tt>roll</tt> and not global variable <tt>raydium_camera_look_at_roll</tt><br />
as for regular look_at function.<br />
<tt>zoom</tt> is the requested FOV.<br />
Play with step to modify smoothing level of the movement. A good way to use<br />
this function is the following usage :<br />
<div class="code"><pre>raydium_camera_smooth<span style="color: #66cc66;">&#40;</span>cam<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#93;</span>,cam<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#93;</span>,cam<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span>,pos<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#93;</span>,-pos<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span>,pos<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#93;</span>,<span style="color: #cc66cc;">70</span>,<span style="color: #cc66cc;">0</span>,raydium_frame_time*<span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
<h3><a name="raydium_camera_path_init"></a>26.13 void raydium_camera_path_init (int p):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_camera_path_init_all"></a>26.14 void raydium_camera_path_init_all (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_camera_path_find"></a>26.15 int raydium_camera_path_find (char *name):</h3>
Lookups path's id using filename <tt>name</tt>.<br />
This function will not try to load a camera path if it's not found, and<br />
will return -1.<br />
<br />
<h3><a name="raydium_camera_path_load"></a>26.16 int raydium_camera_path_load (char *filename):</h3>
Obvious : use this function to load a camera path.<br />
<br />
<h3><a name="raydium_camera_path_draw"></a>26.17 void raydium_camera_path_draw (int p):</h3>
Draws <tt>p</tt> camera path, as red lines. This must be done at each frame.<br />
<br />
<h3><a name="raydium_camera_path_draw_name"></a>26.18 void raydium_camera_path_draw_name (char *path):</h3>
Same as above, but using camera path's name.<br />
<br />
<h3><a name="raydium_camera_smooth_path"></a>26.19 signed char raydium_camera_smooth_path (char *path, GLfloat step, GLfloat * x, GLfloat * y, GLfloat * z, GLfloat * zoom, GLfloat * roll):</h3>
Returns the (<tt>x,y,z</tt>) point of the camera path for step <tt>step</tt>, using<br />
provided <tt>zoom</tt> (FOV) and <tt>roll</tt> angle.<br />
It's important to note that <tt>step</tt> is a float.<br />
Mostly for internal use.<br />
<br />
<h3><a name="raydium_camera_path_reset"></a>26.20 void raydium_camera_path_reset(void):</h3>
Next smooth call will be instantaneous.<br />
<br />
<h3><a name="raydium_camera_smooth_path_to_pos"></a>26.21 void raydium_camera_smooth_path_to_pos (char *path, GLfloat lx, GLfloat ly, GLfloat lz, GLfloat path_step, GLfloat smooth_step):</h3>
"Camera on path looking at a point".<br />
Simple <tt>raydium_camera_smooth</tt> version: give a path name, a "look_at"<br />
point (<tt>lx,ly,lz</tt>), a current <tt>step</tt>, anda <tt>smooth_step</tt> time<br />
factor (see <tt>raydium_camera_smooth</tt> example above).<br />
<br />
<h3><a name="raydium_camera_smooth_pos_to_path"></a>26.22 void raydium_camera_smooth_pos_to_path (GLfloat lx, GLfloat ly, GLfloat lz, char *path, GLfloat path_step, GLfloat smooth_step):</h3>
"Camera on point looking at a path".<br />
Same style as previous function.<br />
<br />
<h3><a name="raydium_camera_smooth_path_to_path"></a>26.23 void raydium_camera_smooth_path_to_path (char *path_from, GLfloat path_step_from, char *path_to, GLfloat path_step_to, GLfloat smooth_step):</h3>
"Camera on a path looking at another path".<br />
Same style as previous functions.<br />
<br />
<h3><a name="raydium_viewport_init"></a>26.24 void raydium_viewport_init(void):</h3>
Init of raydium_viewport array to support up to<br />
<tt>RAYDIUM_VIEWPORT_MAX</tt> viewport<br />
<br />
<h3><a name="raydium_viewport_create"></a>26.25 void raydium_viewport_create (char * name,int tx,int ty):</h3>
Create a texture for saving viewport display<br />
Texture size <tt>tx</tt> and <tt>ty</tt> must be related with final displayed<br />
viewport size.<br />
<br />
<h3><a name="raydium_viewport_enable"></a>26.26 void raydium_viewport_enable(char * name):</h3>
Direct all render operations to dedicated viewport.<br />
Advanced camera feature as sound/rumble are desactivated during viewport render.<br />
<br />
<h3><a name="raydium_viewport_save"></a>26.27 void raydium_viewport_save(void):</h3>
Copy viewport rendering to texture buffer.<br />
Render operations return to normal state, with normal camera behavior.<br />
<br />
<h3><a name="raydium_viewport_draw"></a>26.28 void raydium_viewport_draw(char * name, GLfloat tx,GLfloat ty,GLfloat sx,GLfloat sy):</h3>
Draw contents of <tt>name</tt> viewport to screen<br />
<tt>tx</tt>,<tt>ty</tt> are lower left corner in screen percents.<br />
<tt>sx</tt>,<tt>sy</tt> are size in screen percents.<br />
You can create mirrors by using a negative <tt>sx</tt> (and update <tt>tx</tt>).<br />
Example:<br />
<div class="code"><pre><span style="color: #808080; font-style: italic;">// this is the mirror:</span>
raydium_viewport_draw<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"camera2"</span>,<span style="color: #cc66cc;">80</span>,<span style="color: #cc66cc;">70</span>,-<span style="color: #cc66cc;">60</span>,<span style="color: #cc66cc;">30</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
<span style="color: #808080; font-style: italic;">// ... of this:</span>
raydium_viewport_draw<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"camera2"</span>,<span style="color: #cc66cc;">20</span>,<span style="color: #cc66cc;">70</span>,<span style="color: #cc66cc;">60</span>,<span style="color: #cc66cc;">30</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
<h3><a name="raydium_camera_freemove"></a>26.29 void raydium_camera_freemove(int move):</h3>
This function is a fast & easy way to create a working camera that can move<br />
with keys and can be rotated with the mouse, like a usual camera in a<br />
First Person Shooter(FPS) game.<br />
Its sources could be also interesting as an example of implementation of this<br />
kind of camera, since this function can be a bit limited if you want to do<br />
complex things.<br />
You can modify the global variables <tt>raydium_camera_freemove_sensibility</tt><br />
and <tt>raydium_camera_freemove_speed</tt>, mouse sensibility (3 default) and<br />
movement speed (0.1 default) respectively.<br />
If <tt>move</tt> is <tt>RAYDIUM_CAMERA_FREEMOVE_FIXED</tt>, camera is only placed and fixed.<br />
Else if <tt>move</tt> is <tt>RAYDIUM_CAMERA_FREEMOVE_NORMAL</tt> camera position and orientation are updated with Mouse/Keyboard.<br />
<br />
<h3><a name="raydium_camera_orbitmove"></a>26.30 void raydium_camera_orbitmove(float x_to, float y_to, float z_to):</h3>
EXPERIMENTAL: This functions allows to rotate (in fact orbit) around a<br />
certain point (x_to,y_to,z_to). The distance of the point to the camera<br />
can be changed with the up/down keys and with the mouse wheel.<br />
<br />
<br />
<a name="object.h"></a><br />
<h2>27 Objects:</h2>
<h3><a name="raydium_camera_orbitmove"></a>27.1 Introduction:</h3>
With the following functions, you can easily draw and manage<br />
mesh objects (.tri file).<br />
<br />
<h3><a name="raydium_object_find"></a>27.2 GLint raydium_object_find (char *name):</h3>
Lookups an object by its <tt>name</tt>. This function will return -1 if the<br />
object's not found, and will not try to load the .tri file.<br />
<br />
<h3><a name="raydium_object_isvalid"></a>27.3 signed char raydium_object_isvalid(int obj):</h3>
Internal use, but you can call this function if you want to verify if an<br />
object id is valid (in bounds).<br />
<br />
<h3><a name="raydium_object_find_load"></a>27.4 GLint raydium_object_find_load (char *name):</h3>
Same as above (<tt>raydium_object_load</tt>), but will try to load object.<br />
<br />
<h3><a name="raydium_object_reset"></a>27.5 void raydium_object_reset (GLuint o):</h3>
Internal use. Do not call.<br />
<br />
<h3><a name="raydium_object_load"></a>27.6 int raydium_object_load (char *filename):</h3>
Load <tt>filename</tt> as a .tri file, and returns corresponding id, or<br />
-1 in case of error.<br />
<br />
<h3><a name="raydium_object_draw"></a>27.7 void raydium_object_draw (GLuint o):</h3>
Draws <tt>o</tt> (index) object, using current matrixes.<br />
<br />
<h3><a name="raydium_object_draw_name"></a>27.8 void raydium_object_draw_name (char *name):</h3>
Same as above, but you only have to provide object's <tt>name</tt> (".tri file").<br />
If this object was not already loaded, this function will do it for you.<br />
<br />
<h3><a name="raydium_object_translate"></a>27.9 void raydium_object_translate(GLuint obj,GLfloat tx,GLfloat ty,GLfloat tz):</h3>
Modify object center<br />
<br />
<h3><a name="raydium_object_deform"></a>27.10 void raydium_object_deform (GLuint obj, GLfloat ampl):</h3>
Early devel state. Useless as is.<br />
<br />
<h3><a name="raydium_object_deform_name"></a>27.11 void raydium_object_deform_name (char *name, GLfloat ampl):</h3>
Early devel state. Useless as is.<br />
<br />
<h3><a name="raydium_object_find_dist_max"></a>27.12 GLfloat raydium_object_find_dist_max (GLuint obj):</h3>
This function will return will return the distance form (0,0,0)<br />
to the farest point of <tt>obj</tt> object.<br />
<br />
<h3><a name="raydium_object_find_axes_max"></a>27.13 void raydium_object_find_axes_max (GLuint obj, GLfloat * tx, GLfloat * ty, GLfloat * tz):</h3>
This function returns the (maximum) size of the bounding box<br />
of <tt>obj</tt> (relative to (0,0,0)).<br />
<br />
<h3><a name="raydium_object_find_minmax"></a>27.14 void raydium_object_find_minmax(GLuint obj, GLfloat *min, GLfloat *max):</h3>
Returns min and max values for <tt>obj</tt>. No memory allocation is done, you must<br />
provide two GLfloat[3] array.<br />
<br />
<h3><a name="raydium_object_find_center_factors"></a>27.15 void raydium_object_find_center_factors(GLuint obj, GLfloat *tx, GLfloat *ty, GLfloat *tz):</h3>
Returns "centering" factors for <tt>obj</tt>. A centered object will return (0,0,0).<br />
<br />
<h3><a name="raydium_object_tangent_smooth"></a>27.16 signed char raydium_object_tangent_smooth(GLuint obj):</h3>
This function is a small helper for <tt>raydium_normal_tangent_smooth_from_to()</tt>,<br />
which will smooth all tangent informations for the object, since some shaders<br />
needs it (Normal Mapping for example).<br />
<br />
See suitable chapters for more information.<br />
<br />
<h3><a name="raydium_object_tangent_smooth_name"></a>27.17 signed char raydium_object_tangent_smooth_name(char *obj):</h3>
Same as above, using object's name.<br />
<br />
<h3><a name="raydium_object_callback"></a>27.18 void raydium_object_callback(void):</h3>
Internal (frame callback).<br />
<br />
<h3><a name="raydium_object_callback"></a>27.19 Animations:</h3>
Raydium now supports mesh animation, thru MD2 (Quake 2) files. Raydium file<br />
format was extended to version 2. If you want to create an animated mesh<br />
for Raydium from a MD2 file, you may use Blender with "import-md2-0.14.py"<br />
script ( by Bob Holcomb, <a href="http://67.22.114.230:8082/programming/blender/index.html">http://67.22.114.230:8082/programming/blender/index.html</a> )<br />
and export it back to a tri file using provided "triEXP-MD2-*.py" script.<br />
All other tasks (loading, transformations, ...) are done the same way as<br />
regular static mesh.<br />
<br />
For Raydium, an animation is a set of "anims", and each "anim" is a set<br />
of "frames". Each "anim" gets its own name (see header of a version 2 file<br />
for more informations), and since an animated object may be use for many<br />
players, Raydium provides an "instances" based system: setting things like<br />
anim and frame for an object is done only for one instance of this object.<br />
Instances are always available, no need to create or declare them.<br />
That's all you need to use animation simple API.<br />
<br />
<h3><a name="raydium_object_anim_find"></a>27.20 GLint raydium_object_anim_find(int object, char *name):</h3>
Lookups an animation by its <tt>name</tt>. This function will return -1 if the<br />
animation's not found. Mostly for internal use.<br />
<br />
<h3><a name="raydium_object_anim_generate_internal"></a>27.21 void raydium_object_anim_generate_internal(int object, int instance):</h3>
Internal. Transformed mesh generation.<br />
<br />
<h3><a name="raydium_object_anim_frame"></a>27.22 void raydium_object_anim_frame(int object, int instance, GLfloat frame):</h3>
Sets current <tt>frame</tt> for one <tt>instance</tt> of <tt>object</tt>. <tt>frame</tt> is<br />
automatically bounded and looped.<br />
Warning, change anim <b>before</b> anim's frame.<br />
<br />
<h3><a name="raydium_object_anim_frame_name"></a>27.23 void raydium_object_anim_frame_name(char *object, int instance, GLfloat frame):</h3>
Same as above, but using <tt>object</tt>'s name.<br />
<br />
<h3><a name="raydium_object_anim"></a>27.24 void raydium_object_anim(int object, int instance, int anim):</h3>
Sets current <tt>anim</tt> for one <tt>instance</tt> of <tt>object</tt>.<br />
Again, change anim <b>before</b> anim's frame.<br />
<br />
<h3><a name="raydium_object_anim_name"></a>27.25 void raydium_object_anim_name(char *object, int instance, char *anim):</h3>
Same as above, but using <tt>object</tt>'s name and <tt>anim</tt>'s name.<br />
<br />
<h3><a name="raydium_object_anim_instance"></a>27.26 void raydium_object_anim_instance(int object, int instance):</h3>
With this function, you must set what instance will be drawn when<br />
<tt>raydium_object_draw()</tt> will be called with <tt>object</tt> argument.<br />
<br />
Default is set to instance 0.<br />
<br />
<h3><a name="raydium_object_anim_instance_name"></a>27.27 void raydium_object_anim_instance_name(char *object, int instance):</h3>
Same as above, but using <tt>object</tt>'s name.<br />
<br />
<h3><a name="raydium_object_anim_automatic"></a>27.28 void raydium_object_anim_automatic(int object, int anim, GLfloat factor):</h3>
With this function, you can set an automatic frame increment for a specific<br />
<tt>anim</tt> of an <tt>object</tt>. This increment is based on frame time and <tt>factor</tt>.<br />
<br />
<h3><a name="raydium_object_anim_automatic_name"></a>27.29 void raydium_object_anim_automatic_name(char *object, char *anim, GLfloat factor):</h3>
Same as above, but using <tt>object</tt>'s name and <tt>anim</tt>'s name.<br />
<br />
<h3><a name="raydium_object_anim_automatic_name"></a>27.30 "Punctually" anims:</h3>
When using animations, you're switching for an "anim" to another, and an<br />
"anim" will loop forever. "Punctually" support will allow you to set a<br />
default "anim" for an object and to do switch punctually to another "anim",<br />
and automatically return back to default value when this "anim" is finished,<br />
usefull for animations like jumps, kick, ...<br />
<br />
<h3><a name="raydium_object_anim_default"></a>27.31 void raydium_object_anim_default(int object, int anim):</h3>
This function will set default <tt>anim</tt> for <tt>object</tt>.<br />
<br />
<h3><a name="raydium_object_anim_punctually"></a>27.32 void raydium_object_anim_punctually(int object, int anim, int instance):</h3>
This function will trigger a punctually <tt>anim</tt> for <tt>object</tt>'s <tt>instance</tt>.<br />
<br />
<h3><a name="raydium_object_anim_punctually_name"></a>27.33 void raydium_object_anim_punctually_name(char *object, char *anim, int instance):</h3>
Same as above, but with object's name.<br />
<br />
<h3><a name="raydium_object_anim_ispunctually"></a>27.34 signed char raydium_object_anim_ispunctually(int object, int instance):</h3>
Will return true (1) if <tt>object</tt> is currently running a punctually animation,<br />
or false (0) otherwise.<br />
<br />
<h3><a name="raydium_object_anim_ispunctually_name"></a>27.35 signed char raydium_object_anim_ispunctually_name(char *object, int instance):</h3>
Same as above, but with object's name.<br />
<br />
<a name="init.h"></a><br />
<h2>28 Initialization:</h2>
<h3><a name="raydium_object_anim_ispunctually_name"></a>28.1 Introduction:</h3>
This file is mainly designed for internal uses, but there's anyway<br />
some interesting functions.<br />
<br />
<h3><a name="raydium_version"></a>28.2 char *raydium_version(void):</h3>
Return Raydium Engine version as a static string. Format is "x.yyy".<br />
You can also find defines for this, named <tt>RAYDIUM_MAJOR</tt> (x)<br />
and <tt>RAYDIUM_MINOR</tt> (yyy).<br />
<br />
<h3><a name="raydium_init_lights"></a>28.3 void raydium_init_lights (void):</h3>
Internal use. Must be moved to light.c.<br />
<br />
<h3><a name="raydium_init_objects"></a>28.4 void raydium_init_objects (void):</h3>
Internal use. Must be moved to object.c.<br />
<br />
<h3><a name="raydium_init_key"></a>28.5 void raydium_init_key (void):</h3>
Internal use. Must be moved to key.c.<br />
<br />
<h3><a name="raydium_init_reset"></a>28.6 void raydium_init_reset (void):</h3>
This function is supposed to reset the whole Raydium engine:<br />
textures, vertices, lights, objects, ...<br />
Never tested yet, and probaly fails for many reasons when called more than<br />
one time.<br />
<br />
<h3><a name="raydium_init_engine"></a>28.7 void raydium_init_engine (void):</h3>
Internal use. <b>Never</b> call this function by yourself, it may cause<br />
huge memory leaks.<br />
<br />
<h3><a name="raydium_init_load"></a>28.8 int raydium_init_load(char *filename):</h3>
This function is used to load a configuration file, <tt>filename</tt>, and then it<br />
will do automatically all initialization of the application (window size,<br />
title, lights, skybox, ...)<br />
<br />
The <tt>filename</tt> config file must follow the "variable=value;" pattern, one<br />
variable per line. It allows comments (with double slash). See chapter about<br />
text file parsing for more information about syntax.<br />
<br />
If the file does not exists (local or R3S servers), Raydium will create a<br />
default one.<br />
<br />
A list of all settings will follow here, soon.<br />
<br />
It returns 1 if the load process ends correctly, or 0 is something was wrong.<br />
<br />
<a name="cli.h"></a><br />
<h2>29 Command Line Interface:</h2>
<h3><a name="raydium_init_load"></a>29.1 Introduction:</h3>
Here, you'll find a few functions to deal with command line<br />
interface of Raydium.<br />
<br />
You can use --help command line switch to see a list of all supported switches<br />
for the engine. This help command will not show application specific switches that<br />
you may add.<br />
<br />
You can also create a 'raydium.cli' file in binary's directory and fill it<br />
with command line arguments. (may be useful when you don't have access to<br />
command line)<br />
<br />
<h3><a name="raydium_init_cli_option"></a>29.2 int raydium_init_cli_option(char *option, char *value):</h3>
This function will search command line <tt>option</tt>.<br />
If this option is found, the functions stores any argument to <tt>value</tt> and<br />
returns 1.<br />
The function will return 0 if <tt>option</tt> is not found.<br />
<br />
Example (search for: <tt>--ground</tt>)<br />
<div class="code"><pre><span style="color: #993333;">char</span> model<span style="color: #66cc66;">&#91;</span>RAYDIUM_MAX_NAME_LEN<span style="color: #66cc66;">&#93;</span>;
<span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>raydium_init_cli_option<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"ground"</span>,model<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
setground<span style="color: #66cc66;">&#40;</span>model<span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
<h3><a name="raydium_init_cli_option_default"></a>29.3 int raydium_init_cli_option_default(char *option, char *value, char *default_value):</h3>
Same as above, but allows you to provide a default value (<tt>default</tt>) if<br />
the <tt>option</tt> is not found on command line.<br />
<br />
<h3><a name="raydium_init_internal_homedir_find"></a>29.4 void raydium_init_internal_homedir_find(char *):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_init_args"></a>29.5 void raydium_init_args(int argc, char * *argv):</h3>
You must use this function, wich send application arguments to Raydium<br />
and external libs (GLUT, <a href="http://wiki.raydium.org/wiki/OpenAL">OpenAL</a>, ...).<br />
This must be done <b>before</b> any other call to Raydium.<br />
Example:<br />
<div class="code"><pre><span style="color: #993333;">int</span> main<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">int</span> argc, <span style="color: #993333;">char</span> **argv<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
raydium_init_args<span style="color: #66cc66;">&#40;</span>argc,argv<span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#91;</span>...<span style="color: #66cc66;">&#93;</span></pre>
</div><br />
<br />
<h3><a name="raydium_init_args_name"></a>29.6 void raydium_init_args_name(int argc, char * *argv, char *app_name):</h3>
Same as above, but with application short name. This string is used to<br />
build things like runtime configuration directory name (~/.raydium/ by default).<br />
Use this wrapper if you don't want to share your configuration with Raydium.<br />
<br />
<a name="signal.h"></a><br />
<h2>30 Signals:</h2>
<h3><a name="raydium_init_args_name"></a>30.1 Quickview:</h3>
There almost nothing to say about signals management, except that Raydium<br />
will try to catch SIGINT signal (sended by CTRL+C sequence, for example).<br />
There's nothing else for now, but we plan a user callback for this signal.<br />
<br />
<a name="sound.h"></a><br />
<h2>31 Sound and music:</h2>
<h3><a name="raydium_init_args_name"></a>31.1 Introduction:</h3>
The Raydium sound API is pretty easy to use and there's only need to use a<br />
few functions to make your program ouput sounds or music.<br />
<br />
On top of this, there are a bunch of functions to modify the sound behavior.<br />
<br />
Raydium uses <a href="http://wiki.raydium.org/wiki/OpenAL">OpenAL</a> and <span class="missingpage">OggVorbis</span><a href="http://wiki.raydium.org/wiki/OggVorbis/edit">?</a> for its sounds and musics, for a basic<br />
use of our sound API you only need to know one thing: <a href="http://wiki.raydium.org/wiki/OpenAL">OpenAL</a> uses buffers<br />
for its sounds and you need to be able to address the sounds separately.<br />
For this we use ALuint in our code. Each buffer is associated to a source,<br />
we have an array of all available sources and then, you only need to have<br />
a simple int that acts as an index in this array. See below for more<br />
informations.<br />
<br />
Music is readed thru libogg, streamed from disk. If you want to play an<br />
OGG audio track, the only thing you've to do is to call the suitable function.<br />
You can use <tt>raydium_sound_music_eof_callback</tt> if needed. This event is<br />
fired when sound track ends, allowing you to switch to another file.<br />
Prototype for this callback is <tt>int callback(char *new_track)</tt>, allowing<br />
you to do something like <tt>strcpy(new_track,"foobar.ogg"); return 1;</tt>.<br />
Return 0 if you do not want to switch to another audio file (this will stops<br />
music playback).<br />
Another callback is available, <tt>raydium_sound_music_changed_callback</tt>, fired<br />
just after a music track switch, allowing you to get new informations from the<br />
new stream, such as artist, album and title. See <tt>raydium_sound_load_music()</tt><br />
for more informations about this.<br />
<br />
This document is not an alternative to <a href="http://wiki.raydium.org/wiki/OpenAL">OpenAL</a> papers, and only provides<br />
informations about Raydium's interface to <a href="http://wiki.raydium.org/wiki/OpenAL">OpenAL</a>.<br />
See specifications here: <a href="http://www.openal.org/documentation.html">http://www.openal.org/documentation.html</a><br />
<br />
<h3><a name="raydium_sound_verify"></a>31.2 void raydium_sound_verify (char *caller):</h3>
This functions checks if any error occured during last <a href="http://wiki.raydium.org/wiki/OpenAL">OpenAL</a> operation.<br />
You don't have to call this function by yourself, since every function of<br />
this API will do it.<br />
<br />
<h3><a name="raydium_sound_Array3IsValid"></a>31.3 int raydium_sound_Array3IsValid(ALfloat *a):</h3>
Since <a href="http://wiki.raydium.org/wiki/OpenAL">OpenAL</a> is very sensitive to malformed values, this function is used<br />
internally to check consistency of provided ALfloat arrays.<br />
<br />
<h3><a name="raydium_sound_InitSource"></a>31.4 void raydium_sound_InitSource (int src):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_sound_LoadWav"></a>31.5 int raydium_sound_LoadWav (const char *fname):</h3>
This function tries to load the <tt>fname</tt> wav file into a buffer, if<br />
successful, it returns the source id, else 0.<br />
<br />
<h3><a name="raydium_sound_SourceVerify"></a>31.6 int raydium_sound_SourceVerify (int src):</h3>
Internal id checks.<br />
<br />
<h3><a name="raydium_sound_SetSourceLoop"></a>31.7 int raydium_sound_SetSourceLoop (int src, signed char loop):</h3>
Modifies the <tt>loop</tt> property of the <tt>src</tt> source (loops if loop is non-zero,<br />
default value for a source is "true").<br />
Returns 0 if ok, -1 if error.<br />
<br />
<h3><a name="raydium_sound_GetSourcePitch"></a>31.8 int raydium_sound_GetSourcePitch (int src, ALfloat * p):</h3>
Returns current pitch for <tt>src</tt> source.<br />
<br />
<h3><a name="raydium_sound_SetSourcePitch"></a>31.9 int raydium_sound_SetSourcePitch (int src, ALfloat p):</h3>
Sets pitch for <tt>src</tt> source.<br />
Current <a href="http://wiki.raydium.org/wiki/OpenAL">OpenAL</a> spec is not clear about pitch's limits. Raydium will<br />
clamp values to to ]0,2] interval.<br />
<br />
<h3><a name="raydium_sound_GetSourceGain"></a>31.10 int raydium_sound_GetSourceGain (int src, ALfloat * g):</h3>
Returns current gain ("volume") for <tt>src</tt> source.<br />
<br />
<h3><a name="raydium_sound_SetSourceGain"></a>31.11 int raydium_sound_SetSourceGain (int src, ALfloat g):</h3>
Sets gain ("volume") for <tt>src</tt> source.<br />
Current <a href="http://wiki.raydium.org/wiki/OpenAL">OpenAL</a> spec is not clear about pitch's limits. Raydium do not allows<br />
negative values, but no upper limit is set.<br />
Warning: some <a href="http://wiki.raydium.org/wiki/OpenAL">OpenAL</a> implementations will provide strange gain curves. More<br />
work is needed on this issue.<br />
<br />
<h3><a name="raydium_sound_SetSourceRefDist"></a>31.12 int raydium_sound_SetSourceRefDist(int src, ALfloat distance):</h3>
Sets reference distance for source <tt>src</tt>. The reference distance is<br />
the distance where the sound will be half-volume.<br />
<br />
<h3><a name="raydium_sound_SetSourcePos"></a>31.13 int raydium_sound_SetSourcePos (int src, ALfloat Pos[]):</h3>
Sets 3D position of <tt>src</tt> source.<br />
<tt>Pos</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_SetSourcePosCamera"></a>31.14 int raydium_sound_SetSourcePosCamera(int src):</h3>
Sets 3D position of <tt>src</tt> source on the current camera position.<br />
<br />
<h3><a name="raydium_sound_GetSourcePos"></a>31.15 int raydium_sound_GetSourcePos (int src, ALfloat * Pos[]):</h3>
Returns current 3D position of <tt>src</tt> source.<br />
<tt>Pos</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_SetSourceDir"></a>31.16 int raydium_sound_SetSourceDir (int src, ALfloat Dir[]):</h3>
Sets 3D direction of <tt>src</tt> source.<br />
<tt>Dir</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_GetSourceDir"></a>31.17 int raydium_sound_GetSourceDir (int src, ALfloat * Dir[]):</h3>
Returns current 3D direction of <tt>src</tt> source.<br />
<tt>Dir</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_SetSourceVel"></a>31.18 int raydium_sound_SetSourceVel (int src, ALfloat Vel[]):</h3>
Sets 3D velocity of <tt>src</tt> source.<br />
<tt>Vel</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_GetSourceVel"></a>31.19 int raydium_sound_GetSourceVel (int src, ALfloat * Vel[]):</h3>
Returns current 3D velocity of <tt>src</tt> source.<br />
<tt>Vel</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_SetListenerPos"></a>31.20 void raydium_sound_SetListenerPos (ALfloat Pos[]):</h3>
Sets 3D position of listener.<br />
This is done automatically by Raydium, each frame, using camera informations<br />
<tt>Pos</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_GetListenerPos"></a>31.21 void raydium_sound_GetListenerPos (ALfloat * Pos[]):</h3>
Returns current 3D position of listener.<br />
<tt>Pos</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_SetListenerOr"></a>31.22 void raydium_sound_SetListenerOr (ALfloat Or[]):</h3>
Sets 3D orientation of listener.<br />
This is done automatically by Raydium, each frame, using camera informations<br />
<tt>Or</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_GetListenerOr"></a>31.23 void raydium_sound_GetListenerOr (ALfloat * Or[]):</h3>
Returns current 3D orientation of listener.<br />
<tt>Or</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_SetListenerVel"></a>31.24 void raydium_sound_SetListenerVel (ALfloat Vel[]):</h3>
Sets 3D velocity of Listener.<br />
<tt>Vel</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_GetListenerVel"></a>31.25 void raydium_sound_GetListenerVel (ALfloat * Vel[]):</h3>
Returns current 3D velocity of Listener.<br />
<tt>Vel</tt> is a 3 * ALfloat array.<br />
<br />
<h3><a name="raydium_sound_init"></a>31.26 void raydium_sound_init (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_sound_SourcePlay"></a>31.27 int raydium_sound_SourcePlay (int src):</h3>
Plays the <tt>src</tt> source.<br />
If <tt>src</tt> was already in "play" state, the buffer is rewinded.<br />
Returns 0 if ok, -1 if error.<br />
<br />
<h3><a name="raydium_sound_SourceStop"></a>31.28 int raydium_sound_SourceStop (int src):</h3>
Stops the <tt>src</tt> source.<br />
Returns 0 if ok, -1 if error.<br />
<br />
<h3><a name="raydium_sound_SourcePause"></a>31.29 int raydium_sound_SourcePause (int src):</h3>
Will pause the <tt>src</tt> source.<br />
Returns 0 if ok, -1 if error.<br />
<br />
<h3><a name="raydium_sound_SourceUnpause"></a>31.30 int raydium_sound_SourceUnpause (int src):</h3>
<tt>src</tt> will restart playback after being paused.<br />
Returns 0 if ok, -1 if error.<br />
<br />
<h3><a name="raydium_sound_IsPlaying"></a>31.31 signed char raydium_sound_IsPlaying(int src):</h3>
Returns true (1) if <tt>src</tt> is playing, false (0) if stopped or invalid.<br />
<br />
<h3><a name="raydium_sound_close"></a>31.32 void raydium_sound_close (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_sound_load_music"></a>31.33 int raydium_sound_load_music (char *fname):</h3>
Opens fname <b>OGG</b> music file and prepairs Raydium for playing it.<br />
The music will be automatically played after a call to this function.<br />
This function will use R3S (data repositories) if needed.<br />
To switch to another audio track, simply call again this function.<br />
Send <tt>NULL</tt> or an empty string to cancel music playback.<br />
Returns 0 if ok, -1 if error<br />
<br />
See also <tt>raydium_sound_music_eof_callback</tt> at the top of this chapter.<br />
<br />
You can get OGG informations from <tt>raydium_sound_music_info</tt>, using<br />
its members:<br />
<div class="code"><pre><span style="color: #993333;">char</span> artist<span style="color: #66cc66;">&#91;</span>RAYDIUM_MAX_NAME_LEN<span style="color: #66cc66;">&#93;</span>;
<span style="color: #993333;">char</span> title <span style="color: #66cc66;">&#91;</span>RAYDIUM_MAX_NAME_LEN<span style="color: #66cc66;">&#93;</span>;
<span style="color: #993333;">char</span> album <span style="color: #66cc66;">&#91;</span>RAYDIUM_MAX_NAME_LEN<span style="color: #66cc66;">&#93;</span>;</pre>
</div><br />
<br />
<h3><a name="raydium_sound_music_info_init"></a>31.34 void raydium_sound_music_info_init(void):</h3>
Internal use. Will reset infos.<br />
<br />
<h3><a name="raydium_sound_music_info_refresh"></a>31.35 void raydium_sound_music_info_refresh(void):</h3>
Internal use. Will flush infos from disk to <tt>raydium_sound_music_info</tt>.<br />
<br />
<h3><a name="raydium_sound_music_callback"></a>31.36 void raydium_sound_music_callback (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_sound_callback"></a>31.37 void raydium_sound_callback (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_sound_source_fade"></a>31.38 void raydium_sound_source_fade(int src, ALfloat len):</h3>
This function will fade down source <tt>src</tt> over <tt>len</tt> seconds.<br />
Since gain is not linear, you may have to play a bit with <tt>len</tt> to<br />
find the correct value for you.<br />
Use source 0 for music source.<br />
<br />
<h3><a name="raydium_sound_source_fade"></a>31.39 Sound API Example:</h3>
<div class="code"><pre><span style="color: #993333;">int</span> sound;
sound=raydium_sound_LoadWav<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"explo.wav"</span><span style="color: #66cc66;">&#41;</span>;
raydium_sound_SetSourceLoop<span style="color: #66cc66;">&#40;</span>sound,<span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#91;</span>...<span style="color: #66cc66;">&#93;</span>
<span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>explosion<span style="color: #66cc66;">&#41;</span> raydium_sound_SourcePlay<span style="color: #66cc66;">&#40;</span>sound<span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
<h3><a name="raydium_sound_source_fade_to"></a>31.40 void raydium_sound_source_fade_to(int src, ALfloat len, char *to):</h3>
Same as above, but plays <tt>to</tt> file at the end of the fade.<br />
Warning: Works only for "music" source (<tt>src</tt> = 0).<br />
<br />
<a name="timecall.h"></a><br />
<h2>32 Timecalls:</h2>
<h3><a name="raydium_sound_source_fade_to"></a>32.1 Concept:</h3>
As you may already know, in a real time application (as a game), you need<br />
to control in-game time evolution.<br />
For example, you cannot increment a car position by 1 at each frame since<br />
it will generate an irregular scrolling (a frame is never rendered within<br />
the same time as the previous or the next one).<br />
<br />
Raydium supports timecalls, wich are a great solution for this problem.<br />
Usage is very simple: write a simple function, and ask Raydium to call it<br />
at the desired rate.<br />
<br />
<h3><a name="raydium_sound_source_fade_to"></a>32.2 Constraints:</h3>
There is an important risk with timecalls: infinite loops.<br />
If a callback is long, it may take more CPU time than it should, as in this<br />
very simple example:<br />
<br />
foo() is a function, taking 200 ms for his own execution. If you ask for<br />
a 6 Hz execution, Raydium will execute foo() six times on the first frame,<br />
taking 1200 ms. On the next frame, Raydium will need to execute foo() 7<br />
times (the asked 6 times, and one more for the 200 ms lost during the last<br />
frame), taking 1400 ms, so 8 times will be needed for the next frame, then 9, ...<br />
<br />
So you need to create callbacks as short as possible, since long callbacks<br />
may cause a game freeze on slower machines than yours. (1 FPS syndrom)<br />
<br />
<h3><a name="raydium_sound_source_fade_to"></a>32.3 Hardware devices and methods:</h3>
Raydium must use a very accurate system timer, and will try many methods:<br />
<tt>/dev/rtc</tt> , <tt>gettimeofday()</tt> (Linux only) and<br />
<tt><span class="missingpage">QueryPerformanceCounter</span><a href="http://wiki.raydium.org/wiki/QueryPerformanceCounter/edit">?</a></tt> for win32.<br />
<br />
<tt>gettimeofday()</tt> will use a CPU counter and is extremely accurate.<br />
It's far the best method. (0.001 ms accuracy is possible)<br />
<br />
<tt>/dev/rtc</tt> is quite good, and Raydium will try to configure RTC at<br />
<tt>RAYDIUM_TIMECALL_FREQ_PREFERED</tt> rate (8192 Hz by default), but may<br />
require a "<tt>/proc/sys/dev/rtc/max-user-freq</tt>" modification:<br />
<tt>echo 8192 &gt; /proc/sys/dev/rtc/max-user-freq</tt><br />
<br />
You may want to look at common.c for interesting defines about timecalls.<br />
<br />
<h3><a name="raydium_timecall_raydium"></a>32.4 void raydium_timecall_raydium (GLfloat step):</h3>
Internal Raydium callback.<br />
<br />
<h3><a name="raydium_timecall_internal_w32_detect_modulo"></a>32.5 float raydium_timecall_internal_w32_detect_modulo(int div):</h3>
Internal, WIN32 only: Returns timer resolution for <tt>div</tt> divisor.<br />
<br />
<h3><a name="raydium_timecall_internal_w32_divmodulo_find"></a>32.6 int raydium_timecall_internal_w32_divmodulo_find(void):</h3>
Internal, WIN32 only: Detects the best timer divisor for the current CPU.<br />
<br />
<h3><a name="raydium_timecall_devrtc_clock"></a>32.7 unsigned long raydium_timecall_devrtc_clock (void):</h3>
Internal, Linux only: Reads and return RTC clock.<br />
<br />
<h3><a name="raydium_timecall_clock"></a>32.8 unsigned long raydium_timecall_clock (void):</h3>
Returns current "time".<br />
The variable <tt>raydium_timecall_clocks_per_sec</tt> contains the number<br />
of clock "ticks" per second, and may help you here.<br />
<br />
<h3><a name="raydium_timecall_devrtc_rate_change"></a>32.9 signed char raydium_timecall_devrtc_rate_change (unsigned long new_rate):</h3>
Internal, Linux only: Modifies RTC clock rate.<br />
<br />
<h3><a name="raydium_timecall_devrtc_close"></a>32.10 void raydium_timecall_devrtc_close (void):</h3>
Internal, Linux only: Will close RTC clock.<br />
<br />
<h3><a name="raydium_timecall_devrtc_init"></a>32.11 unsigned long raydium_timecall_devrtc_init (void):</h3>
Internal, Linux only: Will open RTC clock.<br />
<br />
<h3><a name="raydium_timecall_detect_frequency"></a>32.12 int raydium_timecall_detect_frequency (void):</h3>
Internal: This function will find the best timer available for current<br />
platform, and adjust properties to your hardware (rate, divisor, ...).<br />
<br />
<h3><a name="raydium_timecall_init"></a>32.13 void raydium_timecall_init (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_timecall_add"></a>32.14 int raydium_timecall_add (void *funct, GLint hz):</h3>
There is two sort of timecalls with Raydium:<br />
<br />
1. Standard ones:<br />
<div class="code"><pre>raydium_timecall_add<span style="color: #66cc66;">&#40;</span><span style="color: #000000; font-weight: bold;">function</span>,<span style="color: #cc66cc;">800</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<tt>void function(void)</tt> will be called 800 times per second.<br />
<br />
2. Elastic timed ones:<br />
<div class="code"><pre>raydium_timecall_add<span style="color: #66cc66;">&#40;</span><span style="color: #000000; font-weight: bold;">function</span>,-<span style="color: #cc66cc;">80</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<tt>void function(float step)</tt> will be called for each frame, with a<br />
"<tt>step</tt> factor" as argument. In the above example, a 160 Hz game will call<br />
function with step = 0.5, but step = 2.0 for a 40 Hz game.<br />
<br />
A standard timecall will use <tt>void(void)</tt> function and a positive <tt>hertz</tt><br />
argument, as an elasitc one will use <tt>void(float)</tt> and negative <tt>hertz</tt> argument.<br />
<br />
<h3><a name="raydium_timecall_freq_change"></a>32.15 void raydium_timecall_freq_change (int callback, GLint hz):</h3>
This function changes the <tt>callback</tt> frequency. See above for possibles<br />
values of <tt>hz</tt> (negative and positive values).<br />
<br />
<h3><a name="raydium_timecall_callback"></a>32.16 void raydium_timecall_callback (void):</h3>
Internal use (frame fired callback).<br />
<br />
<a name="network.h"></a><br />
<h2>33 Network:</h2>
<h3><a name="raydium_timecall_callback"></a>33.1 Bases of Raydium's networking API:</h3>
Raydium supports networking via UDP/IP, providing high level functions<br />
for multiplayer game development.<br />
Raydium servers are limited to 256 clients for now.<br />
<br />
You will find in network.c a set of "low level" functions and vars dedicated to<br />
networked games: players names, event callbacks, UDP sockets,<br />
broadcasts, ...<br />
See a few chapters below for higher level functions.<br />
<br />
All this is ready to use. As it's not done in the introduction of this<br />
guide, We will explain here some variables defined in common.h.<br />
<br />
<div class="code"><pre><span style="color: #339933;">#define RAYDIUM_NETWORK_PORT          29104</span>
<span style="color: #339933;">#define RAYDIUM_NETWORK_PACKET_SIZE   230</span>
<span style="color: #339933;">#define RAYDIUM_NETWORK_TIMEOUT       5</span>
<span style="color: #339933;">#define RAYDIUM_NETWORK_PACKET_OFFSET 4</span>
<span style="color: #339933;">#define RAYDIUM_NETWORK_MAX_CLIENTS   8</span>
<span style="color: #339933;">#define RAYDIUM_NETWORK_MODE_NONE     0</span>
<span style="color: #339933;">#define RAYDIUM_NETWORK_MODE_CLIENT   1</span>
<span style="color: #339933;">#define RAYDIUM_NETWORK_MODE_SERVER   2 </span>
&nbsp;</pre>
</div><br />
<br />
Here, we can find network port declaration (Raydium will use only one<br />
port, allowing easy port forwarding management, if needed), default timeout<br />
(unit: second), and the three mode possible for a Raydium application.<br />
<br />
But there is also two other very important defines: packet size<br />
(unit: byte) and max number of clients.. This is important because<br />
Raydium uses UDP sockets, and UDP sockets required fixed<br />
length packets, and as you need to set packet size as small as possible<br />
(for obvious speed reasons), you must calculate you maximum<br />
information packet size (players position, for example), multiply<br />
it by <tt>RAYDIUM_NETWORK_MAX_CLIENTS</tt>,and add <tt>RAYDIUM_NETWORK_PACKET_OFFSET</tt><br />
wich represent the required header of the packet.<br />
<br />
It's more easy than it seems, look:<br />
<i><br />
My game will support 8 players.<br />
I will send players state with 3 floats (x,y,z).<br />
My packet size must be: 8*3*sizeof(float)+RAYDIUM_NETWORK_PACKET_OFFSET = 100 bytes.<br />
</i><br />
Please, do not change packet offset size, since Raydium will use it<br />
for packet header.<br />
<br />
<div class="code"><pre><span style="color: #339933;">#define RAYDIUM_NETWORK_DATA_OK     1</span>
<span style="color: #339933;">#define RAYDIUM_NETWORK_DATA_NONE   0</span>
<span style="color: #339933;">#define RAYDIUM_NETWORK_DATA_ERROR -1 </span>
&nbsp;</pre>
</div><br />
<br />
This three defines are used as network functions result:<br />
<br />
<div class="code"><pre><span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>raydium_network_read_flushed<span style="color: #66cc66;">&#40;</span>&amp;id,&amp;type,buff<span style="color: #66cc66;">&#41;</span>==RAYDIUM_NETWORK_DATA_OK<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
...</pre>
</div><br />
<br />
<div class="code"><pre><span style="color: #339933;">#define RAYDIUM_NETWORK_PACKET_BASE 20 </span>
&nbsp;</pre>
</div><br />
<br />
In most network functions, you will find a "type" argument, used to<br />
determine packet goal. This type is 8 bits long (256 possible values),<br />
but Raydium is already using some of them. So you can use<br />
<tt>RAYDIUM_NETWORK_PACKET_BASE</tt> as a base for your own types:<br />
<br />
<div class="code"><pre><span style="color: #339933;">#define NORMAL_DATA RAYDIUM_NETWORK_PACKET_BASE</span>
<span style="color: #339933;">#define BALL_TAKEN (NORMAL_DATA+1)</span>
<span style="color: #339933;">#define SCORE_INFO (NORMAL_DATA+2)</span>
<span style="color: #339933;">#define HORN (NORMAL_DATA+3)</span>
...</pre>
</div><br />
<br />
<h4>Variables:</h4>
<br />
Your own player id (0&lt;= id &lt; RAYDIUM_NETWORK_MAX_CLIENTS),<br />
read only: <tt>int raydium_network_uid;</tt><br />
Special value "-1" means that you're not connected (see below).<br />
<br />
Current network mode (none, client, server),<br />
read only: <tt>signed char raydium_network_mode;</tt><br />
<br />
Boolean used to determine client state (connected or not), read only:<br />
<tt>signed char raydium_network_client[RAYDIUM_NETWORK_MAX_CLIENTS];</tt><br />
<br />
example:<br />
<div class="code"><pre><span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>raydium_network_client<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">4</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#41;</span>
draw_player<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">4</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
Can be used by a server to send data to his clients. Read only:<br />
<tt>struct sockaddr raydium_network_client_addr[RAYDIUM_NETWORK_MAX_CLIENTS];</tt><br />
<br />
Players names, read only:<br />
<tt>char raydium_network_name[RAYDIUM_NETWORK_MAX_CLIENTS][RAYDIUM_MAX_NAME_LEN];</tt><br />
<br />
<tt><span class="missingpage">OnConnect</span><a href="http://wiki.raydium.org/wiki/OnConnect/edit">?</a></tt> and <tt><span class="missingpage">OnDisconnect</span><a href="http://wiki.raydium.org/wiki/OnDisconnect/edit">?</a></tt> events (server only):<br />
<tt>void * raydium_network_on_connect;<br />
void * raydium_network_on_disconnect;</tt><br />
<br />
You can place your owns callbacks (<tt>void(int)</tt>) on these events, as in<br />
this example:<br />
<br />
<div class="code"><pre><span style="color: #993333;">void</span> new_client<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">int</span> client<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
raydium_log<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"New player: %s"</span>, raydium_network_nameclient<span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span>
&nbsp;
...
&nbsp;
<span style="color: #993333;">int</span> main<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">int</span> argc, <span style="color: #993333;">char</span> **argv<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
...
<span style="color: #202020;">raydium_network_on_connect</span>=new_client;
...</pre>
</div><br />
<br />
<h3><a name="raydium_timecall_callback"></a>33.2 Reliablility versus Speed:</h3>
As explained above, Raydium is using UDP network packets, and as<br />
you may know, UDP is not a reliable protocol, aiming speed before all.<br />
This system is interesting for sending non-sensible data, as player positions,<br />
for example.<br />
But Raydium can handle more important data, using some of methods of TCP<br />
protocol, as Timeouts, ACK, resending, ...<br />
This TCP style packets are available thru "Netcalls".<br />
<br />
<h3><a name="raydium_timecall_callback"></a>33.3 High level API: "Netcalls" and "Propags":</h3>
Netcalls provides you a good way to handle network exchanges using<br />
callbacks functions, like a simple RPC system.<br />
The idea is simple, built over the notion of "type". See suitable functions for<br />
more information about this system.<br />
<br />
Another available mechanism is called Propags, and allows you to "share"<br />
variables over the network (scores, game state, ...) in a very few steps.<br />
You only need to "create" a type, and link a variable to it (any C type or<br />
structure is allowed). After each modification of this (local copy of the)<br />
variable, just call <tt>raydium_network_propag_refresh*</tt> and that's it. If<br />
any other client (or the server) is applying a modification to this "type",<br />
your local copy is automatically updated.<br />
<br />
<h3><a name="raydium_network_propag_find"></a>33.4 int raydium_network_propag_find (int type):</h3>
Lookups a "propag" by his <tt>type</tt>. Returns -1 is no propag is found.<br />
<br />
<h3><a name="raydium_network_propag_recv"></a>33.5 void raydium_network_propag_recv (int type, char *buff):</h3>
Internal callback for "propag" receiving.<br />
<br />
<h3><a name="raydium_network_propag_refresh_id"></a>33.6 void raydium_network_propag_refresh_id (int i):</h3>
Will refresh a propag by his <tt>id</tt>.<br />
<br />
<h3><a name="raydium_network_propag_refresh"></a>33.7 void raydium_network_propag_refresh (int type):</h3>
Will refresh a propag by his <tt>type</tt>.<br />
<br />
<h3><a name="raydium_network_propag_refresh_all"></a>33.8 void raydium_network_propag_refresh_all (void):</h3>
Will refresh all propags<br />
<br />
<h3><a name="raydium_network_propag_add"></a>33.9 int raydium_network_propag_add (int type, void *data, int size):</h3>
This function will "register" a new propag. You need to provide the address<br />
of your variable/structure (<tt>data</tt>), ans its <tt>size</tt>. A dedicated <tt>type</tt><br />
is also required (see at the top of this chapter).<br />
<br />
<h3><a name="raydium_network_queue_element_init"></a>33.10 void raydium_network_queue_element_init (raydium_network_Tcp * e):</h3>
Internal use. (TCP style packets)<br />
<br />
<h3><a name="raydium_network_queue_tcpid_gen"></a>33.11 unsigned short raydium_network_queue_tcpid_gen (void):</h3>
Internal use. (TCP style packets)<br />
<br />
<h3><a name="raydium_network_queue_tcpid_known_add"></a>33.12 void raydium_network_queue_tcpid_known_add (int tcpid, int player):</h3>
Internal use. (TCP style packets)<br />
<br />
<h3><a name="raydium_network_queue_tcpid_known"></a>33.13 signed char raydium_network_queue_tcpid_known (unsigned short tcpid, unsigned short player):</h3>
Internal use. (TCP style packets)<br />
<br />
<h3><a name="raydium_network_queue_is_tcpid"></a>33.14 signed char raydium_network_queue_is_tcpid (int type):</h3>
Internal use. (TCP style packets)<br />
<br />
<h3><a name="raydium_network_queue_element_add"></a>33.15 void raydium_network_queue_element_add (char *packet, struct sockaddr *to):</h3>
Internal use. (TCP style packets)<br />
<br />
<h3><a name="raydium_network_internal_find_delay_addr"></a>33.16 unsigned long *raydium_network_internal_find_delay_addr (int player):</h3>
Internal use. (TCP style packets)<br />
<br />
<h3><a name="raydium_network_queue_check_time"></a>33.17 void raydium_network_queue_check_time (void):</h3>
Internal use. (TCP style packets)<br />
<br />
<h3><a name="raydium_network_queue_ack_send"></a>33.18 void raydium_network_queue_ack_send (unsigned short tcpid, struct sockaddr *to):</h3>
Internal use. (TCP style packets)<br />
<br />
<h3><a name="raydium_network_queue_ack_recv"></a>33.19 void raydium_network_queue_ack_recv (int type, char *buff):</h3>
Internal use. (TCP style packets)<br />
<br />
<h3><a name="raydium_network_player_name"></a>33.20 void raydium_network_player_name (char *str):</h3>
This function will returns the current player name.<br />
Raydium will ask the OS for "current logged user", but player name may<br />
be provided thru <tt>--name</tt> command line argument.<br />
<br />
<h3><a name="raydium_network_set_socket_block"></a>33.21 signed char raydium_network_set_socket_block (int block):</h3>
This function will sets <tt>block</tt> (true or false) status to the network stack.<br />
A blocking socket will wait indefinitely an incoming packet. A non blocking one<br />
will return "no data" instead.<br />
You've almost no reason to call this function by yourself.<br />
<br />
<h3><a name="raydium_network_socket_close"></a>33.22 int raydium_network_socket_close(int fd):</h3>
Portable socket closing function. See "man 2 close" or closesocket (win32)<br />
docs.<br />
<br />
<h3><a name="raydium_network_socket_is_readable"></a>33.23 signed char raydium_network_socket_is_readable(int fd):</h3>
Will return true (1) if there is some data ready on <tt>fd</tt> socket,<br />
false (0) otherwise.<br />
<br />
<h3><a name="raydium_network_netcall_add"></a>33.24 signed char raydium_network_netcall_add (void *ptr, int type, signed char tcp):</h3>
This function will register a new Network Callback ("netcall").<br />
With Raydium, you can read the main data stream with<br />
<tt>raydium_network_read_flushed()</tt>, and configure netcalls on random<br />
events (using packet type).<br />
<br />
Netcalls signature is: <tt>void(int type, char *buff)</tt><br />
<br />
As you may configure the same callback function for multiples packet types,<br />
this type is passed to your function, with the temporary <tt>buff</tt> buffer.<br />
You can extract from field from packet if needed.<br />
<br />
If you sets the <tt>tcp</tt> flag to true (1), your packet will use "TCP style"<br />
network protocol (see a the top of this chapter).<br />
<br />
<h3><a name="raydium_network_netcall_exec"></a>33.25 signed char raydium_network_netcall_exec (int type, char *buff):</h3>
Internal callback for "netcall" receiving.<br />
<br />
<h3><a name="raydium_network_timeout_check"></a>33.26 signed char raydium_network_timeout_check (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_network_init_sub"></a>33.27 void raydium_network_init_sub(void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_network_init"></a>33.28 signed char raydium_network_init (void):</h3>
Nothing interesting unless you're creating a console server (using the<br />
<tt>RAYDIUM_NETWORK_ONLY</tt> directive), since in this case you must do all<br />
inits by yourself...<br />
example :<br />
<div class="code"><pre>.<span style="color: #339933;">#define RAYDIUM_NETWORK_ONLY</span>
.<span style="color: #339933;">#include &quot;raydium/index.c&quot;</span>
&nbsp;
...
&nbsp;
<span style="color: #993333;">int</span> main<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">int</span> argc, <span style="color: #993333;">char</span> **argv<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
setbuf<span style="color: #66cc66;">&#40;</span>stdout,<span style="color: #000000; font-weight: bold;">NULL</span><span style="color: #66cc66;">&#41;</span>;
signal<span style="color: #66cc66;">&#40;</span>SIGINT,quit<span style="color: #66cc66;">&#41;</span>;
raydium_php_init<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>; <span style="color: #808080; font-style: italic;">// only if you need PHP support</span>
raydium_network_init<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
raydium_network_server_create<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
...</pre>
</div><br />
<br />
<h3><a name="raydium_network_write"></a>33.29 void raydium_network_write (struct sockaddr *to, int from, signed char type, char *buff):</h3>
Obviously, this function will send data.<br />
If you're a client, you don't need to determine to field, as the only<br />
destination is the server, so you can use <tt>NULL</tt>, for example. If you're<br />
a server, you can use <tt>raydium_network_client_addr[]</tt> array.<br />
<br />
As a client, <tt>from</tt> argument is generally your own uid (<tt>raydium_network_uid</tt>),<br />
but you can use any other player number if needed.<br />
As a server, <tt>from</tt> field is useless, since you are the only machine able<br />
to send data to clients.<br />
<br />
As you may expect, <tt>type</tt> field is used to determine packet's type.<br />
You can use any (8 bits) value greater or equal to <tt>RAYDIUM_NETWORK_PACKET_BASE</tt>.<br />
<br />
Finally, <tt>buff</tt> is a pointer to data's buffer. This buffer<br />
must be <tt>RAYDIUM_NETWORK_PACKET_SIZE</tt> long, and can be cleared<br />
or re-used after this call.<br />
<br />
<h3><a name="raydium_network_broadcast"></a>33.30 void raydium_network_broadcast (signed char type, char *buff):</h3>
Sends data over network.<br />
Obviously, from network point of vue, only a server can broadcast<br />
(to his clients).<br />
<br />
When a client needs to broadcast (from the game point of vue) some<br />
informations (his own position, for example), he must send this information<br />
to server, and the server will broadcast it.<br />
<br />
This function uses the same arguments as previous one, except <tt>to</tt> and<br />
<tt>from</tt>, not needed here.<br />
<br />
<h3><a name="raydium_network_read"></a>33.31 signed char raydium_network_read (int *id, signed char *type, char *buff):</h3>
Reads next packet from network (FIFO) stack.<br />
This function uses the same arguments as previous ones, and returns<br />
data availability: <tt>RAYDIUM_NETWORK_DATA_OK</tt>, <tt>RAYDIUM_NETWORK_DATA_NONE</tt><br />
or <tt>RAYDIUM_NETWORK_DATA_ERROR</tt>.<br />
<br />
<h3><a name="raydium_network_read_flushed"></a>33.32 signed char raydium_network_read_flushed (int *id, signed char *type, char *buff):</h3>
Reads last packet from network stack.<br />
All previous packets will be ignored, only the newest packet will<br />
be read (if any).<br />
<br />
As you may miss some important informations, you can use netcalls<br />
(see above) if you want to capture packets with a particular<br />
type, even with flushed reading.<br />
<br />
<h3><a name="raydium_network_read_faked"></a>33.33 void raydium_network_read_faked(void):</h3>
Reads from network, but do not care of received data. This is useful for<br />
listen to internal packets (server "beacon" broadcasts, for example).<br />
Reading is done thru <tt>raydium_network_read_flushed</tt>.<br />
Mostly for internal use.<br />
<br />
<h3><a name="raydium_network_server_broadcast"></a>33.34 signed char raydium_network_server_broadcast(char *name, char *app_or_mod, int version):</h3>
This function will start to broadcast a server to the LAN.<br />
You must provide a party <tt>name</tt>, the application or mod name (<tt>app_or_mod</tt>)<br />
and a "protocol" version of you choice.<br />
The server is going to broadcast a "beacon" packet  to the LAN<br />
every <tt>RAYDIUM_NETWORK_BEACON_DELAY</tt>.<br />
Any client in "discovery mode" with the same <tt>app_or_mod</tt> and <tt>version</tt><br />
will see this beacon.<br />
<br />
<h3><a name="raydium_network_server_broadcast_info"></a>33.35 void raydium_network_server_broadcast_info(char *info):</h3>
Update "information" field of this server (current track or map, for example).<br />
Size cannot exceed <tt>RAYDIUM_NETWORK_BEACON_INFO_MAX_LEN</tt>.<br />
<br />
<h3><a name="raydium_network_server_broadcast_check"></a>33.36 void raydium_network_server_broadcast_check(void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_network_server_create"></a>33.37 signed char raydium_network_server_create (void):</h3>
Will transform you application into a server, accepting new clients<br />
instantaneously.<br />
See also the <tt>RAYDIUM_NETWORK_ONLY</tt> directive if you want to create console<br />
servers.<br />
<br />
<h3><a name="raydium_network_client_connect_to"></a>33.38 signed char raydium_network_client_connect_to (char *server):</h3>
This function will try to connect your application to <tt>server</tt> (hostname or<br />
ip address).<br />
WARNING: For now, this call could be endless ! (server failure while connecting).<br />
This function will succed returning 1 or 0 otherwise.<br />
You are connected instantaneously, and you must start sending data<br />
before server timeout (defined by <tt>RAYDIUM_NETWORK_TIMEOUT</tt>).<br />
You player number can be found with <tt>raydium_network_uid</tt> variable,<br />
as said before.<br />
<br />
<h3><a name="raydium_network_client_discover"></a>33.39 signed char raydium_network_client_discover(char *game,int version):</h3>
This function will set client in <tt>RAYDIUM_NETWORK_MODE_DISCOVER</tt> mode.<br />
While using this mode, a client will search every LAN server with the<br />
same <tt>game</tt> (or mod name) and <tt>version</tt> as itself.<br />
Then, you can access to this server list using following functions.<br />
<br />
<h3><a name="raydium_network_discover_numservers"></a>33.40 int raydium_network_discover_numservers(void):</h3>
While the client is in <tt>RAYDIUM_NETWORK_MODE_DISCOVER</tt> mode, you<br />
can fetch all "detected" servers in the LAN.<br />
This function will return :<br />
- -1 : "not in discovery mode". See <tt>raydium_network_client_discover()</tt>.<br />
- 0 : no server detected (yet ... try during next frame)<br />
- more : total number of compatible servers (same game/application<br />
and protocol version)<br />
<br />
<h3><a name="raydium_network_discover_getserver"></a>33.41 signed char raydium_network_discover_getserver(int num, char *name, char *ip, char *info, int *player_count, int *player_max):</h3>
Use this function with the help of <tt>raydium_network_discover_numservers()</tt>,<br />
with something like :<br />
<div class="code"><pre><span style="color: #993333;">int</span> i;
<span style="color: #993333;">char</span> name<span style="color: #66cc66;">&#91;</span>RAYDIUM_MAX_NAME_LEN<span style="color: #66cc66;">&#93;</span>;
<span style="color: #993333;">char</span> ip<span style="color: #66cc66;">&#91;</span>RAYDIUM_MAX_NAME_LEN<span style="color: #66cc66;">&#93;</span>;
<span style="color: #993333;">char</span> info<span style="color: #66cc66;">&#91;</span>RAYDIUM_MAX_NAME_LEN<span style="color: #66cc66;">&#93;</span>;
<span style="color: #993333;">int</span> player_count;
<span style="color: #993333;">int</span> player_max;
...
<span style="color: #b1b100;">for</span><span style="color: #66cc66;">&#40;</span>i=<span style="color: #cc66cc;">0</span>;i&lt;raydium_network_discover_numservers<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;i++<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
raydium_network_discover_getserver<span style="color: #66cc66;">&#40;</span>i,name,ip,info,&amp;player_count,&amp;player_max<span style="color: #66cc66;">&#41;</span>;
raydium_log<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"server %02i: %s (%s)"</span>,i,name,ip<span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
No memory allocation is done for <tt>name</tt> and <tt>ip</tt>. It's your job.<br />
<br />
This function will return :<br />
- -1 : "not in discovery mode". See <tt>raydium_network_client_discover()</tt>.<br />
- 0 : invalid <tt>num</tt>.<br />
- 1 : OK.<br />
<br />
<h3><a name="raydium_network_client_disconnect"></a>33.42 void raydium_network_client_disconnect(void):</h3>
This function will disconnect client from server, if connected.<br />
<br />
<h3><a name="raydium_server_accept_new"></a>33.43 signed char raydium_server_accept_new (struct sockaddr *from, char *name):</h3>
Internal server callback for new clients.<br />
<br />
<h3><a name="raydium_network_close"></a>33.44 void raydium_network_close (void):</h3>
Obvious. Raydium will do it for you, anyway.<br />
<br />
<h3><a name="raydium_network_internal_server_delays_dump"></a>33.45 void raydium_network_internal_server_delays_dump (void):</h3>
Dumps "TCP Style" timeouts for all clients to console.<br />
<br />
<h3><a name="raydium_network_internal_dump"></a>33.46 void raydium_network_internal_dump (void):</h3>
Dumps various stats about network stack to console.<br />
<br />
<h3><a name="raydium_network_internet_test"></a>33.47 signed char raydium_network_internet_test(void):</h3>
This function will test if direct internet connection is available,<br />
using Raydium webiste. This function supports proxies.<br />
<br />
<h3><a name="raydium_network_linux_find_broadcast_interfaces"></a>33.48 signed char raydium_network_linux_find_broadcast_interfaces(void):</h3>
Internal use. Linux only.<br />
<br />
<a name="sprites.h"></a><br />
<h2>34 Sprites (viewer axis aligned 2D billboards):</h2>
<h3><a name="raydium_network_linux_find_broadcast_interfaces"></a>34.1 Introduction:</h3>
Raydium provides its own sprite system.<br />
Each sprite needs a .sprite file. This file is as this:<br />
<div class="code">
<pre>
collision={0.8,0.7,0.8};
size=1;

coords={0.0,0.25,0.0,0.25};
group=1;
texture=&quot;sprite1-test.tga&quot;;

coords={0,0.25,0.5,0.75};
group=2;
texture=&quot;sprite1-test.tga&quot;;

...
</pre>
</div><br />
The <tt>collision</tt> variable defines the size of a <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> box element.<br />
<br />
<tt>size</tt> is the size of the displayed sprite. It won't affect the ODE object,<br />
just the graphical stuff.<br />
<br />
Then you'll have to define each frame of the sprite. Each frame must be<br />
defined by <tt>coords</tt> (interval 0 to 1) in a <tt>texture</tt> file.<br />
<br />
It's important to have in mind that the sprite can have "groups".<br />
Those groups are used to team up some related sprites. For example we can<br />
have 3 sprites of a forward movement, those could be in one specific group.<br />
In that way you can change from one group to another with a Raydium function easily.<br />
<br />
Even more, the frames of a sprite group will be animated automatically<br />
and when the animation comes to the end of the group then you can chose<br />
what will be the next action:<br />
1) You can stop animation, you can restart the group animation or you can<br />
jump to a new group.<br />
2) you can indicate a "jump" to another group with something like:<br />
<div class="code">
<pre>
group={7,11}; That would jump to the group 11
group={5,-1}; -1 means STOP THE ANIMATION
group={3,-2}; -2 means LOOP IN THE SAME GROUP
</pre>
</div><br />
<br />
Raydium provides a sprite viewer (sprite_viewer.c) that will download<br />
a sample sprite file, very useful to understand how sprite file are built.<br />
<br />
<h3><a name="raydium_sprite_check_available"></a>34.2 int raydium_sprite_check_available(void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_sprite_billboard"></a>34.3 void raydium_sprite_billboard(float x, float y, float z,float ux, float uy, float uz, float rx, float ry, float rz, int textureid, float s0, float s1, float t0, float t1,float size):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_sprite_billboard"></a>34.4 unknown item:</h3>
This function allows you to load an sprite. It will returns the id(int)<br />
of the new sprite.<br />
<br />
<h3><a name="raydium_sprite_get_name_from_object"></a>34.5 char *raydium_sprite_get_name_from_object(int obj):</h3>
You can get the name of an sprite with this function.<br />
<br />
<h3><a name="raydium_sprite_object_get"></a>34.6 int raydium_sprite_object_get(int spriteid):</h3>
Function to get the ODE object linked to the sprite.<br />
<br />
<h3><a name="unsupportedvoidsprite_render_frame"></a>34.7 void sprite_render_frame(float x, float y, float z, int spriteid,int frame,float scalex,float scaley):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_sprite_move"></a>34.8 void raydium_sprite_move(int sprite,float x, float y, float z):</h3>
With this function you can move (in univsrese coordinates) an sprite<br />
giving the 3 coordinates.<br />
<br />
<h3><a name="raydium_sprite_move_relative"></a>34.9 void raydium_sprite_move_relative(int sprite, float deltax, float deltay, float deltaz):</h3>
Same than previous but it uses relative coordinates. Usefull for ingame<br />
displacements.<br />
<br />
<h3><a name="raydium_sprite_display"></a>34.10 void raydium_sprite_display(int id):</h3>
This function will display the given sprite. Usually should be called in<br />
the display callback.<br />
<br />
<h3><a name="raydium_sprite_group_change"></a>34.11 void raydium_sprite_group_change(int sprite,int group):</h3>
Function to change the animation group of a certain sprite.<br />
<br />
<h3><a name="raydium_sprite_free"></a>34.12 void raydium_sprite_free(int sprite):</h3>
Deletes an sprite.<br />
<br />
<h3><a name="raydium_sprite_free_name"></a>34.13 void raydium_sprite_free_name(char *name):</h3>
Function to delete all the sprites using a certain filename.<br />
<br />
<h3><a name="raydium_sprite_get_pos"></a>34.14 float *raydium_sprite_get_pos(int number):</h3>
Returns a 3float array with the position (universe coordinates) of a<br />
frame<br />
<br />
<h3><a name="raydium_sprite_get_id_from_element"></a>34.15 int raydium_sprite_get_id_from_element(int element):</h3>
Returns the id of an sprite from the element id given.<br />
<br />
<h3><a name="raydium_sprite_set_type"></a>34.16 int raydium_sprite_set_type(int id,int value):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_sprite_set_name"></a>34.17 int raydium_sprite_set_name(int id,char *cadena):</h3>
With this function you can change the name of an sprite<br />
<br />
<h3><a name="raydium_sprite_find"></a>34.18 int raydium_sprite_find(char *name):</h3>
This function will return the sprite id(int) of an sprite according its<br />
name<br />
<br />
<h3><a name="raydium_sprite_is_stopped"></a>34.19 int raydium_sprite_is_stopped(int id):</h3>
This functions returns 1 if the animation of the sprite id has been<br />
stoppped and 0 if it's playing.<br />
<br />
<h3><a name="raydium_sprite_dump_info"></a>34.20 void raydium_sprite_dump_info(int id):</h3>
Dump of jumps for a certain sprite.<br />
<br />
<h3><a name="raydium_sprite_change_sprite_time"></a>34.21 float raydium_sprite_change_sprite_time(int id,float time):</h3>
Function to change the time betwen frames in the animation of an id sprite.<br />
<br />
<h3><a name="raydium_sprite_change_sprite_time_relative"></a>34.22 float raydium_sprite_change_sprite_time_relative(int id,float time):</h3>
Same than previous but you can add a quantity of time to the previous<br />
stored time, ie relative.<br />
<br />
<h3><a name="raydium_sprite_get_current_group"></a>34.23 int raydium_sprite_get_current_group(int id):</h3>
Function to get the current group of an sprite.<br />
<br />
<h3><a name="raydium_sprite_get_current_frame"></a>34.24 int raydium_sprite_get_current_frame(int id):</h3>
Function to get the current frame of an sprite.<br />
<br />
<a name="osd.h"></a><br />
<h2>35 OSD (On Screen Display):</h2>
<h3><a name="raydium_sprite_get_current_frame"></a>35.1 Introduction:</h3>
Raydium provides some high level function for "On Screen Display",<br />
as string drawing (2D and 3D), application's logo, mouse cursor, and other<br />
various 2D displaying tools.<br />
<br />
In most cases, these functions must be called after any other object<br />
drawing function, to avoid overlapping problems.<br />
<br />
Most functions will use a percentage system, and origin is at lower-left corner.<br />
<br />
<h3><a name="raydium_osd_color_change"></a>35.2 void raydium_osd_color_change (GLfloat r, GLfloat g, GLfloat b):</h3>
This function will change the font color for the next <tt>raydium_osd_printf*</tt><br />
calls.<br />
As usual: 0 &lt;= (<tt>r</tt>,<tt>g</tt> and <tt>b</tt>) &lt;= 1.<br />
<br />
<h3><a name="raydium_osd_alpha_change"></a>35.3 void raydium_osd_alpha_change (GLfloat a):</h3>
Same as above, but will change font transparency.<br />
<br />
<h3><a name="raydium_osd_color_rgba"></a>35.4 void raydium_osd_color_rgba (GLfloat r, GLfloat g, GLfloat b, GLfloat a):</h3>
This is a mix of <tt>raydium_osd_color_change</tt> and <tt>raydium_osd_alpha_change</tt>.<br />
<br />
<h3><a name="raydium_osd_color_ega"></a>35.5 void raydium_osd_color_ega (char hexa):</h3>
This function will change font color with the corresponding<br />
<tt>hexa</tt>decimal code (as a char: '0' to 'F') in the standard EGA palette.<br />
<br />
Here is this palette:<br />

<div class="table" align="center">
<table class="tableListing" summary=" " cellspacing="0" cellpadding="3" border="1">
<tr class="wiki"><td class="wiki"> <b>Hexa</b> </td><td class="wiki"> <b>Color</b> </td></tr>
<tr class="wiki"><td class="wiki"> 0 </td><td class="wiki"> Black </td></tr>
<tr class="wiki"><td class="wiki"> 1 </td><td class="wiki"> Blue </td></tr>
<tr class="wiki"><td class="wiki"> 2 </td><td class="wiki"> Green </td></tr>
<tr class="wiki"><td class="wiki"> 3 </td><td class="wiki"> Cyan </td></tr>
<tr class="wiki"><td class="wiki"> 4 </td><td class="wiki"> Red </td></tr>
<tr class="wiki"><td class="wiki"> 5 </td><td class="wiki"> Purple </td></tr>
<tr class="wiki"><td class="wiki"> 6 </td><td class="wiki"> Brown </td></tr>
<tr class="wiki"><td class="wiki"> 7 </td><td class="wiki"> White </td></tr>
<tr class="wiki"><td class="wiki"> 8 </td><td class="wiki"> Grey </td></tr>
<tr class="wiki"><td class="wiki"> 9 </td><td class="wiki"> Light Blue </td></tr>
<tr class="wiki"><td class="wiki"> A </td><td class="wiki"> Light Green </td></tr>
<tr class="wiki"><td class="wiki"> B </td><td class="wiki"> Light Cyan </td></tr>
<tr class="wiki"><td class="wiki"> C </td><td class="wiki"> Light Red </td></tr>
<tr class="wiki"><td class="wiki"> D </td><td class="wiki"> Light Purple </td></tr>
<tr class="wiki"><td class="wiki"> E </td><td class="wiki"> Light Yellow </td></tr>
<tr class="wiki"><td class="wiki"> F </td><td class="wiki"> Light White </td></tr>
</table>
</div>
<br />
<br />
<h3><a name="raydium_osd_start"></a>35.6 void raydium_osd_start (void):</h3>
Mostly for internal uses. (will configure screen for OSD operations)<br />
<br />
<h3><a name="raydium_osd_stop"></a>35.7 void raydium_osd_stop (void):</h3>
Mostly for internal uses. (see above)<br />
<br />
<h3><a name="raydium_osd_draw"></a>35.8 void raydium_osd_draw (int tex, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2):</h3>
Will draw <tt>tex</tt> texture using (<tt>x1</tt>,<tt>y1</tt>) and (<tt>x2</tt>,<tt>y2</tt>) points.<br />
<br />
<h3><a name="raydium_osd_draw_name"></a>35.9 void raydium_osd_draw_name (char *tex, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2):</h3>
Same as above, but using texture filename.<br />
<br />
<h3><a name="raydium_osd_draw_quad"></a>35.10 void raydium_osd_draw_quad(int tex, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2, GLfloat angle):</h3>
Will draw <tt>tex</tt> texture using (<tt>x1</tt>,<tt>y1</tt>) and (<tt>x2</tt>,<tt>y2</tt>) points<br />
with <tt>angle</tt> rotation.<br />
<br />
<h3><a name="raydium_osd_draw_quad_name"></a>35.11 void raydium_osd_draw_quad_name(char *tex, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2, GLfloat angle):</h3>
Same as above, but using texture filename.<br />
<br />
<h3><a name="raydium_osd_printf"></a>35.12 void raydium_osd_printf (GLfloat x, GLfloat y, GLfloat size, GLfloat spacer, char *texture, char *format, ...):</h3>
This function is an <a href="http://wiki.raydium.org/wiki/OpenGL">OpenGL</a> equivalent to the standard "printf" C function.<br />
<br />
- (<tt>x</tt>,<tt>y</tt>) is the position of the text's beginning, as a screen<br />
percentage, with origin at lower left.<br />
<br />
- <tt>size</tt> is the font size, using an arbitrary unit. This size is always<br />
proportionnal to frame size (font size will grow up with screen size,<br />
in other words).<br />
<br />
- <tt>spacer</tt> is the factor of spacing between 2 consecutive letters. With<br />
standard fonts, 0.5 is a correct value (relatively condensed text).<br />
<br />
- <tt>texture</tt> is obviously the texture filename to use (font*.tga are<br />
often provided with Raydium distribution, and by R3S).<br />
<br />
- <tt>format</tt> is the standard printf format string, followed by<br />
corresponding arguments: <tt>"^9Player ^Fname is: %10s", player_name</tt><br />
This format can use '^' char to change color text, followed by a color,<br />
indicated by a hexadecimal letter (EGA palette). See <tt>raydium_osd_color_ega</tt><br />
function, above.<br />
<br />
Here you are a simple example:<br />
<br />
<div class="code"><pre>strcpy<span style="color: #66cc66;">&#40;</span>version,<span style="color: #ff0000;">"^Ctest 0.1^F"</span><span style="color: #66cc66;">&#41;</span>;
raydium_osd_printf<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">2</span>,<span style="color: #cc66cc;">98</span>,<span style="color: #cc66cc;">16</span>,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">5</span>,<span style="color: #ff0000;">"font2.tga"</span>,<span style="color: #ff0000;">"- %3i FPS - tech demo %s for Raydium %s, CQFD Corp."</span>,
raydium_render_fps,version,raydium_version<span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
<h3><a name="raydium_osd_printf_3D"></a>35.13 void raydium_osd_printf_3D (GLfloat x, GLfloat y, GLfloat z, GLfloat size, GLfloat spacer, char *texture, char *format, ...):</h3>
Same as above, but you can place your text in your application 3D space,<br />
using <tt>x</tt>, <tt>y</tt> and <tt>z</tt> values.<br />
<br />
<h3><a name="raydium_osd_logo"></a>35.14 void raydium_osd_logo (char *texture):</h3>
Will draw a logo for the current frame with texture filename.<br />
For now, you've no control over rotation speed of the logo.<br />
<br />
<h3><a name="raydium_osd_cursor_set"></a>35.15 void raydium_osd_cursor_set (char *texture, GLfloat xsize, GLfloat ysize):</h3>
This function will set mouse cursor with texture filename and<br />
with (<tt>xsize</tt>,<tt>ysize</tt>) size (percent of screen size).<br />
You should use a RGB<b>A</b> texture for better results.<br />
example:<br />
<div class="code"><pre>raydium_osd_cursor_set<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"BOXcursor.tga"</span>,<span style="color: #cc66cc;">4</span>,<span style="color: #cc66cc;">4</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
You can set <tt>texture</tt> to NULL or empty string to cancel OSD cursor texture.<br />
<br />
<h3><a name="raydium_osd_cursor_offset"></a>35.16 void raydium_osd_cursor_offset(GLfloat xoffset, GLfloat yoffset):</h3>
This function allows to offset the cursor. Used with non-regular cursor<br />
textures. The units are percentage of the screen.<br />
<br />
<h3><a name="raydium_osd_cursor_draw"></a>35.17 void raydium_osd_cursor_draw (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_osd_internal_vertex"></a>35.18 void raydium_osd_internal_vertex (GLfloat x, GLfloat y, GLfloat top):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_osd_network_stat_draw"></a>35.19 void raydium_osd_network_stat_draw (GLfloat px, GLfloat py, GLfloat size):</h3>
Will draw network stats (if available) in a box.<br />
<div class="code"><pre>raydium_osd_network_stat_draw<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">5</span>,<span style="color: #cc66cc;">30</span>,<span style="color: #cc66cc;">20</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
<h3><a name="raydium_osd_mask"></a>35.20 void raydium_osd_mask (GLfloat * color4):</h3>
Will draw a uniform mask using <tt>color4</tt> (RGBA color) for this frame.<br />
<br />
<h3><a name="raydium_osd_mask_texture"></a>35.21 void raydium_osd_mask_texture(int texture,GLfloat alpha):</h3>
Will draw a textured mask, with <tt>alpha</tt> opacity (1 is full opacity).<br />
<br />
<h3><a name="raydium_osd_mask_texture_name"></a>35.22 void raydium_osd_mask_texture_name(char *texture,GLfloat alpha):</h3>
Same as above, but resolving texture by name.<br />
<br />
<h3><a name="raydium_osd_mask_texture_clip"></a>35.23 void raydium_osd_mask_texture_clip(int texture,GLfloat alpha, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2):</h3>
Same as <tt>raydium_osd_mask_texture</tt>, but (x1,y1),(x2,y2) will be used as<br />
texture coords, in a [0,100] range.<br />
<br />
<h3><a name="raydium_osd_mask_texture_clip_name"></a>35.24 void raydium_osd_mask_texture_clip_name(char *texture,GLfloat alpha, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2):</h3>
Same as above, but resolving texture by name.<br />
<br />
<h3><a name="raydium_osd_fade_callback"></a>35.25 void raydium_osd_fade_callback (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_osd_fade_init"></a>35.26 void raydium_osd_fade_init (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_osd_fade_from"></a>35.27 void raydium_osd_fade_from (GLfloat * from4, GLfloat * to4, GLfloat time_len, void *<span class="missingpage">OnFadeEnd</span><a href="http://wiki.raydium.org/wiki/OnFadeEnd/edit">?</a>):</h3>
This function will configure a fading mask from <tt>from4</tt> color to <tt>to4</tt>.<br />
This fade will last <tt>time_len</tt> seconds, and will call <tt><span class="missingpage">OnFadeEnd</span><a href="http://wiki.raydium.org/wiki/OnFadeEnd/edit">?</a></tt> callback<br />
when finished.<br />
This callback signature must be <tt>void callback(void)</tt>.<br />
<br />
A standard fade-to-black-and-restore example:<br />
<div class="code"><pre><span style="color: #808080; font-style: italic;">// back to normal rendering</span>
<span style="color: #993333;">void</span> restorefade<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">void</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
GLfloat from<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">4</span><span style="color: #66cc66;">&#93;</span>=<span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#125;</span>;
GLfloat to<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">4</span><span style="color: #66cc66;">&#93;</span>=<span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#125;</span>;
raydium_osd_fade_from<span style="color: #66cc66;">&#40;</span>from,to,<span style="color: #cc66cc;">1</span>,<span style="color: #000000; font-weight: bold;">NULL</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #808080; font-style: italic;">// do things (like moving camera to another place, for example).</span>
<span style="color: #66cc66;">&#125;</span>
&nbsp;
...
&nbsp;
<span style="color: #808080; font-style: italic;">// If space key : fade to black</span>
<span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>raydium_key_last==<span style="color: #cc66cc;">1032</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
GLfloat from<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">4</span><span style="color: #66cc66;">&#93;</span>=<span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#125;</span>;
GLfloat to<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">4</span><span style="color: #66cc66;">&#93;</span>=<span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">0</span>,<span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#125;</span>;
raydium_osd_fade_from<span style="color: #66cc66;">&#40;</span>from,to,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">3</span>,restorefade<span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
<a name="console.h"></a><br />
<h2>36 In-game console:</h2>
<h3><a name="raydium_osd_fade_from"></a>36.1 Introduction:</h3>
This chapter introduce Raydium console, allowing applications to take<br />
user keyboard input (game commands, chat, ...) and to send informations<br />
to this console.<br />
The end user can call the console using "the key below esc".<br />
<br />
By default, if PHP support is enabled, all user commands will be redirected<br />
to PHP engine. Each command will get his own context, don't expect to create<br />
anything else than "single line PHP scripts" with the console. See PHP chapter<br />
for more informations.<br />
The console allows the user to prefix command with the following characters:<br />
<br />
- <tt>/</tt>: Non PHP command. The command will be sent to application (see<br />
<tt>raydium_console_gets_callback</tt>, below.<br />
<br />
- <tt>&gt;</tt>: Will launch argument as a PHP script (identical to <tt>include("...")</tt>)<br />
<br />
- <tt>!</tt>: Will launch argument as a sequence script<br />
<br />
Command history is saved to <tt>raydium_history</tt> file when application exits.<br />
<br />
You can use a <tt>void prompt(char *)</tt> callback to get user commands. Your<br />
callback must be registered thru <tt>raydium_console_gets_callback</tt>:<br />
<div class="code"><pre>raydium_console_gets_callback=prompt;</pre>
</div><br />
<br />
This console provides auto-completion of register functions and variables.<br />
See the suitable chapter for more information.<br />
<br />
<h3><a name="raydium_console_init"></a>36.2 void raydium_console_init (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_console_history_save"></a>36.3 void raydium_console_history_save (void):</h3>
Internal use (will flush console history to disk).<br />
You can call it by yourself if needed.<br />
<br />
<h3><a name="raydium_console_gets"></a>36.4 int raydium_console_gets (char *where):</h3>
<b>DISABLED</b>.<br />
Use <tt>raydium_console_gets_callback</tt> function pointer instead.<br />
<br />
<h3><a name="raydium_console_history_previous"></a>36.5 void raydium_console_history_previous (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_console_history_next"></a>36.6 void raydium_console_history_next (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_console_history_add"></a>36.7 void raydium_console_history_add (char *str):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_console_exec_script"></a>36.8 void raydium_console_exec_script (char *file):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_console_exec_last_command"></a>36.9 void raydium_console_exec_last_command (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_console_line_add"></a>36.10 void raydium_console_line_add (char *format, ...):</h3>
Mostly reserved for internal use, but unless <tt>raydium_log</tt>, this function will<br />
add the provided data only to ingame console, and not to "native" console.<br />
<br />
<h3><a name="raydium_console_history_read"></a>36.11 int raydium_console_history_read(char * *hist):</h3>
This function will build an history list.<br />
See this example :<br />
<div class="code"><pre><span style="color: #993333;">char</span> *hist<span style="color: #66cc66;">&#91;</span>RAYDIUM_CONSOLE_MAX_LINES<span style="color: #66cc66;">&#93;</span>;
<span style="color: #993333;">int</span> i,n;
n=raydium_console_history_read<span style="color: #66cc66;">&#40;</span>hist<span style="color: #66cc66;">&#41;</span>;
<span style="color: #b1b100;">for</span><span style="color: #66cc66;">&#40;</span>i=<span style="color: #cc66cc;">0</span>;i&lt;n;i++<span style="color: #66cc66;">&#41;</span>
<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span style="color: #000066;">printf</span></a><span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"&gt; %s<span style="color: #000099; font-weight: bold;">\n</span>"</span>,hist<span style="color: #66cc66;">&#91;</span>i<span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<b>Warning</b>: Be sure that there's no new history line between the call and<br />
the end of <tt>hist</tt> usage (Or copy <tt>hist</tt> to a safer place).<br />
<br />
<h3><a name="raydium_console_event"></a>36.12 void raydium_console_event (void):</h3>
Internal use. Will switch console up and down.<br />
<br />
<h3><a name="raydium_console_draw"></a>36.13 void raydium_console_draw (void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_console_internal_isalphanumuscore"></a>36.14 int raydium_console_internal_isalphanumuscore (char c):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_console_complete"></a>36.15 void raydium_console_complete (char *str):</h3>
Internal use.<br />
<br />
<a name="joy.h"></a><br />
<h2>37 Joysticks, pads and force feedback:</h2>
<h3><a name="raydium_console_complete"></a>37.1 Introduction:</h3>
Raydium supports Joysticks, joypads, steering wheels, force feedback devices,<br />
keyboard emulation.<br />
<br />
Please note that this API may change in the future, mainly about force feedback,<br />
that only (barely) works with Linux currently. Some support for "user control<br />
setup" will be added, too.<br />
<br />
Interesting variables:<br />
<div class="code"><pre><span style="color: #993333;">signed</span> <span style="color: #993333;">char</span> raydium_joy_button<span style="color: #66cc66;">&#91;</span>RAYDIUM_BUTTONS_MAX_BUTTONS<span style="color: #66cc66;">&#93;</span>;
<span style="color: #993333;">signed</span> <span style="color: #993333;">char</span> raydium_joy_click;
GLfloat raydium_joy_x;
GLfloat raydium_joy_y;
GLfloat raydium_joy_z;
<span style="color: #993333;">int</span> raydium_joy;
&nbsp;
<span style="color: #993333;">char</span> raydium_joy_n_axes;
<span style="color: #993333;">char</span> raydium_joy_n_buttons;
GLfloat raydium_joy_axis<span style="color: #66cc66;">&#91;</span>RAYDIUM_JOY_MAX_AXIS<span style="color: #66cc66;">&#93;</span>; <span style="color: #808080; font-style: italic;">// &quot;raw&quot; axes data </span>
&nbsp;</pre>
</div><br />
Buttons are booleans, joy x,y and z are -1 &lt;= (x,y,z) &lt;= 1 and 0 means "center".<br />
<br />
<h3><a name="raydium_joy_key_emul"></a>37.2 void raydium_joy_key_emul (void):</h3>
Emulate joy with keyboard (directional pad), so you can always use<br />
raydium_joy_x and y variables, even if no joystick was detected.<br />
This function has no effect if a joy is detected.<br />
<br />
The user itself can also enable joystick emulation by keyboard (or mouse)<br />
using the --joy-emul xxx command line option.<br />
<br />
<h3><a name="raydium_joy_ff_autocenter"></a>37.3 void raydium_joy_ff_autocenter (int perc):</h3>
Set Force Feedback autocenter factor.<br />
<br />
<h3><a name="raydium_joy_ff_tremble_set"></a>37.4 void raydium_joy_ff_tremble_set (GLfloat period, GLfloat force):</h3>
Send tremble effect to Force Feedback device for a determined period,<br />
at a particular force. (no units yet).<br />
<br />
<a name="gui.h"></a><br />
<h2>38 Graphic User Interfaces:</h2>
<h3><a name="raydium_joy_ff_tremble_set"></a>38.1 Introduction:</h3>
Raydium provides a support for simple GUI definitions thru a set of<br />
functions (<a href="http://wiki.raydium.org/wiki/RayPHP">RayPHP</a> interface is available).<br />
Raydium's GUI are themable, using ".gui" theme text files. A default "full"<br />
theme is provided as "theme-raydium2.gui" (and suitable ".tga" file) on the<br />
data repository.<br />
Complete informations about theme building are readable in this file.<br />
<br />
<h3><a name="raydium_joy_ff_tremble_set"></a>38.2 Vocabulary:</h3>
This API will allow declaration of:<br />
- "widgets" (label, button, edit box, track bar, check box, combo box, zone)<br />
- "windows" (containers for widgets)<br />
<br />
"Focus" is supported for windows and widgets. The final user will not have<br />
any control on windows focus. "Tab" key is used for widget focus cycling.<br />
<br />
Widgets and windows are identified by a name or by a unique numeric id.<br />
<br />
<h3><a name="raydium_joy_ff_tremble_set"></a>38.3 Building:</h3>
The idea is simple: build a window (position and size), and create<br />
widgets over this window.<br />
All widgets are created using the current sizes (x,y and font). See<br />
suitable function).<br />
Buttons provides a simple callback, and all other widgets (but label)<br />
provides an unified "read" function. Window deletion is also possible.<br />
<br />
You must set current theme before any of this operations (see below).<br />
A void(void) callback is available if you want to draw something <b>over</b><br />
the GUI, named <tt>raydium_gui_AfterGuiDrawCallback</tt>.<br />
<br />
<h3><a name="raydium_gui_window_init"></a>38.4 void raydium_gui_window_init(int window):</h3>
Internal use. Will reset <tt>window</tt>.<br />
<br />
<h3><a name="raydium_gui_init"></a>38.5 void raydium_gui_init(void):</h3>
Internal use. Will init all GUI API. Called once by Raydium.<br />
<br />
<h3><a name="raydium_gui_theme_init"></a>38.6 void raydium_gui_theme_init(void):</h3>
Internal use. Will init theme.<br />
<br />
<h3><a name="raydium_gui_theme_load"></a>38.7 int raydium_gui_theme_load(char *filename):</h3>
This function will load and set current theme (".gui" files). You must load<br />
a theme by yourself, since Raydium will never do it for you.<br />
This function must be called before GUI building.<br />
<br />
<h3><a name="raydium_gui_window_isvalid"></a>38.8 signed char raydium_gui_window_isvalid(int i):</h3>
Mostly internal. Will check if <tt>i</tt> window is valid.<br />
<br />
<h3><a name="raydium_gui_window_find"></a>38.9 int raydium_gui_window_find(char *name):</h3>
Will search <tt>name</tt> window's numeric id.<br />
<br />
<h3><a name="raydium_gui_window_OnDelete"></a>38.10 void raydium_gui_window_OnDelete(int window, void *<span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a>):</h3>
This function sets <span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a> callback for <tt>window</tt> deletion.<br />
This callback must follow void f(void) prototype. The call is done <b>before</b><br />
window deletion.<br />
<br />
<h3><a name="raydium_gui_window_OnDelete_name"></a>38.11 void raydium_gui_window_OnDelete_name(char *window, void *<span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a>):</h3>
Same as above, but using <tt>window</tt> name.<br />
<br />
<h3><a name="raydium_gui_widget_isvalid"></a>38.12 signed char raydium_gui_widget_isvalid(int i, int window):</h3>
Mostly internal. Will check if <tt>i</tt> widget of <tt>window</tt> is valid.<br />
<br />
<h3><a name="raydium_gui_widget_find"></a>38.13 int raydium_gui_widget_find(char *name, int window):</h3>
Will search <tt>name</tt> widget numeric id (for <tt>window</tt>).<br />
<br />
<h3><a name="raydium_gui_widget_next"></a>38.14 void raydium_gui_widget_next(void):</h3>
Mostly internal. Cycle focus.<br />
<br />
<h3><a name="raydium_gui_widget_draw_internal"></a>38.15 void raydium_gui_widget_draw_internal(GLfloat *uv, GLfloat *xy):</h3>
Internal use. Generic drawing function.<br />
<br />
<h3><a name="raydium_gui_button_draw"></a>38.16 void raydium_gui_button_draw(int w, int window):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_gui_track_draw"></a>38.17 void raydium_gui_track_draw(int w, int window):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_gui_label_draw"></a>38.18 void raydium_gui_label_draw(int w, int window):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_gui_edit_draw"></a>38.19 void raydium_gui_edit_draw(int w, int window):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_gui_check_draw"></a>38.20 void raydium_gui_check_draw(int w, int window):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_gui_combo_draw"></a>38.21 void raydium_gui_combo_draw(int w, int window):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_gui_zone_draw"></a>38.22 void raydium_gui_zone_draw(int w, int window):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_gui_window_draw"></a>38.23 void raydium_gui_window_draw(int window):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_gui_draw"></a>38.24 void raydium_gui_draw(void):</h3>
Internal use. GUI drawing callback.<br />
<br />
<h3><a name="raydium_gui_button_read"></a>38.25 int raydium_gui_button_read(int window, int widget, char *str):</h3>
Internal use. Button read accessor (dummy).<br />
<br />
<h3><a name="raydium_gui_button_write"></a>38.26 int raydium_gui_button_write(int window, int widget, char *str):</h3>
Internal use. Button write accessor.<br />
<br />
<h3><a name="raydium_gui_label_read"></a>38.27 int raydium_gui_label_read(int window, int widget, char *str):</h3>
Internal use. Label read accessor (dummy).<br />
<br />
<h3><a name="raydium_gui_label_write"></a>38.28 int raydium_gui_label_write(int window, int widget, char *str):</h3>
Internal use. Label write accessor.<br />
<br />
<h3><a name="raydium_gui_track_read"></a>38.29 int raydium_gui_track_read(int window, int widget, char *str):</h3>
Internal use. Track read accessor.<br />
<br />
<h3><a name="raydium_gui_track_write"></a>38.30 int raydium_gui_track_write(int window, int widget, int value):</h3>
Internal use. Track write accessor.<br />
<br />
<h3><a name="raydium_gui_edit_read"></a>38.31 int raydium_gui_edit_read(int window, int widget, char *str):</h3>
Internal use. Edit read accessor.<br />
<br />
<h3><a name="raydium_gui_edit_write"></a>38.32 int raydium_gui_edit_write(int window, int widget, char *str):</h3>
Internal use. Edit write accessor.<br />
<br />
<h3><a name="raydium_gui_check_read"></a>38.33 int raydium_gui_check_read(int window, int widget, char *str):</h3>
Internal use. Check read accessor.<br />
<br />
<h3><a name="raydium_gui_check_write"></a>38.34 int raydium_gui_check_write(int window, int widget, int value):</h3>
Internal use. Check write accessor.<br />
<br />
<h3><a name="raydium_gui_combo_read"></a>38.35 int raydium_gui_combo_read(int window, int widget, char *str):</h3>
Internal use. Combo read accessor.<br />
<br />
<h3><a name="raydium_gui_combo_write"></a>38.36 int raydium_gui_combo_write(int window, int widget, int value):</h3>
Internal use. Combo write accessor.<br />
<br />
<h3><a name="raydium_gui_zone_read"></a>38.37 int raydium_gui_zone_read(int window, int widget, char *str):</h3>
Internal use. Zone read accessor.<br />
<br />
<h3><a name="raydium_gui_show"></a>38.38 void raydium_gui_show(void):</h3>
Will show current built GUI.<br />
<br />
<h3><a name="raydium_gui_hide"></a>38.39 void raydium_gui_hide(void):</h3>
Will hide current built GUI. This is the default state.<br />
<br />
<h3><a name="raydium_gui_isvisible"></a>38.40 signed char raydium_gui_isvisible(void):</h3>
Will return current visibility of GUI.<br />
<br />
<h3><a name="raydium_gui_window_delete"></a>38.41 void raydium_gui_window_delete(int window):</h3>
Will delete <tt>window</tt>. No further access to widgets is possible.<br />
<br />
<h3><a name="raydium_gui_window_delete_name"></a>38.42 void raydium_gui_window_delete_name(char *window):</h3>
Same as above, but using <tt>window</tt>'s name.<br />
<br />
<h3><a name="raydium_gui_widget_sizes"></a>38.43 void raydium_gui_widget_sizes(GLfloat sizex, GLfloat sizey, GLfloat font_size):</h3>
Each widget is created using 3 size: X size, Y size and font size. This<br />
function will allow you to set all sizes for a widget or a group of widget.<br />
Unit: percents (screen)<br />
<br />
<h3><a name="raydium_gui_window_create"></a>38.44 int raydium_gui_window_create(char *name, GLfloat px, GLfloat py, GLfloat sizex, GLfloat sizey):</h3>
Obviously, this function will create a new window. This window will take focus<br />
and overlap any previous window.<br />
<tt>px</tt> and <tt>py</tt> for X and Y position on the screen, and <tt>sizex</tt> and <tt>sizey</tt><br />
for sizes, obviously.<br />
Unit: percents (screen)<br />
<br />
<h3><a name="raydium_gui_internal_object_create"></a>38.45 int raydium_gui_internal_object_create(char *name, int window, signed char type, GLfloat px, GLfloat py, GLfloat sizex, GLfloat sizey, GLfloat font_size):</h3>
Internal use.<br />
Small (and ugly) tip: you can build many widgets with the same name, prefixing<br />
the name with '*'.<br />
<br />
<h3><a name="raydium_gui_button_create"></a>38.46 int raydium_gui_button_create(char *name, int window,  GLfloat px, GLfloat py, char *caption, void *<span class="missingpage">OnClick</span><a href="http://wiki.raydium.org/wiki/OnClick/edit">?</a>):</h3>
This function will create a new button, with <tt>name</tt> and with <tt>window</tt> for<br />
parent.<br />
You need to provide a <tt>caption</tt> ("title") and a <span class="missingpage">OnClick</span><a href="http://wiki.raydium.org/wiki/OnClick/edit">?</a> callback function.<br />
This callback must follow this prototype:<br />
<div class="code"><pre><span style="color: #993333;">void</span> btnButtonClick<span style="color: #66cc66;">&#40;</span>raydium_gui_Object *w<span style="color: #66cc66;">&#41;</span></pre>
</div><br />
You can find <tt>raydium_gui_Object</tt> structure declaration in <tt>raydium/gui.h</tt>,<br />
if needed.<br />
<br />
Unit for position (<tt>px</tt> and <tt>py</tt>): percents (<b>window</b>)<br />
<br />
<h3><a name="raydium_gui_button_create_simple"></a>38.47 int raydium_gui_button_create_simple(char *name, int window,  GLfloat px, GLfloat py, char *caption):</h3>
Same as above, but no <span class="missingpage">OnClick</span><a href="http://wiki.raydium.org/wiki/OnClick/edit">?</a> callback function is asked. This type of button<br />
is "readable" thru <tt>raydium_gui_button_clicked()</tt>.<br />
<br />
<h3><a name="raydium_gui_label_create"></a>38.48 int raydium_gui_label_create(char *name, int window,  GLfloat px, GLfloat py, char *caption, GLfloat r, GLfloat g, GLfloat b):</h3>
This function will create a new label, with <tt>name</tt> and with <tt>window</tt> for<br />
parent.<br />
You need to provide a <tt>caption</tt> ("title") and an RGB color (0..1 interval)<br />
<br />
Unit for position (<tt>px</tt> and <tt>py</tt>): percents (<b>window</b>)<br />
<br />
<h3><a name="raydium_gui_track_create"></a>38.49 int raydium_gui_track_create(char *name, int window,  GLfloat px, GLfloat py, int min, int max, int current):</h3>
This function will create a new trackbar, with <tt>name</tt> and with <tt>window</tt> for<br />
parent.<br />
You need to provide a <tt>min</tt> interger value, a <tt>max</tt> and <tt>current</tt> value.<br />
<br />
Unit for position (<tt>px</tt> and <tt>py</tt>): percents (<b>window</b>)<br />
<br />
<h3><a name="raydium_gui_edit_create"></a>38.50 int raydium_gui_edit_create(char *name, int window,  GLfloat px, GLfloat py, char *default_text):</h3>
This function will create a new edit box, with <tt>name</tt> and with <tt>window</tt><br />
for parent.<br />
You may provide a default text (or an empty string), if needed. Unless all<br />
others Raydium's data, max string length is <tt>RAYDIUM_GUI_DATASIZE</tt> and<br />
not <tt>RAYDIUM_MAX_NAME_LEN</tt>, since this component may handle bigger strings.<br />
See <tt>raydium/gui.h</tt> for more informations.<br />
<br />
Unit for position (<tt>px</tt> and <tt>py</tt>): percents (<b>window</b>)<br />
<br />
<h3><a name="raydium_gui_check_create"></a>38.51 int raydium_gui_check_create(char *name, int window,  GLfloat px, GLfloat py, char *caption, signed char checked):</h3>
This function will create a new check box, with <tt>name</tt> and with <tt>window</tt><br />
for parent.<br />
You need to provide a <tt>caption</tt> ("title") and a boolean state (checked or not).<br />
<br />
Unit for position (<tt>px</tt> and <tt>py</tt>): percents (<b>window</b>)<br />
<br />
<h3><a name="raydium_gui_combo_create"></a>38.52 int raydium_gui_combo_create(char *name, int window,  GLfloat px, GLfloat py, char *items, int current):</h3>
This function will create a new edit box, with <tt>name</tt> and with <tt>window</tt><br />
for parent.<br />
<tt>items</tt> is a string, using '\n' as a separator. It's allowed to create an<br />
empty item.<br />
<tt>current</tt> is the default selected item in <tt>items</tt>. (first = 0)<br />
Unless all others Raydium's data, max string length is <tt>RAYDIUM_GUI_DATASIZE</tt><br />
and not <tt>RAYDIUM_MAX_NAME_LEN</tt>, since this component may handle bigger<br />
strings. See <tt>raydium/gui.h</tt> for more informations.<br />
<br />
Unit for position (<tt>px</tt> and <tt>py</tt>): percents (<b>window</b>)<br />
<br />
<h3><a name="raydium_gui_zone_create"></a>38.53 int raydium_gui_zone_create(char *name, int window,  GLfloat px, GLfloat py, GLfloat sx, GLfloat sy, int tag, void *<span class="missingpage">OnClick</span><a href="http://wiki.raydium.org/wiki/OnClick/edit">?</a>):</h3>
This function will create a "zone" with <tt>name</tt> and with <tt>window</tt> for<br />
parent. A zone will act like a button, but  will highlight a rectangular area<br />
of the window.<br />
<br />
This widget will return its <tt>tag</tt> when you'll read it, and will<br />
update <tt>raydium_gui_button_clicked()</tt> value when clicked.<br />
<br />
Unit for position/size (<tt>px</tt>, <tt>py</tt>, <tt>sx</tt> and <tt>sy</tt>): percents (<b>window</b>)<br />
<br />
<h3><a name="raydium_gui_read"></a>38.54 int raydium_gui_read(int window, int widget, char *str):</h3>
Use this function to get <tt>widget</tt>'s state (for <tt>window</tt>).<br />
This function will always return this information thru two variable:<br />
an integer (returned value) and a string (<tt>str</tt>).<br />
This information is specific to <tt>widget</tt>'s type (checked or not for a<br />
checkbox, current choice for a combo, current string for an edit box, ...)<br />
Please, note <tt>str</tt> must be allocated before function call. This is also<br />
the case for PHP scripts :<br />
<div class="code"><pre><span style="color: #0000ff;">$str</span>=<a href="http://www.php.net/str_pad"><span style="color: #000066;">str_pad</span></a><span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">""</span>,<span style="color: #cc66cc;">256</span><span style="color: #66cc66;">&#41;</span>; <span style="color: #808080; font-style: italic;">// &quot;pre-alloc&quot;</span>
<span style="color: #0000ff;">$val</span>=raydium_gui_read_name<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"main"</span>,<span style="color: #ff0000;">"track"</span>,<span style="color: #0000ff;">$str</span><span style="color: #66cc66;">&#41;</span>;
<a href="http://www.php.net/echo"><span style="color: #000066;">echo</span></a> <span style="color: #ff0000;">"value=$val, string='$str'"</span>;</pre></div><br />
<br />
<h3><a name="raydium_gui_read_name"></a>38.55 int raydium_gui_read_name(char *window, char *widget, char *str):</h3>
Same as above, but <tt>window</tt> and <tt>widget</tt> are resolved thru names, and<br />
not numeric id.<br />
<br />
<h3><a name="raydium_gui_read_widget"></a>38.56 int raydium_gui_read_widget(raydium_gui_Object *w, char *str):</h3>
Same as <tt>raydium_gui_read()</tt>, but using a <tt>raydium_gui_Object</tt> pointer.<br />
Useful for button callbacks, for example.<br />
<br />
<h3><a name="raydium_gui_write"></a>38.57 signed char raydium_gui_write(int window, int widget, char *str, int value):</h3>
With this function, you can change the value of a <tt>widget</tt> on a <tt>window</tt>.<br />
- With buttons, you must use <tt>str</tt> to change caption.<br />
- With labels, you must use <tt>str</tt> to change caption.<br />
- With tracks, you must use <tt>value</tt> to change the current value.<br />
- With edits, you must use <tt>str</tt> to change text.<br />
- With cheks, you must use <tt>value</tt>: <tt>1</tt> means "checked", <tt>0</tt> "unchecked".<br />
- With combos, you must use <tt>value</tt> as an ID to change wich entry is selected.<br />
<br />
Returns 1 when all is OK, 0 when it fails and -1 when nothing was changed.<br />
<br />
<h3><a name="raydium_gui_write_name"></a>38.58 int raydium_gui_write_name(char *window, char *widget, char *str, int value):</h3>
Same as above, but <tt>window</tt> and <tt>widget</tt> are resolved thru names, and<br />
not numeric id.<br />
<br />
<h3><a name="raydium_gui_button_clicked"></a>38.59 int raydium_gui_button_clicked(void):</h3>
This function will return the id of the last clicked button,<br />
or -1 if none were clicked.<br />
The id is built like this : <tt>window * 1000 + widget_id</tt><br />
Usefull for PHP scripts, since it's not possible to create callback for<br />
buttons with <a href="http://wiki.raydium.org/wiki/RayPHP">RayPHP</a>.<br />
<br />
<h3><a name="raydium_gui_list_id"></a>38.60 int raydium_gui_list_id(char *item, char *list):</h3>
This function will return <tt>item</tt>'s id in <tt>list</tt>. Returns -1 if not found.<br />
Useful for combo index, for example.<br />
<br />
<h3><a name="raydium_gui_widget_focus"></a>38.61 void raydium_gui_widget_focus(int widget, int window):</h3>
Sets focus on <tt>widget</tt> for <tt>window</tt>.<br />
<br />
<h3><a name="raydium_gui_widget_focus_name"></a>38.62 void raydium_gui_widget_focus_name(char *widget, char *window):</h3>
Same as above, but using widget and window names<br />
<br />
<a name="register.h"></a><br />
<h2>39 Data registration:</h2>
<h3><a name="raydium_gui_widget_focus_name"></a>39.1 Introduction:</h3>
Raydium supports scripting, for example using PHP in the current implementation.<br />
All <tt>raydium_register_*</tt> functions are provided as a "bridge" between<br />
your applications and PHP scripts, allowing you to "export" native variables<br />
and functions to PHP scripts.<br />
For more informations, see PHP chapters.<br />
<br />
<h3><a name="raydium_register_find_name"></a>39.2 int raydium_register_find_name (char *name):</h3>
Lookups a <b>variable</b> by <tt>name</tt>. Search is not possible (yet) for<br />
registered functions.<br />
Mostly used internally.<br />
<br />
<h3><a name="raydium_register_name_isvalid"></a>39.3 signed char raydium_register_name_isvalid (char *name):</h3>
Tests <tt>name</tt>, and returns his viability as a boolean.<br />
Accepted intervals for variables and functions: [a-z], [A-Z] and '_'<br />
Numerics are not allowed.<br />
<br />
<h3><a name="raydium_register_variable"></a>39.4 int raydium_register_variable (void *addr, int type, char *name):</h3>
Will register a new variable. You must provide variable's address (<tt>addr</tt>),<br />
<tt>type</tt> and <tt>name</tt>.<br />
Current available types are: <tt>RAYDIUM_REGISTER_INT</tt>, <tt>RAYDIUM_REGISTER_FLOAT</tt>,<br />
and <tt>RAYDIUM_REGISTER_STR</tt>.<br />
<br />
<h3><a name="raydium_register_variable_const_f"></a>39.5 int raydium_register_variable_const_f(float val, char *name):</h3>
Will register a new <tt>float</tt> constant.<br />
<br />
<h3><a name="raydium_register_variable_const_i"></a>39.6 int raydium_register_variable_const_i(int val, char *name):</h3>
Will register a new <tt>int</tt> constant.<br />
<br />
<h3><a name="raydium_register_variable_unregister_last"></a>39.7 void raydium_register_variable_unregister_last (void):</h3>
Variable are registered on a stack. As you may want to create "temporary"<br />
variables (usefull for building script's arguments, for example), this function<br />
allows you to unregister last registered variable. Multiple calls are possible.<br />
<br />
<h3><a name="raydium_register_modifiy"></a>39.8 int raydium_register_modifiy (char *var, char *args):</h3>
Deprecated.<br />
<br />
<h3><a name="raydium_register_function"></a>39.9 void raydium_register_function (void *addr, char *name):</h3>
Will register a function. You only need to provide an address (<tt>addr</tt>)<br />
and a name.<br />
<br />
<h3><a name="raydium_register_dump"></a>39.10 void raydium_register_dump (void):</h3>
Will dump to console all registered variables and functions.<br />
<br />
<a name="php.h"></a><br />
<h2>40 PHP scripting engine:</h2>
<h3><a name="raydium_register_dump"></a>40.1 Introduction:</h3>
Most of this module is dedicated to <a href="http://wiki.raydium.org/wiki/RayPHP">RayPHP</a> internal uses, where Raydium deals<br />
with Zend engine.<br />
<br />
The <tt>raydium_php_exec()</tt> function is the interesting part of this module,<br />
allowing you to call external PHP script in your application.<br />
<br />
You may have a look the "Data Registration" chapter to know how "share"<br />
data between your application and your PHP scripts.<br />
<br />
<h3><a name="raydium_php_exec"></a>40.2 int raydium_php_exec (char *name):</h3>
This function will call <tt>name</tt> PHP script. All registered variables and<br />
functions are exported to the script, and variable can be changed from the<br />
script itself if needed.<br />
<br />
This function will <b>not</b> use R3S to download a missing PHP script, for<br />
obvious security reasons. But you may use PHP "allow_url_fopen" feature to<br />
download things from your PHP scripts, if needed.<br />
<br />
In PHP scripts, be sure to pre-alloc strings when calling Raydium functions<br />
supposed to write to arguments. See this example:<br />
<div class="code"><pre><span style="color: #0000ff;">$str</span>=<a href="http://www.php.net/str_pad"><span style="color: #000066;">str_pad</span></a><span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">""</span>,<span style="color: #cc66cc;">256</span><span style="color: #66cc66;">&#41;</span>; <span style="color: #808080; font-style: italic;">// &quot;pre-alloc&quot;</span>
raydium_gui_read_name<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"main"</span>,<span style="color: #ff0000;">"track"</span>,<span style="color: #0000ff;">$str</span><span style="color: #66cc66;">&#41;</span>;
<a href="http://www.php.net/echo"><span style="color: #000066;">echo</span></a> <span style="color: #ff0000;">"$str"</span>;</pre></div><br />
<br />
<br />
<a name="profile.h"></a><br />
<h2>41 Profiling (sort of ...):</h2>
<h3><a name="raydium_php_exec"></a>41.1 Introduction:</h3>
You will find here a few functions for a <b>very simple</b> profiling.<br />
For anything else than a quick time measure, use real profiling tools.<br />
Note: Use only one "profiler" at a time.<br />
<br />
<h3><a name="raydium_profile_start"></a>41.2 void raydium_profile_start(void):</h3>
Starts measure.<br />
<br />
<h3><a name="raydium_profile_end"></a>41.3 void raydium_profile_end(char *tag):</h3>
Stops measure and displays result using <tt>tag</tt> string.<br />
<br />
<a name="rayphp.h"></a><br />
<h2>42 <a href="http://wiki.raydium.org/wiki/RayPHP">RayPHP</a> (internals):</h2>
<h3><a name="raydium_profile_end"></a>42.1 Introduction:</h3>
Raydium also use <a href="http://wiki.raydium.org/wiki/RayPHP">RayPHP</a> (Raydium/PHP interface) for its own needs.<br />
For PHP part of these functions, see "rayphp/" directory.<br />
So far, <a href="http://wiki.raydium.org/wiki/RayPHP">RayPHP</a> is dedicated to R3S (Raydium Server Side Scripts) access.<br />
All this is mostly usefull for internal uses, since Raydium provides <tt>fopen</tt><br />
wrappers, thru <tt>raydium_file_fopen</tt>.<br />
<br />
R3S is able to work with HTTP and FTP, and supports proxy using <tt>raydium.db</tt><br />
configuration database. Example : <div class="code">
<pre>
Generic-Proxy;http://proxy:3128/
</pre>
</div><br />
The trailing <tt>/</tt> (slash) must be present.<br />
<br />
<h3><a name="raydium_php_rayphp_path_change"></a>42.2 void raydium_php_rayphp_path_change(char *path):</h3>
By default, Raydium search for a "rayphp/" subdirectory in the application<br />
directory. It's possible to change this using a --rayphp command line<br />
switch, or using this function. You must call the function as soon as possible,<br />
<b>before window creation</b>, but after <tt>raydium_init_args*()</tt>.<br />
You should probably avoid this function, since it disables the regular 'rayphp'<br />
scripts automatic search.<br />
<br />
<h3><a name="raydium_rayphp_repository_file_get"></a>42.3 int raydium_rayphp_repository_file_get (char *path):</h3>
Will contact R3S servers for downloading <tt>path</tt> file.<br />
<br />
<h3><a name="raydium_rayphp_repository_file_put"></a>42.4 int raydium_rayphp_repository_file_put (char *path, int depends):</h3>
Will contact R3S servers for uploading <tt>path</tt> file. Set <tt>depends</tt> to<br />
true (1) if you also want to upload dependencies, false (0) otherwise.<br />
<br />
<h3><a name="raydium_rayphp_repository_file_list"></a>42.5 int raydium_rayphp_repository_file_list(char *filter):</h3>
Will contact R3S servers to get file list, using <tt>filter</tt> (shell-like<br />
syntax). Default <tt>filter</tt> is <tt>*</tt>.<br />
<br />
<h3><a name="raydium_rayphp_http_test"></a>42.6 signed char raydium_rayphp_http_test(void):</h3>
Test if Internet connection is available using Raydium website.<br />
(0 means 'not available', 1 means 'OK')<br />
<br />
<h3><a name="raydium_rayphp_zip_extract"></a>42.7 signed char raydium_rayphp_zip_extract(char *file, char *to):</h3>
Will extract <tt>file</tt> zip to the <tt>to</tt> directory. (must have write<br />
access to this directory, of course)<br />
The <tt>file</tt> path is used as-is. No R3S download, no search path, ...<br />
Returns 1 when OK, 0 when fails.<br />
Use PHP <span class="missingpage">ZipArchive</span><a href="http://wiki.raydium.org/wiki/ZipArchive/edit">?</a> class.<br />
<br />
<h3><a name="raydium_rayphp_zip_add"></a>42.8 signed char raydium_rayphp_zip_add(char * zip_file, char * full_file_name,char * file_name):</h3>
Add <tt>file_name</tt> to <tt>zip_file</tt> package file, file is read according to <tt>full_file_name</tt> path.<br />
Returns 1 when OK, 0 when fails.<br />
<br />
<h3><a name="raydium_rayphp_repository_defaults"></a>42.9 signed char raydium_rayphp_repository_defaults(char *def):</h3>
Gives the default repositories for this application.<br />
<br />
This function will create two files, <tt>repositories.list</tt> and<br />
<tt>repositories.upload</tt> in game user home directory, if these files<br />
don't alreay exist, and will fill the files with <tt>def</tt>.<br />
This argument is an URL, or a list of URLs (use \n separator). See R3S doc.<br />
<br />
<a name="parser.h"></a><br />
<h2>43 Text file parsing:</h2>
<h3><a name="raydium_rayphp_repository_defaults"></a>43.1 Introduction:</h3>
Raydium provides a set of functions dedicated to text files parsing. These<br />
files must follow a simple syntax:<br />
<div class="code"><pre><span style="color: #808080; font-style: italic;">// strings</span>
variable_s=<span style="color: #ff0000;">"string value"</span>;
&nbsp;
<span style="color: #808080; font-style: italic;">// float (or integer, i.e.)</span>
variable_f=<span style="color: #cc66cc;">10</span>.<span style="color: #cc66cc;">5</span>;
&nbsp;
<span style="color: #808080; font-style: italic;">// float array</span>
variable_a=<span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">1</span>,<span style="color: #cc66cc;">2</span>,<span style="color: #cc66cc;">10</span>.<span style="color: #cc66cc;">5</span><span style="color: #66cc66;">&#125;</span>;
&nbsp;
<span style="color: #808080; font-style: italic;">// raw data</span>
variable_r=<span style="color: #66cc66;">&#91;</span>
xxxxxxxx
<span style="color: #339933;">#  oo  #</span>
<span style="color: #339933;">#      #</span>
<span style="color: #339933;">#  oo  #</span>
xxxxxxxx
<span style="color: #66cc66;">&#93;</span>;</pre>
</div><br />
Semi-colon are purely esthetic, and you can put comments almost where you want.<br />
<br />
<h3><a name="raydium_parser_trim_right"></a>43.2 void raydium_parser_trim_right(char *org):</h3>
Strip whitespace (or other characters) from the and end of a string.<br />
Note: unless <tt>raydium_parser_trim()</tt>, semicolon is not removed.<br />
<br />
<h3><a name="raydium_parser_trim"></a>43.3 void raydium_parser_trim(char *org):</h3>
Strip whitespace (or other characters) from the beginning and end of a string.<br />
So far, ' ', '\n' and ';' are deleted.<br />
<br />
<h3><a name="raydium_parser_isdata"></a>43.4 signed char raydium_parser_isdata(char *str):</h3>
Returns true (1) if <tt>str</tt> contains data, false (0) otherwise (comments and<br />
blank lines).<br />
<br />
<h3><a name="raydium_parser_cut"></a>43.5 signed char raydium_parser_cut(char *str, char *part1, char *part2, char separator):</h3>
This function will cut <tt>str</tt> in two parts (<tt>part1</tt> and <tt>part2</tt>) on<br />
<tt>separator</tt>. No memory allocation will be done by this functions.<br />
First occurence of <tt>separator</tt> is used (left cut).<br />
Return true (<tt>i</tt>+1) if <tt>str</tt> was cut, where <tt>i</tt> is the separator position.<br />
Return false (<tt>0</tt>) otherwise (and then <tt>part1</tt> is a copy of <tt>str</tt>).<br />
<br />
<h3><a name="raydium_parser_replace"></a>43.6 int raydium_parser_replace(char *str, char what, char with):</h3>
Will replace all occurences of character <tt>what</tt> with <tt>with</tt>.<br />
Returns the number of replaced characters.<br />
Warning, the string is actually modified: don't apply this on static strings,<br />
consts, function arguments that shouldn't be modified, ...<br />
<br />
<h3><a name="raydium_parser_remove"></a>43.7 int raydium_parser_remove(char *str, char what):</h3>
Remove all occurences of character <tt>what</tt> in the <tt>str</tt> string.<br />
Returns the number of removed characters.<br />
String is modified, see the warning above.<br />
<br />
<h3><a name="raydium_parser_read"></a>43.8 int raydium_parser_read(char *var, char *val_s, GLfloat *val_f, int *size, FILE *fp):</h3>
Reads a new data line in <tt>fp</tt>.<br />
<tt>var</tt> will contain variable name. You'll find associated value in <tt>val_s</tt><br />
if it's a string, or <tt>val_f</tt> if it's a float (or a float array). In this last<br />
case, <tt>size</tt> will return the number of elements if the array.<br />
Watch out for buffer overflows with float arrays !<br />
Returns <tt>RAYDIUM_PARSER_TYPE_STRING</tt> if the line read is an string like:<br />
variable="string between double quotes";<br />
Returns <tt>RAYDIUM_PARSER_TYPE_FLOAT</tt> if the line read is an float array like:<br />
variable={1.0,2.0,3.0,4.0};<br />
Returns <tt>RAYDIUM_PARSER_TYPE_RAWDATA</tt> for things like:<br />
<div class="code">
<pre>
variable=[
xxxxxxxx
#  oo  #
#      #
#  oo  #
xxxxxxxx
];
</pre>
</div><br />
Returns RAYDIUM_PARSER_TYPE_EOF at the end of file.<br />
<br />
<div class="code"><pre>FILE *fp;
<span style="color: #993333;">int</span> ret;
<span style="color: #993333;">char</span> var<span style="color: #66cc66;">&#91;</span>RAYDIUM_MAX_NAME_LEN<span style="color: #66cc66;">&#93;</span>;
<span style="color: #993333;">char</span> val_s<span style="color: #66cc66;">&#91;</span>RAYDIUM_MAX_NAME_LEN<span style="color: #66cc66;">&#93;</span>;
GLfloat val_f<span style="color: #66cc66;">&#91;</span>MY_ARRAY_SIZE<span style="color: #66cc66;">&#93;</span>;
<span style="color: #993333;">int</span> size;
&nbsp;
fp=raydium_file_fopen<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"foobar.txt"</span>,<span style="color: #ff0000;">"rt"</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
<span style="color: #b1b100;">while</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#40;</span>ret=raydium_parser_read<span style="color: #66cc66;">&#40;</span>var,val_s,val_f,&amp;size,fp<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>!=RAYDIUM_PARSER_TYPE_EOF<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
<span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>!strcasecmp<span style="color: #66cc66;">&#40;</span>var,<span style="color: #ff0000;">"foobar_variable"</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
<span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>ret!=RAYDIUM_PARSER_TYPE_FLOAT || size!=<span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
raydium_log<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"error: foobar_variable is not float array"</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #b1b100;">continue</span>;
<span style="color: #66cc66;">&#125;</span>
memcpy<span style="color: #66cc66;">&#40;</span>...<span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span>
&nbsp;
...
&nbsp;
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
<h3><a name="raydium_parser_db_get"></a>43.9 signed char raydium_parser_db_get(char *key, char *value, char *def):</h3>
This function will copy the value of <tt>key</tt> from Raydium's database to<br />
<tt>value</tt>. If <tt>key</tt> is not found, <tt>def</tt> is used as a default value.<br />
<br />
If you do not want to use a default value, give <tt>NULL</tt> to <tt>def</tt>,<br />
and the function will return 0 when <tt>key</tt> was not found.<br />
<br />
No memory allocation is done for you.<br />
<br />
<h3><a name="raydium_parser_db_set"></a>43.10 signed char raydium_parser_db_set(char *key, char *value):</h3>
Sets <tt>key</tt> in the Raydium's database to <tt>value</tt>.<br />
This function will return 0 if failed.<br />
<br />
<a name="live.h"></a><br />
<h2>44 Live textures and videos API:</h2>
<h3><a name="raydium_parser_db_set"></a>44.1 Introduction:</h3>
Live API features two distinct parts:<br />
<br />
1 - It provides an easy way to create and manage dynamic textures, since you<br />
just have to give a pointer to your image data, and call suitable function<br />
each time this image is changing.<br />
<br />
2 - This API also supports video4linux (aka V4L), as an extension of<br />
the Live API. The main goal is to link a video4linux device (webcam,<br />
tv card, ...) to a texture. A callback is also available if you want to<br />
get (and transform) data of every capture.<br />
<br />
You'll find detailed informations for each domain below.<br />
<br />
<h3><a name="raydium_parser_db_set"></a>44.2 Color conversion:</h3>
Live API used to work with RGB and RGBA color formats. Since some V4L<br />
devices use other patterns, Live API needs conversion functions.<br />
You've no need to do color conversion by yourself, consider all this<br />
as internal functions.<br />
<br />
<h3><a name="unsupportedvoidv4l_copy_420_block"></a>44.3 void v4l_copy_420_block (int yTL, int yTR, int yBL, int yBR, int u, int v, int rowPixels, unsigned char *rgb, int bits):</h3>
YUV420P block copy.<br />
This code is not native.<br />
<br />
<h3><a name="unsupportedintv4l_yuv420p2rgb"></a>44.4 int v4l_yuv420p2rgb (unsigned char *rgb_out, unsigned char *yuv_in, int width, int height, int bits):</h3>
YUV420P to RGB conversion.<br />
This code is not native.<br />
<br />
<h3><a name="unsupportedintv4l_yuv420p2rgb"></a>44.5 Live Video API:</h3>
This part of the Live API id dedicated to video devices. For now, the<br />
support is limited to Linux thru V4L API. Every V4L compatible device<br />
should work with Live Video, but for any advanced setup of your video<br />
device (tuner configuration, source, FPS, ...), you must use an external<br />
tool.<br />
By default, Live API supports up to 4 simultaneous devices.<br />
<br />
<h3><a name="raydium_live_video_isvalid"></a>44.6 signed char raydium_live_video_isvalid(int i):</h3>
Internal use, but you can call this function if you want to verify if a<br />
live video device id is valid (in bounds, open, and ready to capture).<br />
<br />
<h3><a name="raydium_live_video_find_free"></a>44.7 int raydium_live_video_find_free(void):</h3>
Internal use.<br />
Finds a free live video device slot.<br />
<br />
<h3><a name="raydium_live_video_open"></a>44.8 int raydium_live_video_open(char *device, int sizex, int sizey):</h3>
This is where you should start. This function opens <tt>device</tt> (something<br />
like "/dev/video0"), requesting <tt>sizex</tt> x <tt>sizey</tt> resolution.<br />
If <tt>device</tt> is <tt>RAYDIUM_LIVE_DEVICE_AUTO</tt>, Raydium will use a default device,<br />
hardcoded or given thru commande line (<tt>--video-device</tt>).<br />
Same story for sizes, with <tt>RAYDIUM_LIVE_SIZE_AUTO</tt>.<br />
This function will try to detect a compatible palette (grayscale, rgb,<br />
yuv420p, with 4, 6, 8, 15, 16 and 24 bits per pixel) and capture<br />
method (<tt>read()</tt> or <tt>mmap()</tt>).<br />
Returns -1 in case or error, device id otherwise.<br />
<br />
<h3><a name="raydium_live_video_open_auto"></a>44.9 int raydium_live_video_open_auto(void):</h3>
Same as above, but with full autodetection.<br />
<br />
<h3><a name="raydium_live_video_read"></a>44.10 int raydium_live_video_read(raydium_live_Device *dev):</h3>
Internal V4L read function.<br />
<br />
<h3><a name="raydium_internal_live_video_callback"></a>44.11 void raydium_internal_live_video_callback(void):</h3>
internal frame callback.<br />
<br />
<h3><a name="raydium_internal_live_video_callback"></a>44.12 Live API Core:</h3>
the main goal of the Live API is to allow you to create your own<br />
dynamic textures. The first method is to provide your own picture data thru a<br />
pointer, the second method is to use a Live Video device (see above) as<br />
data source.<br />
<br />
<h3><a name="raydium_internal_live_close"></a>44.13 void raydium_internal_live_close(void):</h3>
Internal close function.<br />
<br />
<h3><a name="raydium_live_init"></a>44.14 void raydium_live_init(void):</h3>
Internal init function.<br />
<br />
<h3><a name="raydium_live_texture_isvalid"></a>44.15 signed char raydium_live_texture_isvalid(int i):</h3>
Internal use, but you can call this function if you want to verify if a<br />
live texture id is valid (in bounds, open, and ready to capture).<br />
<br />
<h3><a name="raydium_live_texture_find_free"></a>44.16 int raydium_live_texture_find_free(void):</h3>
Internal use.<br />
Finds a free live texture slot.<br />
<br />
<h3><a name="raydium_live_texture_find"></a>44.17 int raydium_live_texture_find(int original_texture):</h3>
Resolvs <tt>original_texture</tt> id (native Raydium texture id) to a<br />
live texture id, if any.<br />
<br />
<h3><a name="raydium_live_texture_create"></a>44.18 int raydium_live_texture_create(char *as, unsigned char *data_source, int tx, int ty, int bpp):</h3>
Create a new Live Texture with <tt>as</tt> name. You must provide a <tt>data_source</tt><br />
with RGB or RGBA format, with <tt>tx</tt> and <tt>ty</tt> size.<br />
Possible bpp values are 24 (RGB) and 32 (RGBA).<br />
Returns the live texture id, or -1 when it fails.<br />
<br />
<h3><a name="raydium_live_texture_video"></a>44.19 int raydium_live_texture_video(int device_id, char *as):</h3>
This is another way to create a Live Texture, but using a Live Video device<br />
for data source. Provide texture name (<tt>as</tt>) and Live <tt>device_id</tt>.<br />
<br />
<h3><a name="raydium_live_texture_refresh"></a>44.20 void raydium_live_texture_refresh(int livetex):</h3>
When your data source have changed, call this function to refresh new<br />
data to hardware. Obviously, this function is useless for Live Video textures<br />
since Raydium will automatically refresh data.<br />
<br />
<h3><a name="raydium_live_texture_refresh_name"></a>44.21 void raydium_live_texture_refresh_name(char *texture):</h3>
Same as above, but using <tt>texture</tt> name.<br />
<br />
<h3><a name="raydium_live_texture_refresh_callback_set"></a>44.22 void raydium_live_texture_refresh_callback_set(int livetex, void *callback):</h3>
You can create a "<span class="missingpage">OnRefresh</span><a href="http://wiki.raydium.org/wiki/OnRefresh/edit">?</a>" callback for any Live Texture (<tt>livetex</tt> is an<br />
id to this texture). This is mostly usefull for Live Video texture.<br />
Your callback must follow this prototype :<br />
<tt>int refresh_callback(unsigned char *data, int tx, int ty, int bpp)</tt><br />
You have full write access to <tt>data</tt>, allowing you to draw over<br />
the provided picture (warning: for non video Live textures, <tt>data</tt> pointer<br />
is not owned by Raydium and may be "read only")<br />
You must return 1 to confirm data flushing, or 0 to cancel this refresh.<br />
<br />
<h3><a name="raydium_live_texture_refresh_callback_set_name"></a>44.23 void raydium_live_texture_refresh_callback_set_name(char *texture, void *callback):</h3>
Same as above, but using <tt>texture</tt> name.<br />
<br />
<h3><a name="raydium_live_texture_mask"></a>44.24 void raydium_live_texture_mask(int livetex, GLfloat alpha):</h3>
This function will draw a fullscreen mask using <tt>livetex</tt> Live Texture id and<br />
<tt>alpha</tt> opacity (0 means transparent, 1 means fully opaque, allowing any<br />
intermediate value). Use this function at any place of your rendering<br />
function AFTER camera call and obviously before <tt>raydium_rendering_finish</tt>.<br />
<br />
<h3><a name="raydium_live_texture_mask_name"></a>44.25 void raydium_live_texture_mask_name(char *texture, GLfloat alpha):</h3>
Same as above, but using <tt>texture</tt> name.<br />
<br />
<h3><a name="raydium_live_texture_draw"></a>44.26 void raydium_live_texture_draw(int livetex, GLfloat alpha,GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2):</h3>
This function is a clone of <tt>raydium_osd_draw()</tt>, dedicated to live textures.<br />
This function will draw the video <tt>livetex</tt> on the screen, from (x1,y1) to<br />
(x2,y2).<br />
<br />
<h3><a name="raydium_live_texture_draw_name"></a>44.27 void raydium_live_texture_draw_name(char *texture, GLfloat alpha,GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2):</h3>
Same as above, but using <tt>texture</tt> name.<br />
<br />
<a name="video.h"></a><br />
<h2>45 Video playback:</h2>
<h3><a name="raydium_live_texture_draw_name"></a>45.1 Introduction:</h3>
Raydium supports simple video playback, using a simple dedicated video<br />
codec (JPGS), useful for menus enhancements, "speaking" thumbnails, ...<br />
This codec now supports audio syncing with OGG files.<br />
You will find an small utility, <tt>mk_jpgs</tt> in Raydium source tree, didacted to<br />
movie creation.<br />
The Raydium official source tree also provides a small JPGS player,<br />
named <tt>jpgs_play.c</tt>. You can compile it like any other Raydium application.<br />
<br />
<h3><a name="raydium_live_texture_draw_name"></a>45.2 How to create a JPGS movie ?:</h3>
First, compile <tt>mk_jpgs</tt>: example: <tt>gcc mk_jpgs.c -o mk_jpgs</tt> or any other<br />
standard build command.<br />
Then, generate JPEG pictures (using a temporary directory, if possible), with<br />
something like mplayer, for example:<br />
<tt>mplayer movie.avi -vo jpeg:quality=50 -vf scale=256:256 -nosound -fps 1000</tt>,<br />
where you may change quality factor and output size. Use "hardware friendly"<br />
sizes (64, 128,256,...) !<br />
You can now build JPGS file:<br />
<tt>./mk_jpgs 25 256 256 video.jpgs</tt> (fps, size x, size y, output file)<br />
If you want to extract the audio, use this:<br />
<tt>mplayer -vc nul -vo null -ao pcm:file=audio.dump movie.avi</tt><br />
<tt>oggenc audio.dump</tt><br />
<br />
<h3><a name="raydium_video_init"></a>45.3 void raydium_video_init(void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_video_isvalid"></a>45.4 signed char raydium_video_isvalid(int i):</h3>
Internal use, but you can call this function if you want to check if a<br />
video id is valid (in bounds and open).<br />
<br />
<h3><a name="raydium_video_find_free"></a>45.5 int raydium_video_find_free(void):</h3>
Internal use.<br />
Finds a free video slot.<br />
<br />
<h3><a name="raydium_video_find"></a>45.6 int raydium_video_find(char *name):</h3>
Resolvs video <tt>name</tt>, returning video id.<br />
Returns -1 when video is not found.<br />
<br />
<h3><a name="raydium_video_jpeg_decompress"></a>45.7 void raydium_video_jpeg_decompress(FILE *fp,unsigned char *to):</h3>
Internal.<br />
<br />
<h3><a name="raydium_video_open"></a>45.8 int raydium_video_open(char *filename, char *as):</h3>
This function will open and prepare video <tt>filename</tt>, and will attach<br />
this video to a "live texture" (see Live API chapter, if needed).<br />
The playback starts automatically.<br />
You can then display the video with OSD functions like, for<br />
example, <tt>raydium_live_texture_mask_name()</tt> or using it within meshes.<br />
<br />
<h3><a name="raydium_video_open_with_sound"></a>45.9 int raydium_video_open_with_sound(char *filename, char *as, char *ogg):</h3>
Same as above, but it will also play the <tt>ogg</tt> file, synced with the<br />
video stream.<br />
<br />
<h3><a name="raydium_video_callback_video"></a>45.10 void raydium_video_callback_video(int id):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_video_sound_callback"></a>45.11 float raydium_video_sound_callback(void):</h3>
Internal use. Callback for sound.c <span class="missingpage">BufferData</span><a href="http://wiki.raydium.org/wiki/BufferData/edit">?</a> function.<br />
<br />
<h3><a name="raydium_video_callback"></a>45.12 void raydium_video_callback(void):</h3>
Internal use. Frame callback.<br />
<br />
<h3><a name="raydium_video_delete"></a>45.13 void raydium_video_delete(int id):</h3>
Will delete video <tt>id</tt>. Warning: this function will not delete<br />
associated Live texture, so you may open a new video with the same<br />
texture name, but video size must be the same a the previous one.<br />
<br />
<h3><a name="raydium_video_delete_name"></a>45.14 void raydium_video_delete_name(char *name):</h3>
Same as above, using video name.<br />
<br />
<h3><a name="raydium_video_loop"></a>45.15 void raydium_video_loop(int id, signed char loop):</h3>
Sets loop attribute for the video <tt>id</tt>. By defaults, video loops. Call<br />
this function with loop=0 to disable this behavior.<br />
<br />
<h3><a name="raydium_video_loop_name"></a>45.16 void raydium_video_loop_name(char *name, signed char loop):</h3>
Same as above, using video name.<br />
<br />
<h3><a name="raydium_video_isplaying"></a>45.17 signed char raydium_video_isplaying(int id):</h3>
Returns <b>1</b> is video <tt>id</tt> is playing, <b>0</b> if this video is stopped,<br />
and <b>-1</b> if function failed.<br />
<br />
<h3><a name="raydium_video_isplaying_name"></a>45.18 signed char raydium_video_isplaying_name(char *name):</h3>
Same as above, using video name.<br />
<br />
<h3><a name="raydium_video_fps_change"></a>45.19 void raydium_video_fps_change(int id, float fps):</h3>
This function will change the play rate of video <tt>id</tt> to <tt>fps</tt> frames<br />
per second.<br />
<br />
<h3><a name="raydium_video_fps_change_name"></a>45.20 void raydium_video_fps_change_name(char *name, float fps):</h3>
Same as above, using video name.<br />
<br />
<h3><a name="raydium_video_elapsed"></a>45.21 float raydium_video_elapsed(int id):</h3>
Will return, in seconds, the elapsed time for the video <tt>id</tt>.<br />
<br />
<h3><a name="raydium_video_elapsed_name"></a>45.22 float raydium_video_elapsed_name(char *name):</h3>
Same as above, using video name.<br />
<br />
<h3><a name="raydium_video_duration"></a>45.23 float raydium_video_duration(int id):</h3>
Will return, in seconds, the total duration for the video <tt>id</tt>.<br />
<br />
<h3><a name="raydium_video_duration_name"></a>45.24 float raydium_video_duration_name(char *name):</h3>
Same as above, using video name.<br />
<br />
<h3><a name="raydium_video_seek"></a>45.25 signed char raydium_video_seek(int id, float time):</h3>
Will jump at <tt>time</tt> (in seconds) in the <tt>id</tt> video.<br />
<br />
<h3><a name="raydium_video_seek_name"></a>45.26 signed char raydium_video_seek_name(char *name, float time):</h3>
Same as above, using video name.<br />
<br />
<h3><a name="raydium_video_seek_rel"></a>45.27 signed char raydium_video_seek_rel(int id, float time):</h3>
Will seek from <tt>time</tt> seconds in the video <tt>id</tt> from the current elasped<br />
time. It's a relative jump, in other words.<br />
You can use negative values for forward jumps.<br />
<br />
<h3><a name="raydium_video_seek_rel_name"></a>45.28 signed char raydium_video_seek_rel_name(char *name, float time):</h3>
Same as above, using video name.<br />
<br />
<a name="ode.h"></a><br />
<h2>46 Integrated Physics (ODE):</h2>
<h3><a name="raydium_video_seek_rel_name"></a>46.1 Introduction:</h3>
Raydium allows you to build applications with full physics, using ODE (Open<br />
Dynamics Engine). ODE is "an open source, high performance library for<br />
simulating rigid body dynamics", and is fully integrated into Raydium, with<br />
the usual abstraction. You can build cars, ragdolls, rockets, ... with<br />
only few lines of code. Physics are linked to sound API, particles engine,<br />
network layer, ... so you've almost nothing else to do but setting up objects.<br />
<br />
Raydium's website provides tutorials for building physics ready applications.<br />
<br />
<h3><a name="raydium_video_seek_rel_name"></a>46.2 Vocabulary:</h3>
Raydium physics use a simple vocabulary, with a few entities :<br />
- <b>Objects:</b><br />
Objects are containers, with no direct visual appearance. An object contains<br />
elements and joints (see below). By default, all elements in an object<br />
doesn't collide each others. "Car", "Player", "Crane" are good object examples.<br />
<br />
- <b>Elements:</b><br />
Elements are the main thing you will play with. An element is rendered using<br />
an associated 3D mesh, is configured with a geometry, density, a size,<br />
collides with others elements, ...<br />
An element <b>must</b> be owned by an object.<br />
For now, there is 3 element types (standard, satic, fixing). Static elements<br />
are unmovable, they just collide with other elements, usefull for very<br />
big elements, or externally controlled elements (motion capture, network,<br />
haptic interface, ...), for example.<br />
Raydium supports boxes and spheres.<br />
<br />
- <b>Joints:</b><br />
Joints are dedicated to elements linking. A joint <b>must</b> be linked with two<br />
elements or unwanted behaviors may happen.<br />
For now, Raydium supports 4 joint types (hinge, hinge2, universal, fixed), and<br />
you will find more informations with suitable functions documentation, below.<br />
On a joint, you could setup limits (min and max for all axes) and a maximum<br />
force before joint breaks, if needed.<br />
It's now possible to attach a joint to static environnement using the<br />
constant <tt>RAYDIUM_ODE_JOINT_FIXED</tt> (do not use this value with "_name" joint<br />
functions, since they want a string, not a integer constant).<br />
<br />
- <b>Motors:</b><br />
A motor is linked to joints, and may powering an unlimited amount of joints.<br />
For now, 3 motor types are available: engine, angular and rocket.<br />
<br />
<b>Engine</b> type works the same way as a car's engine: it will try to<br />
make "something" turning, at the desired <b>speed</b>. You can link a<br />
gearbox to this type (and only this one).<br />
<br />
<b>Angular</b> type will try to rotate "something" to the desired <b>angle</b>,<br />
usefull for car's front wheels, for example.<br />
<br />
<b>Rocket type</b> is very simple: give a force and an orientation. Usefull for<br />
creating copters, rockets, and for elements "pushing", for example.<br />
Special rocket is avaiblable for FPS style player controls.<br />
Warning, a rocket is linked to an element ! (not a joint)<br />
<br />
- <b>Explosions:</b><br />
Explosions are not directly related to rigid body physics, but consider it<br />
as a high level primitive.<br />
With Raydium, you have two different ways to create an explosion.<br />
<br />
First, you can create a "blowing explosion", generating a spherical blow. Any<br />
element in this growing sphere will be ejected.<br />
Use this for very consequent explosions only !<br />
<br />
Next, you can create an instantaneous explosion, with a degressive blowing<br />
effect. A force is applied to every body found inside the blowing radius,<br />
proportional to distance from the explosion's center. Usefull for smaller<br />
explosions.<br />
<br />
- <b>Launchers:</b><br />
Launchers are not real entities, but "only" tools. Obviously, they are<br />
allowing you to launch an element (you must provice force and orientation)<br />
from another element (relatively). More informations about launchers below.<br />
<br />
<br />
<h3><a name="raydium_video_seek_rel_name"></a>46.3 About <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> names:</h3>
- Important: All ODE Objects, elements, motors,... <b>must have unique name</b> !<br />
So, here is an example of what you <b>SHOULD NOT DO</b>:<br />
<div class="code"><pre><span style="color: #993333;">int</span> car1=raydium_ode_object_create<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"car"</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333;">int</span> car2=raydium_ode_object_create<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"car"</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333;">int</span> car3=raydium_ode_object_create<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"car"</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
Ant this is the right way:<br />
<div class="code"><pre><span style="color: #993333;">int</span> car1=raydium_ode_object_create<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"car1"</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333;">int</span> car2=raydium_ode_object_create<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"car2"</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333;">int</span> car3=raydium_ode_object_create<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"car3"</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
<h3><a name="raydium_video_seek_rel_name"></a>46.4 Callbacks:</h3>
For <b>advanced</b> uses, you may want to enter into some "internal" parts of<br />
<a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a>. Many callbacks are available for such needs.<br />
To cancel any callback, set its value to <tt>NULL</tt> (default value).<br />
Here is a quick list:<br />
<br />
- <tt>raydium_ode_StepCallback</tt><br />
This callback is fired before every ODE callback. Since physcis callback<br />
frequency may change (see <tt>raydium_ode_time_change</tt>) during slow motion<br />
scenes, for example, this callback is quiet useful.<br />
Callback prototype: <tt>void f(void);</tt><br />
<br />
<br />
- <tt>raydium_ode_ObjectNearCollide</tt><br />
When two objects are too near, before lauching "expensive" collision tests,<br />
Raydium is firing this event.<br />
<br />
Callback prototype: <tt>signed char f(int obj1, int obj2);</tt><br />
<tt>obj1</tt> and <tt>obj2</tt> are the two objets, and you must return true (1) if<br />
you want to "validate" collision, or false (0) if you don't want that two<br />
objects to collide.<br />
<br />
<br />
- <tt>raydium_ode_CollideCallback</tt><br />
When two objects collides, Raydium will search all collisions between<br />
every elements. For each contact, this callback is fired. For complex<br />
objects, with a lot of elements, this callback may be fired a <b>very</b> large<br />
number of times during <b>one</b> ODE step ! Do only simple things here.<br />
<br />
Callback prototype: <tt>signed char f(int e1, int e2, dContact *c);</tt><br />
<tt>e1</tt> and <tt>e2</tt> are the two colliding elements, and you must return true (1)<br />
if you want to "validate" this contact, or false (0) to cancel this contact<br />
(and only this one !)<br />
<br />
See ODE documentation, chapter 7.3.7, for more informations about <tt>dContact</tt><br />
structure.<br />
<br />
<br />
- <tt>raydium_ode_ExplosionCallback</tt><br />
At every explosion, of any type, this event is fired. This is the best<br />
place to play suitable sound, create particles and such things.<br />
<br />
Callback prototype: <tt>void f(signed char type, dReal radius, dReal force_or_propag, dReal *pos);</tt><br />
You can find in callback params:<br />
explosion <tt>type</tt> (see above), <tt>radius</tt>, force or propag (depending on<br />
explosion type) and <tt>pos</tt>, an array of 3 dReal values for explosion position.<br />
The value you will find in <tt>force_or_propag</tt> is something<br />
like <tt>RAYDIUM_ODE_NETWORK_EXPLOSION_*</tt> (EXPL or BLOW).<br />
<br />
<br />
- <tt>raydium_ode_BeforeElementDrawCallback</tt><br />
When <tt>raydium_ode_draw_all(RAYDIUM_ODE_DRAW_NORMAL)</tt> is called, for every<br />
element to draw, this callback is <b>before</b> element drawing.<br />
<br />
Callback prototype: <tt>signed char f(int elem);</tt><br />
<tt>elem</tt> is the element'id. Return true (1) if you want to draw this element,<br />
or false (0) otherwise. This is also the best place to drawn team colors on<br />
cars, for example (see <tt>raydium_rendering_rgb_force</tt> for this use).<br />
<br />
<br />
- <tt>raydium_ode_AfterElementDrawCallback</tt><br />
Same as the previous callback, but <b>after</b> element drawing.<br />
<br />
Callback prototype: <tt>void f(int elem);</tt><br />
With the previous example (team colors), this is the place to restore<br />
default rendering state (see <tt>raydium_rendering_rgb_normal</tt>).<br />
<br />
- <tt>raydium_ode_RayCallback</tt><br />
See ray related functions, below. This callback is used to filter<br />
elements and create contacts during a ray launch.<br />
<br />
<h3><a name="raydium_video_seek_rel_name"></a>46.5 Miscallenous:</h3>
By default, ODE is called 400 times per second, allowing <b>very</b> accurate<br />
physics. You may change this using <tt>raydium_ode_set_physics_freq</tt>,<br />
but most ERP and CFM values must be changed in your<br />
applications. ODE use a lot of cache mechanisms, so 400 Hz is a reasonable value.<br />
<br />
Please note <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> interface is using <tt>dReal</tt> ODE type for variables.<br />
For now, <tt>dReal</tt> is an alias to <tt>float</tt> type. But please use <tt>sizeof()</tt>.<br />
<br />
Raydium provides some other functions for advanced uses, and you can<br />
access directly to ODE API for very experienced users.<br />
<br />
See also the ODE documentation: <a href="http://opende.sourceforge.net/ode-latest-userguide.html">http://opende.sourceforge.net/ode-latest-userguide.html</a><br />
<br />
<h3><a name="raydium_ode_name_auto"></a>46.6 void raydium_ode_name_auto (char *prefix, char *dest):</h3>
This function will generate a single name, using <tt>prefix</tt>. The generated<br />
name is stored at <tt>dest</tt> address. No memory allocation is done.<br />
Example : <tt>raydium_ode_name_auto("prefix",str)</tt> may generate something<br />
like <tt>prefix_ode_0</tt>.<br />
<br />
<h3><a name="raydium_ode_init_object"></a>46.7 void raydium_ode_init_object (int i):</h3>
Will initialize (or erase) object <tt>i</tt>. Mostly for internal uses.<br />
<br />
<h3><a name="raydium_ode_init_element"></a>46.8 void raydium_ode_init_element (int i):</h3>
Will initialize (or erase) element <tt>i</tt>. Mostly for internal uses.<br />
<br />
<h3><a name="raydium_ode_init_joint"></a>46.9 void raydium_ode_init_joint (int i):</h3>
Will initialize (or erase) joint <tt>i</tt>. Mostly for internal uses.<br />
<br />
<h3><a name="raydium_ode_init_motor"></a>46.10 void raydium_ode_init_motor (int i):</h3>
Will initialize (or erase) motor <tt>i</tt>. Mostly for internal uses.<br />
<br />
<h3><a name="raydium_ode_init_explosion"></a>46.11 void raydium_ode_init_explosion (int e):</h3>
Will initialize (or erase) spherical explosiion <tt>i</tt>. Mostly for internal uses.<br />
<br />
<h3><a name="raydium_ode_init"></a>46.12 void raydium_ode_init (void):</h3>
Will initialize all <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> interface. Never call this function by yourself.<br />
<br />
<h3><a name="raydium_ode_gravity"></a>46.13 void raydium_ode_gravity(dReal *vect):</h3>
Change world gravity using <tt>vect</tt>, a 3 floats arrays.<br />
Default value is {0,0,-1}.<br />
<br />
<h3><a name="raydium_ode_gravity_3f"></a>46.14 void raydium_ode_gravity_3f(dReal gx, dReal gy, dReal gz):</h3>
Same as above, using 3 float values.<br />
<br />
<h3><a name="raydium_ode_object_isvalid"></a>46.15 signed char raydium_ode_object_isvalid (int i):</h3>
Will return 0 (false) if object <tt>i</tt> is not valid (free slot or out of bounds)<br />
or 1 (true) otherwise.<br />
<br />
<h3><a name="raydium_ode_element_isvalid"></a>46.16 signed char raydium_ode_element_isvalid (int i):</h3>
Will return 0 (false) if element <tt>i</tt> is not valid (free slot or out of bounds)<br />
or 1 (true) otherwise.<br />
<br />
<h3><a name="raydium_ode_joint_isvalid"></a>46.17 signed char raydium_ode_joint_isvalid (int i):</h3>
Will return 0 (false) if joint <tt>i</tt> is not valid (free slot or out of bounds)<br />
or 1 (true) otherwise.<br />
<br />
<h3><a name="raydium_ode_motor_isvalid"></a>46.18 signed char raydium_ode_motor_isvalid (int i):</h3>
Will return 0 (false) if motor <tt>i</tt> is not valid (free slot or out of bounds)<br />
or 1 (true) otherwise.<br />
<br />
<h3><a name="raydium_ode_explosion_isvalid"></a>46.19 signed char raydium_ode_explosion_isvalid (int i):</h3>
Will return 0 (false) if explosion <tt>i</tt> is not valid (free slot or out of bounds)<br />
or 1 (true) otherwise.<br />
<br />
<h3><a name="raydium_ode_ground_dTriArrayCallback"></a>46.20 void raydium_ode_ground_dTriArrayCallback (dGeomID <span class="missingpage">TriMesh</span><a href="http://wiki.raydium.org/wiki/TriMesh/edit">?</a>, dGeomID <span class="missingpage">RefObject</span><a href="http://wiki.raydium.org/wiki/RefObject/edit">?</a>, const int *<span class="missingpage">TriIndices</span><a href="http://wiki.raydium.org/wiki/TriIndices/edit">?</a>, int <span class="missingpage">TriCount</span><a href="http://wiki.raydium.org/wiki/TriCount/edit">?</a>):</h3>
Internal. Unsupported.<br />
<br />
<h3><a name="raydium_ode_ground_dTriCallback"></a>46.21 int raydium_ode_ground_dTriCallback (dGeomID <span class="missingpage">TriMesh</span><a href="http://wiki.raydium.org/wiki/TriMesh/edit">?</a>, dGeomID <span class="missingpage">RefObject</span><a href="http://wiki.raydium.org/wiki/RefObject/edit">?</a>, int <span class="missingpage">TriangleIndex</span><a href="http://wiki.raydium.org/wiki/TriangleIndex/edit">?</a>):</h3>
Internal. Unsupported.<br />
<br />
<h3><a name="raydium_ode_ground_set_name"></a>46.22 int raydium_ode_ground_set_name (char *name):</h3>
<tt>ground</tt> is a primitive for <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> interface. You only have to set ground<br />
mesh <tt>name</tt> (.tri file). You may call this function many times, if needed,<br />
switching from one ground to another on the fly.<br />
<b>Warning</b>: triangle normals are very important for ground models !<br />
<br />
<h3><a name="raydium_ode_object_find"></a>46.23 int raydium_ode_object_find (char *name):</h3>
Resolves object id from its <tt>name</tt>.<br />
<br />
<h3><a name="raydium_ode_element_find"></a>46.24 int raydium_ode_element_find (char *name):</h3>
Resolves element id from its <tt>name</tt>.<br />
<br />
<h3><a name="raydium_ode_joint_find"></a>46.25 int raydium_ode_joint_find (char *name):</h3>
Resolves joint id from its <tt>name</tt>.<br />
<br />
<h3><a name="raydium_ode_motor_find"></a>46.26 int raydium_ode_motor_find (char *name):</h3>
Resolves motor id from its <tt>name</tt>.<br />
<br />
<h3><a name="raydium_ode_explosion_find"></a>46.27 int raydium_ode_explosion_find (char *name):</h3>
Resolves explosion id from its <tt>name</tt>.<br />
<br />
<h3><a name="raydium_ode_object_create"></a>46.28 int raydium_ode_object_create (char *name):</h3>
Will build a new object with <tt>name</tt>. Returns new object id, or -1 when<br />
it fails.<br />
<br />
<h3><a name="raydium_ode_object_rename"></a>46.29 signed char raydium_ode_object_rename (int o, char *newname):</h3>
Will rename object <tt>o</tt> with a <tt>newname</tt>.<br />
<br />
<h3><a name="raydium_ode_object_rename_name"></a>46.30 signed char raydium_ode_object_rename_name (char *o, char *newname):</h3>
Same as above, but from object's name (<tt>o</tt>).<br />
<br />
<h3><a name="raydium_ode_object_colliding"></a>46.31 signed char raydium_ode_object_colliding (int o, signed char colliding):</h3>
By default, all elements from an object are not colliding each others.<br />
The only exception is for <tt>GLOBAL</tt> object.<br />
If you want to change this behaviour for <tt>o</tt> object, sets <tt>colliding</tt><br />
to 1 (true). 0 (false) sets back to default behaviour (no internal collisions).<br />
<br />
<h3><a name="raydium_ode_object_colliding_name"></a>46.32 signed char raydium_ode_object_colliding_name (char *o, signed char colliding):</h3>
Same as above, but using object's name.<br />
<br />
<h3><a name="raydium_ode_object_linearvelocity_set"></a>46.33 void raydium_ode_object_linearvelocity_set (int o, dReal * vect):</h3>
Sets linear velocity for all elements of object <tt>o</tt>. Velocity is sets thru<br />
<tt>vect</tt>, a 3 x dReal array.<br />
Use with caution, setting an arbitrary linear velocity may cause unwanted<br />
behaviours.<br />
<br />
<h3><a name="raydium_ode_object_linearvelocity_set_name"></a>46.34 void raydium_ode_object_linearvelocity_set_name (char *o, dReal * vect):</h3>
Same as above, but using object's name.<br />
<br />
<h3><a name="raydium_ode_object_linearvelocity_set_name_3f"></a>46.35 void raydium_ode_object_linearvelocity_set_name_3f (char *o, dReal vx, dReal vy, dReal vz):</h3>
Same as above, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_object_addforce"></a>46.36 void raydium_ode_object_addforce (int o, dReal *vect):</h3>
Add force <tt>vect</tt> to all elements of object <tt>o</tt>.<br />
Force is sets thru <tt>vect</tt>, a 3 x dReal array.<br />
Prefer this method to <tt>..._linearvelocity_set...</tt> functions.<br />
<br />
<h3><a name="raydium_ode_object_addforce_3f"></a>46.37 void raydium_ode_object_addforce_3f (int o, dReal vx, dReal vy, dReal vz):</h3>
Same as above, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_object_addforce_name"></a>46.38 void raydium_ode_object_addforce_name (char *o, dReal * vect):</h3>
Same as above, but using object's name.<br />
<br />
<h3><a name="raydium_ode_object_addforce_name_3f"></a>46.39 void raydium_ode_object_addforce_name_3f (char *o, dReal vx, dReal vy, dReal vz):</h3>
Same as above, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_element_addforce"></a>46.40 void raydium_ode_element_addforce (int e, dReal *vect):</h3>
Adds force <tt>vect</tt> to element <tt>e</tt>.<br />
Force is sets thru <tt>vect</tt>, a 3 x dReal array.<br />
<br />
<h3><a name="raydium_ode_element_addforce_3f"></a>46.41 void raydium_ode_element_addforce_3f (int e, dReal fx, dReal fu, dReal fz):</h3>
Same as above, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_element_addforce_name"></a>46.42 void raydium_ode_element_addforce_name (char *e, dReal * vect):</h3>
Same as above, but using element's name and one vector.<br />
<br />
<h3><a name="raydium_ode_element_addforce_name_3f"></a>46.43 void raydium_ode_element_addforce_name_3f (char *e, dReal vx, dReal vy, dReal vz):</h3>
Same as above, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_element_force_get"></a>46.44 dReal * raydium_ode_element_force_get(int e):</h3>
Return forces accumulated by a given body;<br />
<br />
<h3><a name="raydium_ode_element_force_get_name"></a>46.45 dReal * raydium_ode_element_force_get_name(char * elem):</h3>
Same as above with the name.<br />
<br />
<h3><a name="raydium_ode_element_addtorque"></a>46.46 void raydium_ode_element_addtorque (int e, dReal * vect):</h3>
Adds torque <tt>vect</tt> to element <tt>e</tt>.<br />
Torque is sets thru <tt>vect</tt>, a 3 x dReal array.<br />
<br />
<h3><a name="raydium_ode_element_addtorque_3f"></a>46.47 void raydium_ode_element_addtorque_3f(int e, dReal vx, dReal vy, dReal vz):</h3>
Same as above using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_element_addtorque_name"></a>46.48 void raydium_ode_element_addtorque_name (char *e, dReal * vect):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_addtorque_name_3f"></a>46.49 void raydium_ode_element_addtorque_name_3f (char *e, dReal vx, dReal vy, dReal vz):</h3>
Same as above, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_element_material"></a>46.50 signed char raydium_ode_element_material (int e, dReal erp, dReal cfm):</h3>
When two elements collides, there's two important parameters used for<br />
contact point generation : ERP and CFM.<br />
ERP means "Error Reduction Parameter", and its value is between 0 and 1 and<br />
CFM means "Constraint Force Mixing".<br />
Changing ERP and CFM values will change the way this element collides with<br />
other elements, providing a "material" notion.<br />
Raydium provides a few default values, see <tt>RAYDIUM_ODE_MATERIAL_*</tt> defines<br />
in <tt>raydium/ode.h</tt> file (hard, medium, soft, soft2, default, ...).<br />
<br />
For more informations, see ODE documentation, chapters 3.7 and 3.8.<br />
<br />
<h3><a name="raydium_ode_element_material_name"></a>46.51 signed char raydium_ode_element_material_name (char *name, dReal erp, dReal cfm):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_slip"></a>46.52 signed char raydium_ode_element_slip (int e, dReal slip):</h3>
Slip parameter is a complement of material values (ERP and CFM, see above).<br />
Raydium provides a few default values, see <tt>RAYDIUM_ODE_SLIP_*</tt> defines<br />
in <tt>raydium/ode.h</tt> file (ice, player, normal, default).<br />
<br />
<h3><a name="raydium_ode_element_slip_name"></a>46.53 signed char raydium_ode_element_slip_name (char *e, dReal slip):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_rotfriction"></a>46.54 signed char raydium_ode_element_rotfriction (int e, dReal rotfriction):</h3>
rotfriction stands for "Rotation Friction", "Rolling Friction",<br />
"Damping Effect", ...<br />
With <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a>, by default, when a sphere element is rolling over a flat ground,<br />
it will roll forever. Applying a rotfriction factor will solve this.<br />
A value of 0 will disable rotation friction.<br />
Example: <div class="code"><pre><span style="color: #339933;">#define ROTFRICTION     0.0005</span>
raydium_ode_element_rotfriction<span style="color: #66cc66;">&#40;</span>elem,ROTFRICTION<span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
<br />
<h3><a name="raydium_ode_element_rotfriction_name"></a>46.55 signed char raydium_ode_element_rotfriction_name (char *e, dReal rotfriction):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_linearvelocity_get"></a>46.56 dReal *raydium_ode_element_linearvelocity_get (int e):</h3>
Returns a pointer to element's linear velocity. Linear velocity is an<br />
array of 3 x dReal.<br />
Example: <div class="code"><pre>dReal *p;
p=raydium_ode_element_linearvelocity_get<span style="color: #66cc66;">&#40;</span>elem<span style="color: #66cc66;">&#41;</span>;
raydium_log<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"%f %f %f"</span>,p<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#93;</span>,p<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#93;</span>,p<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
Returned data is available only for the current frame.<br />
<br />
<h3><a name="raydium_ode_element_linearvelocity_get_name"></a>46.57 dReal *raydium_ode_element_linearvelocity_get_name(char *e):</h3>
Same as above using element name.<br />
<br />
<h3><a name="raydium_ode_element_linearvelocity_set"></a>46.58 void raydium_ode_element_linearvelocity_set (int e, dReal *vel):</h3>
Set element's linear velocity. Linear velocity is an<br />
array of 3 x dReal.<br />
<br />
<h3><a name="raydium_ode_element_linearvelocity_set_name"></a>46.59 void raydium_ode_element_linearvelocity_set_name (char * e, dReal *vel):</h3>
Same as above usign element's name.<br />
<br />
<h3><a name="raydium_ode_element_linearvelocity_set_3f"></a>46.60 void raydium_ode_element_linearvelocity_set_3f (int e, dReal velx, dReal vely, dReal velz):</h3>
Same as above, using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_element_linearvelocity_set_name_3f"></a>46.61 void raydium_ode_element_linearvelocity_set_name_3f(char *e, dReal vx, dReal vy, dReal vz):</h3>
Same as above using element name.<br />
<br />
<h3><a name="raydium_ode_element_angularvelocity_set"></a>46.62 void raydium_ode_element_angularvelocity_set (int e,dReal *avel):</h3>
Set element's angular velocity. Angular velocity is an<br />
array of 3 x dReal.<br />
<br />
<h3><a name="raydium_ode_element_angularvelocity_set_3f"></a>46.63 void raydium_ode_element_angularvelocity_set_3f (int e,dReal avelx,dReal avely,dReal avelz):</h3>
Same as above, 3 dReal.<br />
<br />
<h3><a name="raydium_ode_element_angularvelocity_set_name"></a>46.64 void raydium_ode_element_angularvelocity_set_name (char * e,dReal *avel):</h3>
Set element's angular velocity using it's name. Angular velocity is an<br />
array of 3 x dReal.<br />
<br />
<h3><a name="raydium_ode_element_angularvelocity_set_name_3f"></a>46.65 void raydium_ode_element_angularvelocity_set_name_3f (char * e,dReal avelx,dReal avely,dReal avelz):</h3>
Same as above, 3 dReal.<br />
<br />
<h3><a name="raydium_ode_element_angularvelocity_get"></a>46.66 dReal * raydium_ode_element_angularvelocity_get(int elem):</h3>
Return element angular velocity. Return is aun array of 3 real.<br />
<br />
<h3><a name="raydium_ode_element_angularvelocity_get_name"></a>46.67 dReal * raydium_ode_element_angularvelocity_get_name(char *elem):</h3>
Same as above using element name.<br />
<br />
<h3><a name="raydium_ode_element_OnBlow"></a>46.68 void raydium_ode_element_OnBlow (int e, void *<span class="missingpage">OnBlow</span><a href="http://wiki.raydium.org/wiki/OnBlow/edit">?</a>):</h3>
During an instantaneous explosion, all elements inside the blow's radius may<br />
fire an <span class="missingpage">OnBlow</span><a href="http://wiki.raydium.org/wiki/OnBlow/edit">?</a> callback (event), if set.<br />
<tt><span class="missingpage">OnBlow</span><a href="http://wiki.raydium.org/wiki/OnBlow/edit">?</a></tt> callback must follow this prototype :<br />
<tt>void blow_touched(int elem, dReal force, dReal max_force)</tt><br />
<br />
<tt>elem</tt> is the element id.<br />
<tt>force</tt> is the amount of force received from explosion.<br />
<tt>max_force</tt> is the amount of force at the core of the explosion.<br />
<br />
Sets <tt><span class="missingpage">OnBlow</span><a href="http://wiki.raydium.org/wiki/OnBlow/edit">?</a></tt> to <tt>NULL</tt> if you want to disable this callback.<br />
<br />
<h3><a name="raydium_ode_element_OnBlow_name"></a>46.69 void raydium_ode_element_OnBlow_name (char *e, void *<span class="missingpage">OnBlow</span><a href="http://wiki.raydium.org/wiki/OnBlow/edit">?</a>):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_OnDelete"></a>46.70 void raydium_ode_element_OnDelete (int e, void *<span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a>):</h3>
<span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a> callback is fired when someone or something tries to delete an element.<br />
This callback can cancel deletion, if needed.<br />
<br />
<tt><span class="missingpage">OnBlow</span><a href="http://wiki.raydium.org/wiki/OnBlow/edit">?</a></tt> callback must follow this prototype :<br />
<tt>int element_delete(int elem)</tt><br />
<tt>elem</tt> is the element id. Return 1 (true) to confirm deletion, of 0 to cancel.<br />
<br />
Sets <tt><span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a></tt> to <tt>NULL</tt> if you want to disable this callback.<br />
<br />
<h3><a name="raydium_ode_element_OnDelete_name"></a>46.71 void raydium_ode_element_OnDelete_name (char *e, void *<span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a>):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_object_OnDelete"></a>46.72 void raydium_ode_object_OnDelete (int o, void *<span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a>):</h3>
<span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a> callback is fired when someone or something tries to delete an object.<br />
This callback can cancel deletion, if needed.<br />
<br />
<tt><span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a></tt> callback must follow this prototype :<br />
<tt>int object_delete(int obj)</tt><br />
<tt>obj</tt> is the object id. Return 1 (true) to confirm deletion, of 0 to cancel.<br />
<br />
Sets <tt><span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a></tt> to <tt>NULL</tt> if you want to disable this callback.<br />
<br />
<h3><a name="raydium_ode_object_OnDelete_name"></a>46.73 void raydium_ode_object_OnDelete_name (char *o, void *<span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a>):</h3>
Same as above, but using object's name.<br />
<br />
<h3><a name="raydium_ode_element_gravity"></a>46.74 void raydium_ode_element_gravity (int e, signed char enable):</h3>
By default, gravity applies to every element of the scene. If you want<br />
to disable gravity for element <tt>e</tt>, set <tt>enable</tt> to 0 (false).<br />
You can restore gravity with <tt>enable</tt> sets to 1 (true).<br />
<br />
<h3><a name="raydium_ode_element_gravity_name"></a>46.75 void raydium_ode_element_gravity_name (char *e, signed char enable):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_ttl_set"></a>46.76 void raydium_ode_element_ttl_set (int e, int ttl):</h3>
TTL means Time To Live. Setting a TTL on an element will automatically<br />
delete this element when TTL expires.<br />
<br />
- TTL unit: <tt>ttl</tt> is given in ODE steps (see example, below).<br />
- TTL deletion may be canceled by <span class="missingpage">OnDelete</span><a href="http://wiki.raydium.org/wiki/OnDelete/edit">?</a> callback (see above).<br />
- TTL may be changed on the fly, at anytime.<br />
- a <tt>ttl</tt> value of -1 will disable TTL.<br />
<br />
example: <div class="code"><pre>raydium_ode_element_ttl_set<span style="color: #66cc66;">&#40;</span>elem,raydium_ode_physics_freq*<span style="color: #cc66cc;">5</span><span style="color: #66cc66;">&#41;</span>; <span style="color: #808080; font-style: italic;">// 5 seconds </span>
&nbsp;</pre>
</div><br />
<br />
<h3><a name="raydium_ode_element_ttl_set_name"></a>46.77 void raydium_ode_element_ttl_set_name (char *e, int ttl):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_rel2world"></a>46.78 signed char raydium_ode_element_rel2world(int element,dReal *rel,dReal *world):</h3>
Utility function that take a point on a <tt>element</tt> (<tt>rel</tt> is a dReal[3]) and<br />
return  that point's position or velocity in world coordinates (<tt>world</tt> is<br />
a dReal[3] too).<br />
<br />
No memory allocation is done here.<br />
<br />
This function can be used on normal and static elements.<br />
Note: This is a "Raydium clone" of dBodyGetRelPointPos.<br />
<br />
<h3><a name="raydium_ode_element_world2rel"></a>46.79 signed char raydium_ode_element_world2rel(int element,dReal *world,dReal *rel):</h3>
Inverse of <tt>raydium_ode_element_rel2world.</tt> Input (<tt>world</tt>) is in world<br />
coordinates and ouput (<tt>rel</tt>) is in <tt>element</tt>'s relative space.<br />
<br />
No memory allocation is done here.<br />
<br />
This function can be used on normal and static elements.<br />
Note: This is a "Raydium clone" of dBodyGetPosRelPoint.<br />
<br />
<h3><a name="raydium_ode_element_vect2world"></a>46.80 signed char raydium_ode_element_vect2world(int element,dReal *vect,dReal *world):</h3>
Given a vector expressed in the <tt>element</tt> coordinate system (dReal[3]),<br />
rotate it to the world coordinate system (<tt>world</tt>, dReal[3]).<br />
<br />
No memory allocation is done here.<br />
<br />
This function can be used on normal and static elements.<br />
Note: This is a "Raydium clone" of dBodyVectorToWorld.<br />
<br />
<h3><a name="raydium_ode_element_aabb_get"></a>46.81 signed char raydium_ode_element_aabb_get (int element, dReal * aabb):</h3>
AABB means Axis-Aligned Bounding Box. This function will return element's<br />
bounding box on X, Y and Z axis.<br />
<br />
<tt>aabb</tt> is a pointer to an array of 6 x dReal. The aabb array has<br />
elements (minx, maxx, miny, maxy, minz, maxz).<br />
No memory allocation is done.<br />
Will return 0 (false) in case of failure.<br />
<br />
<h3><a name="raydium_ode_element_aabb_get_name"></a>46.82 signed char raydium_ode_element_aabb_get_name (char *element, dReal * aabb):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_touched_get"></a>46.83 int raydium_ode_element_touched_get (int e):</h3>
Every element provide a "touched" flag. If element <tt>e</tt> is touching anything,<br />
this function will return 1 (true).<br />
<br />
<h3><a name="raydium_ode_element_touched_get_name"></a>46.84 int raydium_ode_element_touched_get_name (char *e):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_player_set"></a>46.85 signed char raydium_ode_element_player_set (int e, signed char isplayer):</h3>
<a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> provides a special behaviour for FPS style players, also<br />
named "standing geoms". The idea is simple : a player element is always<br />
upright, and you can set an arbitrary rotation angle around Z axis anytime.<br />
Sets <tt>isplayer</tt> to 1 (true) to transform element <tt>e</tt> into a "player element".<br />
<br />
<h3><a name="raydium_ode_element_player_set_name"></a>46.86 signed char raydium_ode_element_player_set_name (char *name, signed char isplayer):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_player_get"></a>46.87 signed char raydium_ode_element_player_get (int e):</h3>
Returns if element <tt>e</tt> is a "player element" (1, true) or not (0, false).<br />
See above for more informations about player elements.<br />
<br />
<h3><a name="raydium_ode_element_player_get_name"></a>46.88 signed char raydium_ode_element_player_get_name (char *name):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_player_angle"></a>46.89 signed char raydium_ode_element_player_angle (int e, dReal angle):</h3>
Sets "standing geom" Z rotation <tt>angle</tt> (radian) for element <tt>e</tt>.<br />
See above for more informations about player elements.<br />
<br />
<h3><a name="raydium_ode_element_player_angle_name"></a>46.90 signed char raydium_ode_element_player_angle_name (char *e, dReal angle):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_ground_texture_get"></a>46.91 int raydium_ode_element_ground_texture_get (int e):</h3>
Unsupported. Do not use for now.<br />
<br />
<h3><a name="raydium_ode_element_ground_texture_get_name"></a>46.92 int raydium_ode_element_ground_texture_get_name (char *e):</h3>
Unsupported. Do not use for now.<br />
<br />
<h3><a name="raydium_ode_element_object_get"></a>46.93 int raydium_ode_element_object_get (int e):</h3>
Since every element is owned by an object, this function will return<br />
the owner's object id.<br />
<br />
<h3><a name="raydium_ode_element_object_get_name"></a>46.94 int raydium_ode_element_object_get_name (char *e):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_object_sphere_add"></a>46.95 int raydium_ode_object_sphere_add (char *name, int group, dReal mass, dReal radius, signed char type, int tag, char *mesh):</h3>
This function will add an new "sphere" element to an object (<tt>group</tt>).<br />
You must provide:<br />
- <tt>name</tt>: <b>single</b> name for this new element.<br />
- <tt>group</tt>: owner object id.<br />
- <tt>mass</tt>: density of this new element. Mass will depend on radius.<br />
- <tt>radius</tt>: radius of the element sphere geometry. Raydium is able to<br />
detect this value with <tt>RAYDIUM_ODE_AUTODETECT</tt>. Things like<br />
<tt>RAYDIUM_ODE_AUTODETECT*2</tt> are ok, meaning "twice the detected radius".<br />
- <tt>type</tt>: <tt>RAYDIUM_ODE_STANDARD</tt> or <tt>RAYDIUM_ODE_STATIC</tt> (collide only,<br />
no physics).<br />
- <tt>tag</tt>: use this integer value as you want. The important thing is that<br />
this value is sent to network, and will be available on every connected peer.<br />
This tag must be greater or equal to 0. Suitable functions are available<br />
to read back this value later on an element.<br />
- <tt>mesh</tt>: 3D model used for rendering this element. Use an empty string to<br />
disable rendering (and not <tt>NULL</tt> !), and avoid <tt>RAYDIUM_ODE_AUTODETECT</tt><br />
int this case.<br />
<br />
<h3><a name="raydium_ode_object_box_add"></a>46.96 int raydium_ode_object_box_add (char *name, int group, dReal mass, dReal tx, dReal ty, dReal tz, signed char type, int tag, char *mesh):</h3>
This function will add an new "box" element to an object (<tt>group</tt>).<br />
Arguments are the same as <tt>raydium_ode_object_sphere_add</tt> (see above) but<br />
<tt>tx</tt>, <tt>ty</tt> and <tt>tz</tt>, used for box sizes. As for spheres, you can<br />
use <tt>RAYDIUM_ODE_AUTODETECT</tt>. Give this value only for <tt>tx</tt>, this will<br />
automatically apply to <tt>ty</tt> and <tt>tz</tt>.<br />
Again, Things like  <tt>RAYDIUM_ODE_AUTODETECT*2</tt> are ok, meaning<br />
"twice the detected size".<br />
<br />
<h3><a name="raydium_ode_object_capsule_add"></a>46.97 int raydium_ode_object_capsule_add(char *name, int group, dReal mass, dReal radius, dReal length, signed char type, int tag, char *mesh):</h3>
This function will add an new "capsule" (capped cylinder) element to an<br />
object (<tt>group</tt>).<br />
You must provide:<br />
- <tt>name</tt>: <b>single</b> name for this new element.<br />
- <tt>group</tt>: owner object id.<br />
- <tt>mass</tt>: density of this new element. Mass will depend on radius and<br />
length.<br />
- <tt>radius</tt>: radius of the internal cylinder and caps. Like boxes and<br />
spheres, you can use <tt>RAYDIUM_ODE_AUTODETECT</tt>, for radius.<br />
Things like <tt>RAYDIUM_ODE_AUTODETECT*0.5</tt> are valid, too.<br />
- <tt>length</tt>: full length from one end to the other (longest side).<br />
- <tt>type</tt>: <tt>RAYDIUM_ODE_STANDARD</tt> or <tt>RAYDIUM_ODE_STATIC</tt> (collide only,<br />
no physics).<br />
- <tt>tag</tt>: use this integer value as you want. The important thing is that<br />
this value is sent to network, and will be available on every connected peer.<br />
This tag must be greater or equal to 0. Suitable functions are available<br />
to read back this value later on an element.<br />
- <tt>mesh</tt>: 3D model used for rendering this element. Use an empty string to<br />
disable rendering (and not <tt>NULL</tt> !), and avoid <tt>RAYDIUM_ODE_AUTODETECT</tt><br />
int this case.<br />
<tt>IMPORTANT</tt>: The capsules are ALWAYS CREATED IN Z AXIS. Your meshes should<br />
take this into account.So, the capsule meshes should have the length in Z<br />
axis.<br />
<br />
<h3><a name="raydium_ode_element_ray_attach"></a>46.98 signed char raydium_ode_element_ray_attach(int element, dReal length, dReal dirx, dReal diry, dReal dirz):</h3>
This function will attach a new ray to <tt>element</tt>. This may be used as a<br />
sensor, "hitscan" line, intersection test, ...<br />
Then you can get from this ray things like distance between the start<br />
of the ray (element's center) and the first "touched" element. You will also<br />
find wich element was touched, and where. The same applies for the last touched<br />
element.<br />
Do not try to retrieve informations until next frame.<br />
<br />
You must provide ray's length (the ray won't detect "things" over that point),<br />
and direction vector (relative to element).<br />
<br />
You can set up to <tt>RAYDIUM_ODE_MAX_RAYS</tt> rays per element.<br />
<br />
Warning, ray are linked to GLOBAL object, so they will detect EVERY element,<br />
even if owned by the same object ! (only <tt>element</tt> is never reported).<br />
<br />
If you want to filter wich elements are used to generate rays'informations,<br />
you can use <tt>raydium_ode_RayCallback</tt>. This callback is following the<br />
same prototype as <tt>raydium_ode_CollideCallback</tt> (see at the top of<br />
this chapter). In this callback, you can use 3 different return values:<br />
- <tt>RAYDIUM_ODE_RAY_CONTACT_IGNORE</tt> if you don't want this "contact" for<br />
ray informations,<br />
- <tt>RAYDIUM_ODE_RAY_CONTACT_REPORT</tt> if you want to report the contact: it will<br />
update informations for <tt>raydium_ode_element_ray_get()</tt>.<br />
- <tt>RAYDIUM_ODE_RAY_CONTACT_CREATE</tt> will report the contact, and collide !<br />
<br />
Return 0 if you don't want this "contact" for ray informations,<br />
or 1 if you want normal behaviour. The first element in this callback is always<br />
the one with the ray.<br />
<br />
This functions returns the ray id for this element of -1 when it fails.<br />
<br />
<h3><a name="raydium_ode_element_ray_attach_name"></a>46.99 signed char raydium_ode_element_ray_attach_name(char *element, dReal length, dReal dirx, dReal diry, dReal dirz):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_ray_delete"></a>46.100 signed char raydium_ode_element_ray_delete(int element, int ray_id):</h3>
Delete ray <tt>ray_id</tt> from <tt>element</tt>. No more ray "reports" will be available<br />
after this call.<br />
<br />
<h3><a name="raydium_ode_element_ray_delete_name"></a>46.101 signed char raydium_ode_element_ray_delete_name(char *element, int ray_id):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_ray_get"></a>46.102 signed char raydium_ode_element_ray_get(int element, int ray_id, raydium_ode_Ray *result):</h3>
This function allows you to retrieve informations about ray.<br />
<br />
Here you are a sample of <tt>raydium_ode_Ray</tt> structure with<br />
interesting fields:<br />
<div class="code"><pre><span style="color: #993333;">typedef</span> <span style="color: #993333;">struct</span> raydium_ode_Ray
<span style="color: #66cc66;">&#123;</span>
<span style="color: #993333;">signed</span> <span style="color: #993333;">char</span> state; <span style="color: #808080; font-style: italic;">// is this ray active ?</span>
dReal   rel_dir<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span>;
dReal   rel_pos<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span>;
<span style="color: #808080; font-style: italic;">// farest contact</span>
dReal   max_dist;
<span style="color: #993333;">int</span>     max_elem;   <span style="color: #808080; font-style: italic;">// touched element, -1 if no element was touched</span>
dReal   max_pos<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span>;
<span style="color: #808080; font-style: italic;">// nearest contact</span>
dReal   min_dist;
<span style="color: #993333;">int</span>     min_elem;   <span style="color: #808080; font-style: italic;">// touched element, -1 if no element was touched</span>
dReal   min_pos<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span>;
<span style="color: #66cc66;">&#125;</span> raydium_ode_Ray;</pre>
</div><br />
<br />
Obviously, this function won't allocate any memory, you must provide a<br />
valid pointer to a <tt>raydium_ode_Ray</tt> struct.<br />
<br />
<h3><a name="raydium_ode_element_ray_get_name"></a>46.103 signed char raydium_ode_element_ray_get_name(char *element, int ray_id, raydium_ode_Ray *result):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_ray_set_length"></a>46.104 signed char raydium_ode_element_ray_set_length(int element, int ray_id, dReal length):</h3>
Change ray length to choose range detection length.<br />
<br />
<h3><a name="raydium_ode_element_ray_set_length_name"></a>46.105 signed char raydium_ode_element_ray_set_length_name(char *element, int ray_id, dReal length):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_ray_pos"></a>46.106 signed char raydium_ode_element_ray_pos(int element, int ray_id, dReal *pos):</h3>
Moves <tt>ray_id</tt> ray of <tt>element</tt> to relative <tt>pos</tt>.<br />
<br />
<h3><a name="raydium_ode_element_ray_pos_name"></a>46.107 signed char raydium_ode_element_ray_pos_name(char *element, int ray_id, dReal *pos):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_ray_pos_name_3f"></a>46.108 signed char raydium_ode_element_ray_pos_name_3f(char *element, int ray_id, dReal px, dReal py, dReal pz):</h3>
Same as above, but using 3 float values.<br />
<br />
<h3><a name="raydium_ode_element_fix"></a>46.109 int raydium_ode_element_fix (char *name, int *elem, int nelems, signed char keepgeoms):</h3>
Experimental code.<br />
<br />
The idea here is to create a bounding single element for a group of elements.<br />
You must provide:<br />
- <tt>name</tt>: the new bounding element's name.<br />
- <tt>elems</tt>: an array of all elements to fix (id array).<br />
- <tt>nelems</tt>: the number of elements in <tt>elems</tt> array.<br />
- <tt>keepgeoms</tt>: set to 0.<br />
<br />
You can only fix standard elements (no statics) and all elements must be<br />
owned by the same object.<br />
<br />
<h3><a name="raydium_ode_element_unfix"></a>46.110 void raydium_ode_element_unfix (int e):</h3>
Experimental code. Unimplemented, yet.<br />
Symmetric function, see <tt>raydium_ode_element_fix</tt>.<br />
<br />
<h3><a name="raydium_ode_element_mass"></a>46.111 void raydium_ode_element_mass(int elem, dReal mass):</h3>
Change <tt>mass</tt> the the <tt>elem</tt> element. Obviously, you can't change the<br />
mass of static element.<br />
<br />
<h3><a name="raydium_ode_element_mass_name"></a>46.112 void raydium_ode_element_mass_name(char *elem, dReal mass):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_mass_set"></a>46.113 void raydium_ode_element_mass_set(int elem,dReal mass):</h3>
Alias for <tt>raydium_ode_element_mass()</tt>.<br />
<br />
<h3><a name="raydium_ode_element_mass_set_name"></a>46.114 void raydium_ode_element_mass_set_name(char *elem, dReal mass):</h3>
Alias for <tt>raydium_ode_element_mass_name()</tt>.<br />
<br />
<h3><a name="raydium_ode_element_mass_get"></a>46.115 dReal raydium_ode_element_mass_get(int elem):</h3>
Return <tt>mass</tt> of the <tt>elem</tt> element.<br />
Return only the mass of the element not the inertia matrix.<br />
<br />
<h3><a name="raydium_ode_element_mass_get_name"></a>46.116 dReal raydium_ode_element_mass_get_name(char * elem):</h3>
Same as above using element name.<br />
<br />
<h3><a name="raydium_ode_element_move"></a>46.117 void raydium_ode_element_move (int elem, dReal * pos):</h3>
This function will move element <tt>elem</tt> to <tt>pos</tt>.<br />
<tt>pos</tt> is a dReal array of 3 values (x,y,z).<br />
Warning: arbitrary moves may lead to unwanted behaviours.<br />
<br />
<h3><a name="raydium_ode_element_move_name"></a>46.118 void raydium_ode_element_move_name (char *name, dReal * pos):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_move_3f"></a>46.119 void raydium_ode_element_move_3f(int elem, dReal x,dReal y, dReal z):</h3>
Same as <tt>raydium_ode_element_move</tt>, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_element_move_name_3f"></a>46.120 void raydium_ode_element_move_name_3f (char *name, dReal x, dReal y, dReal z):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_rotate"></a>46.121 void raydium_ode_element_rotate (int elem, dReal * rot):</h3>
This function will rotate element <tt>elem</tt> using <tt>rot</tt>.<br />
<tt>rot</tt> is a dReal array of 3 values (rx,ry,rz), in radians.<br />
Warning: arbitrary rotations may lead to unwanted behaviours.<br />
<br />
<h3><a name="raydium_ode_element_rotate_3f"></a>46.122 void raydium_ode_element_rotate_3f (int elem, dReal rx, dReal ry, dReal rz):</h3>
Same as <tt>raydium_ode_element_rotate</tt>, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_element_rotate_name"></a>46.123 void raydium_ode_element_rotate_name (char *name, dReal * rot):</h3>
Same as <tt>raydium_ode_element_rotate</tt>, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_rotateq"></a>46.124 void raydium_ode_element_rotateq (int elem, dReal * rot):</h3>
This function will rotate element <tt>elem</tt> using <tt>rot</tt> quaternion.<br />
<tt>rot</tt> is a dReal array of 4 values.<br />
Warning: arbitrary rotations may lead to unwanted behaviours.<br />
<br />
<h3><a name="raydium_ode_element_rotateq_name"></a>46.125 void raydium_ode_element_rotateq_name (char *name, dReal * rot):</h3>
Same as <tt>raydium_ode_element_rotateq</tt>, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_rotate_name_3f"></a>46.126 void raydium_ode_element_rotate_name_3f (char *name, dReal rx, dReal ry, dReal rz):</h3>
Same as <tt>raydium_ode_element_rotate_name</tt>, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_object_rotate"></a>46.127 void raydium_ode_object_rotate(int obj, dReal *rot):</h3>
This function will try to rotate object <tt>obj</tt>.<br />
For now, rotation is done around the last element of the object.<br />
<tt>rot</tt> is a dReal array of 3 values (rx,ry,rz), in radians.<br />
Warning: arbitrary rotations may lead to unwanted behaviours.<br />
<br />
<h3><a name="raydium_ode_object_rotate_name"></a>46.128 void raydium_ode_object_rotate_name(char *obj, dReal *rot):</h3>
Same as above, but using object's name.<br />
<br />
<h3><a name="raydium_ode_object_rotate_name_3f"></a>46.129 void raydium_ode_object_rotate_name_3f(char *obj, dReal rx, dReal ry, dReal rz):</h3>
Same as above, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_object_move"></a>46.130 void raydium_ode_object_move (int obj, dReal * pos):</h3>
This function will move object <tt>obj</tt> to <tt>pos</tt>.<br />
Obviously, every element of object will be moved.<br />
<tt>pos</tt> is a dReal array of 3 values (x,y,z).<br />
Warning: arbitrary moves may lead to unwanted behaviours.<br />
<br />
<h3><a name="raydium_ode_object_move_3f"></a>46.131 void raydium_ode_object_move_3f (int obj, dReal x, dReal y, dReal z):</h3>
Same as above, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_object_move_name"></a>46.132 void raydium_ode_object_move_name (char *name, dReal * pos):</h3>
Same as above, but using object's name.<br />
<br />
<h3><a name="raydium_ode_object_move_name_3f"></a>46.133 void raydium_ode_object_move_name_3f (char *name, dReal x, dReal y, dReal z):</h3>
Same as above, but using 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_object_rotateq"></a>46.134 void raydium_ode_object_rotateq (int obj, dReal * rot):</h3>
This function will try to rotate object <tt>obj</tt> using <tt>rot</tt> quaternion.<br />
For now, rotation is done around the last element of the object.<br />
<tt>rot</tt> is a dReal array of 4 values.<br />
Warning: arbitrary rotations may lead to unwanted behaviours.<br />
<br />
<h3><a name="raydium_ode_object_rotateq_name"></a>46.135 void raydium_ode_object_rotateq_name (char *obj, dReal * rot):</h3>
Same as above, but using object's name.<br />
<br />
<h3><a name="raydium_ode_element_rotate_direction"></a>46.136 void raydium_ode_element_rotate_direction (int elem, signed char <span class="missingpage">Force0OrVel1</span><a href="http://wiki.raydium.org/wiki/Force0OrVel1/edit">?</a>):</h3>
This function will rotate element <tt>elem</tt> from its force or velocity.<br />
Sets <tt><span class="missingpage">Force0OrVel1</span><a href="http://wiki.raydium.org/wiki/Force0OrVel1/edit">?</a></tt> to <tt>0</tt> if you want to align element using its<br />
force or <tt>1</tt> using its linear velocity.<br />
Warning: arbitrary rotations may lead to unwanted behaviours.<br />
<br />
<h3><a name="raydium_ode_element_rotate_direction_name"></a>46.137 void raydium_ode_element_rotate_direction_name (char *e, signed char <span class="missingpage">Force0OrVel1</span><a href="http://wiki.raydium.org/wiki/Force0OrVel1/edit">?</a>):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_mesh_scale"></a>46.138 void raydium_ode_element_mesh_scale(int elem, float scale_factor):</h3>
Allows to rescale the mesh of element <tt>elem</tt>. This only applies to the mesh,<br />
the physical properties are not modified (geometry size, mass, ...)<br />
Shadows are rescaled, too.<br />
<br />
<h3><a name="raydium_ode_element_mesh_scale_name"></a>46.139 void raydium_ode_element_mesh_scale_name(char *e, float scale_factor):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_data_set"></a>46.140 void raydium_ode_element_data_set (int e, void *data):</h3>
You may want to link some data to any element. If so, use this function<br />
and provide a pointer to your <tt>data</tt> for element <tt>e</tt>.<br />
<br />
<h3><a name="raydium_ode_element_data_set_name"></a>46.141 void raydium_ode_element_data_set_name (char *e, void *data):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_data_get"></a>46.142 void *raydium_ode_element_data_get (int e):</h3>
This function will return a pointer to your linked data, if any (see above).<br />
<br />
<h3><a name="raydium_ode_element_data_get_name"></a>46.143 void *raydium_ode_element_data_get_name (char *e):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_tag_get"></a>46.144 int raydium_ode_element_tag_get (int e):</h3>
When you create a new element, you must provide a "tag". This function<br />
allows you to get back the tag's value, even on "distant" elements.<br />
<br />
<h3><a name="raydium_ode_element_tag_get_name"></a>46.145 int raydium_ode_element_tag_get_name (char *e):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_object_data_set"></a>46.146 void raydium_ode_object_data_set (int o, void *data):</h3>
You may want to link some data to any object. If so, use this function<br />
and provide a pointer to your <tt>data</tt> for element <tt>e</tt>.<br />
<br />
<h3><a name="raydium_ode_object_data_set_name"></a>46.147 void raydium_ode_object_data_set_name (char *o, void *data):</h3>
Same as above, but using object's name.<br />
<br />
<h3><a name="raydium_ode_object_data_get"></a>46.148 void *raydium_ode_object_data_get (int e):</h3>
This function will return a pointer to your linked data, if any (see above).<br />
<br />
<h3><a name="raydium_ode_object_data_get_name"></a>46.149 void *raydium_ode_object_data_get_name (char *e):</h3>
Same as above, but using object's name.<br />
<br />
<h3><a name="raydium_ode_joint_suspension"></a>46.150 void raydium_ode_joint_suspension (int j, dReal erp, dReal cfm):</h3>
ERP means "Error Reduction Parameter", and its value is between 0 and 1 and<br />
CFM means "Constraint Force Mixing".<br />
Changing ERP and CFM values will change joint energy absorption and restitution.<br />
<br />
For more informations, see ODE documentation, chapters 3.7 and 3.8.<br />
<br />
Notice: Consider this function as advanced.<br />
<br />
Warning: On a universal joint, this function will change ERP and CFM for<br />
limits, and not for the joint itself ! (experimental feature)<br />
<br />
<h3><a name="raydium_ode_joint_suspension_name"></a>46.151 void raydium_ode_joint_suspension_name (char *j, dReal erp, dReal cfm):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_joint_attach_hinge2"></a>46.152 int raydium_ode_joint_attach_hinge2 (char *name, int elem1, int elem2, dReal axe1x, dReal axe1y, dReal axe1z, dReal axe2x, dReal axe2y, dReal axe2z):</h3>
Will create a new joint between two elements (<tt>elem1</tt> and <tt>elem2</tt>).<br />
<span class="missingpage">Hinge2</span><a href="http://wiki.raydium.org/wiki/Hinge2/edit">?</a> is a very specialized joint, perfect for car wheel's for example.<br />
<br />
<img src="http://ode.org/pix/hinge2.jpg" alt="hinge2" /><br />
<br />
"Axis 1 is specified relative to body 1 (this would be the steering<br />
axis if body 1 is the chassis). Axis 2 is specified relative to body 2<br />
(this would be the wheel axis if body 2 is the wheel)."<br />
<br />
You must also provide joint's <tt>name</tt>.<br />
<br />
Raydium provides <tt>RAYDIUM_ODE_JOINT_SUSP_DEFAULT_AXES</tt> define, useful for<br />
most chassis-wheel joints, and <tt>RAYDIUM_ODE_JOINT_AXE_X</tt>, Y and Z for<br />
other cases.<br />
<br />
You cannot attach a static element.<br />
<br />
<h3><a name="raydium_ode_joint_attach_hinge2_name"></a>46.153 int raydium_ode_joint_attach_hinge2_name (char *name, char *elem1, char *elem2, dReal axe1x, dReal axe1y, dReal axe1z, dReal axe2x, dReal axe2y, dReal axe2z):</h3>
Same as above, but using elements's names.<br />
<br />
<h3><a name="raydium_ode_joint_attach_universal"></a>46.154 int raydium_ode_joint_attach_universal (char *name, int elem1, int elem2, dReal posx, dReal posy, dReal posz, dReal axe1x, dReal axe1y, dReal axe1z, dReal axe2x, dReal axe2y, dReal axe2z):</h3>
Will create a new joint between two elements (<tt>elem1</tt> and <tt>elem2</tt>).<br />
<br />
<img src="http://ode.org/pix/universal.jpg" alt="universal" /><br />
<br />
"Given axis 1 on body 1, and axis 2 on body 2 that is perpendicular to<br />
axis 1, it keeps them perpendicular. In other words, rotation of the two<br />
bodies about the direction perpendicular to the two axes will be equal."<br />
<br />
"Axis 1 and axis 2 should be perpendicular to each other."<br />
<br />
You must also provide joint's <tt>name</tt>, and joint position (<tt>posx</tt>, <tt>posy</tt>,<br />
<tt>posz</tt>) in world coordinates.<br />
<br />
Raydium provides <tt>RAYDIUM_ODE_JOINT_AXE_X</tt>, <tt>RAYDIUM_ODE_JOINT_AXE_Y</tt><br />
and <tt>RAYDIUM_ODE_JOINT_AXE_Z</tt> defines, that may help.<br />
<br />
You cannot attach a static element.<br />
<br />
<h3><a name="raydium_ode_joint_attach_universal_name"></a>46.155 int raydium_ode_joint_attach_universal_name (char *name, char *elem1, char *elem2, dReal posx, dReal posy, dReal posz, dReal axe1x, dReal axe1y, dReal axe1z, dReal axe2x, dReal axe2y, dReal axe2z):</h3>
Same as above, but using elements's names.<br />
<br />
<h3><a name="raydium_ode_joint_attach_hinge"></a>46.156 int raydium_ode_joint_attach_hinge (char *name, int elem1, int elem2, dReal posx, dReal posy, dReal posz, dReal axe1x, dReal axe1y, dReal axe1z):</h3>
Will create a new joint between two elements (<tt>elem1</tt> and <tt>elem2</tt>).<br />
<br />
<img src="http://ode.org/pix/hinge.jpg" alt="hinge" /><br />
<br />
You must provide joint's <tt>name</tt>, and joint position (<tt>posx</tt>, <tt>posy</tt>,<br />
<tt>posz</tt>) in world coordinates.<br />
<br />
Raydium provides <tt>RAYDIUM_ODE_JOINT_AXE_X</tt>, <tt>RAYDIUM_ODE_JOINT_AXE_Y</tt><br />
and <tt>RAYDIUM_ODE_JOINT_AXE_Z</tt> defines, that may help for setting axis.<br />
<br />
You cannot attach a static element.<br />
<br />
<h3><a name="raydium_ode_joint_attach_hinge_name"></a>46.157 int raydium_ode_joint_attach_hinge_name (char *name, char *elem1, char *elem2, dReal posx, dReal posy, dReal posz, dReal axe1x, dReal axe1y, dReal axe1z):</h3>
Same as above, but using elements's names.<br />
<br />
<h3><a name="raydium_ode_joint_attach_fixed"></a>46.158 int raydium_ode_joint_attach_fixed (char *name, int elem1, int elem2):</h3>
Will create a new joint between two elements (<tt>elem1</tt> and <tt>elem2</tt>).<br />
<br />
Fixed joint is more a hack than a real joint. Use only when it's absolutely<br />
necessary, and have a look to <tt>raydium_ode_element_fix</tt>.<br />
<br />
You must provide joint's <tt>name</tt><br />
You cannot attach a static element.<br />
<br />
<h3><a name="raydium_ode_joint_attach_fixed_name"></a>46.159 int raydium_ode_joint_attach_fixed_name (char *name, char *elem1, char *elem2):</h3>
Same as above, but using elements's names.<br />
<br />
<h3><a name="raydium_ode_joint_hinge_limits"></a>46.160 void raydium_ode_joint_hinge_limits (int j, dReal lo, dReal hi):</h3>
Sets low (<tt>lo</tt>) and high (<tt>hi</tt>) limits for hinge joint <tt>j</tt>.<br />
<br />
<h3><a name="raydium_ode_joint_hinge_limits_name"></a>46.161 void raydium_ode_joint_hinge_limits_name (char *j, dReal lo, dReal hi):</h3>
Same as above, but using joint's name.<br />
<br />
<h3><a name="raydium_ode_joint_universal_limits"></a>46.162 void raydium_ode_joint_universal_limits (int j, dReal lo1, dReal hi1, dReal lo2, dReal hi2):</h3>
Sets low and hight limits for axe 1 (<tt>lo1</tt>, <tt>hi1</tt>) and axe 2 (<tt>lo2</tt>,<br />
<tt>hi2</tt>) for universal joint <tt>j</tt>. See <tt>raydium_ode_joint_attach_universal</tt><br />
for more informations about universal joint axes.<br />
<br />
<h3><a name="raydium_ode_joint_universal_limits_name"></a>46.163 void raydium_ode_joint_universal_limits_name (char *j, dReal lo1, dReal hi1, dReal lo2, dReal hi2):</h3>
Same as above, but using joint's name.<br />
<br />
<h3><a name="raydium_ode_joint_hinge2_block"></a>46.164 void raydium_ode_joint_hinge2_block (int j, signed char block):</h3>
Sometime, you may need to block rotation for first axe of hinge2 joints, for<br />
example with rear wheels of a car. If so, set <tt>block</tt> to 1 (true).<br />
Setting <tt>block</tt> back to 0 (false) will restore standard rotation behaviour.<br />
<br />
<h3><a name="raydium_ode_joint_hinge2_block_name"></a>46.165 void raydium_ode_joint_hinge2_block_name (char *name, signed char block):</h3>
Same as above, but using joint's name.<br />
<br />
<h3><a name="raydium_ode_joint_hinge2_limits"></a>46.166 void raydium_ode_joint_hinge2_limits (int j, dReal lo, dReal hi):</h3>
Sets low (<tt>lo</tt>) and high (<tt>hi</tt>) limits for hinge2 (aka suspet) joint <tt>j</tt>.<br />
<br />
<h3><a name="raydium_ode_joint_hinge2_limits_name"></a>46.167 void raydium_ode_joint_hinge2_limits_name (char *j, dReal lo, dReal hi):</h3>
Same as above, but using joint's name.<br />
<br />
<h3><a name="raydium_ode_joint_delete_callback"></a>46.168 void raydium_ode_joint_delete_callback (int j, void (*f) (int)):</h3>
Since joints may break (see <tt>raydium_ode_joint_break_force</tt>), it may be<br />
useful to get a callback on joint deletion.<br />
This callback must this prototype:<br />
<tt>void joint_delete(int jid)</tt><br />
<tt>jid</tt> is the deleted joint id. You can't cancel joint deletion (yet).<br />
<br />
<h3><a name="raydium_ode_joint_delete_callback_name"></a>46.169 void raydium_ode_joint_delete_callback_name (char *name, void (*f) (int)):</h3>
Same as above, but using joint's name.<br />
<br />
<h3><a name="raydium_ode_joint_break_force"></a>46.170 void raydium_ode_joint_break_force (int j, dReal maxforce):</h3>
Setting a non-zero <tt>maxforce</tt> on a joint will transform this joint into<br />
a "breakable joint". There's no unit for <tt>maxforce</tt>, you'll probably have<br />
to find the suitable value empirically.<br />
<br />
<h3><a name="raydium_ode_joint_break_force_name"></a>46.171 void raydium_ode_joint_break_force_name (char *name, dReal maxforce):</h3>
Same as above, but using joint's name.<br />
<br />
<h3><a name="raydium_ode_joint_elements_get"></a>46.172 void raydium_ode_joint_elements_get (int j, int *e1, int *e2):</h3>
Will return elements (<tt>e1</tt> and <tt>e2</tt>) linked to joint <tt>j</tt>.<br />
<br />
<h3><a name="raydium_ode_joint_elements_get_name"></a>46.173 void raydium_ode_joint_elements_get_name (char *j, int *e1, int *e2):</h3>
Same as above, but using joint's name.<br />
<br />
<h3><a name="raydium_ode_motor_update_joints_data_internal"></a>46.174 void raydium_ode_motor_update_joints_data_internal (int j):</h3>
Internal function.<br />
<br />
<h3><a name="raydium_ode_motor_speed"></a>46.175 void raydium_ode_motor_speed (int j, dReal force):</h3>
Sets motor <tt>j</tt> speed parameter. This is only suitable for "engine"<br />
and "rocket" type motors. There's no special unit for <tt>force</tt>.<br />
<br />
<h3><a name="raydium_ode_motor_speed_name"></a>46.176 void raydium_ode_motor_speed_name (char *name, dReal force):</h3>
Same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_motor_power_max"></a>46.177 void raydium_ode_motor_power_max (int j, dReal power):</h3>
Sets motor <tt>j</tt> max power parameter. This is only suitable for "engine"<br />
and "angular" motors. There's no special unit for <tt>power</tt>.<br />
<br />
<h3><a name="raydium_ode_motor_power_max_name"></a>46.178 void raydium_ode_motor_power_max_name (char *name, dReal power):</h3>
Same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_motor_angle"></a>46.179 void raydium_ode_motor_angle (int j, dReal angle):</h3>
Sets motor <tt>j</tt> angle parameter. This is only suitable for "angular" motors.<br />
<tt>angle</tt> has the units of radians.<br />
<br />
<h3><a name="raydium_ode_motor_angle_name"></a>46.180 void raydium_ode_motor_angle_name (char *motor, dReal angle):</h3>
Same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_motor_gears_set"></a>46.181 void raydium_ode_motor_gears_set (int m, dReal * gears, int n_gears):</h3>
Sets a gearbox for motor <tt>m</tt> (only suitable for "engine" motors).<br />
<tt>gears</tt> is an array of dReal values, with all gears factors).<br />
<tt>n_gears</tt> is the array length (total number of gears for this gearbox).<br />
example:<br />
<div class="code"><pre><span style="color: #808080; font-style: italic;">// rear,1,2,3,4,5</span>
dReal gears<span style="color: #66cc66;">&#91;</span><span style="color: #66cc66;">&#93;</span>=<span style="color: #66cc66;">&#123;</span>-<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">4</span>,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">4</span>,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">6</span>,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">8</span>,<span style="color: #cc66cc;">0</span>.<span style="color: #cc66cc;">9</span>,<span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#125;</span>;
...
<span style="color: #202020;">raydium_ode_motor_gears_set</span><span style="color: #66cc66;">&#40;</span>main_engine,gears,<span style="color: #cc66cc;">6</span><span style="color: #66cc66;">&#41;</span>;</pre>
</div><br />
If you want to cancel a gearbox, set a gearbox with only one gear with 1.0<br />
factor value.<br />
<br />
Raydium gearboxes implementation is very naive, with 100% output.<br />
For example, a 0.5 gear factor will divide maximum speed by two, but will<br />
provide twice the normal torque.<br />
<br />
<h3><a name="raydium_ode_motor_gears_set_name"></a>46.182 void raydium_ode_motor_gears_set_name (char *m, dReal * gears, int n_gears):</h3>
Same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_motor_gear_change"></a>46.183 void raydium_ode_motor_gear_change (int m, int gear):</h3>
Switch motor <tt>m</tt> to <tt>gear</tt>.<br />
<br />
<h3><a name="raydium_ode_motor_gear_change_name"></a>46.184 void raydium_ode_motor_gear_change_name (char *m, int gear):</h3>
Same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_motor_gear_ratio"></a>46.185 dReal raydium_ode_motor_gear_ratio(int m):</h3>
Returns the current gear ratio for motor <tt>m</tt>.<br />
<br />
<h3><a name="raydium_ode_motor_gear_ratio_name"></a>46.186 dReal raydium_ode_motor_gear_ratio_name(char *m):</h3>
Same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_element_pos_get"></a>46.187 dReal *raydium_ode_element_pos_get (int j):</h3>
This function will return element <tt>j</tt>'s current position, as an array of<br />
3 dReal values.<br />
example:<br />
<div class="code"><pre>dReal *pos;
dReal pos_copy;
...
<span style="color: #202020;">pos</span>=raydium_ode_element_pos_get<span style="color: #66cc66;">&#40;</span>my_element<span style="color: #66cc66;">&#41;</span>;
raydium_log<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"%f %f %f"</span>,pos<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#93;</span>,pos<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#93;</span>,pos<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#41;</span>;
memcpy<span style="color: #66cc66;">&#40;</span>pos_copy,pos,<span style="color: #993333;">sizeof</span><span style="color: #66cc66;">&#40;</span>dReal<span style="color: #66cc66;">&#41;</span>*<span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#41;</span>;
...</pre>
</div><br />
Returned data is available only for the current frame.<br />
<br />
<h3><a name="raydium_ode_element_pos_get_name"></a>46.188 dReal *raydium_ode_element_pos_get_name (char *name):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_rotq_get"></a>46.189 signed char raydium_ode_element_rotq_get (int j, dReal * res):</h3>
This function will return element <tt>j</tt>'s current rotation, as an array of<br />
4 dReal values (quaternion), thru <tt>res</tt>.<br />
No memory allocation will be done.<br />
<br />
<h3><a name="raydium_ode_element_rotq_get_name"></a>46.190 signed char raydium_ode_element_rotq_get_name (char *name, dReal * res):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_rot_get"></a>46.191 signed char raydium_ode_element_rot_get (int e, dReal * rx, dReal * ry, dReal * rz):</h3>
This code is experimental. It should returns element <tt>e</tt>'s current rotation<br />
using 3 dReal angles, in radians. Do not apply back values to the<br />
element since there're not "ODE formated".<br />
<br />
<h3><a name="raydium_ode_element_rot_get_name"></a>46.192 signed char raydium_ode_element_rot_get_name (char *e, dReal * rx, dReal * ry, dReal * rz):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_sound_update"></a>46.193 void raydium_ode_element_sound_update (int e, int source):</h3>
This function is a small bridge between <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> and sound API, updating sound<br />
<tt>source</tt> using element <tt>e</tt>'s position.<br />
<br />
<h3><a name="raydium_ode_element_sound_update_name"></a>46.194 void raydium_ode_element_sound_update_name (char *e, int source):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_element_RelPointPos"></a>46.195 void raydium_ode_element_RelPointPos (int e, dReal px, dReal py, dReal pz, dReal * res):</h3>
Give a point (<tt>px</tt>, <tt>py</tt> and <tt>pz</tt>) on element <tt>e</tt> to this function,<br />
and il will return this point in global coordinates (<tt>res</tt>).<br />
Returned data is available only for the current frame.<br />
<br />
<h3><a name="raydium_ode_element_RelPointPos_name"></a>46.196 void raydium_ode_element_RelPointPos_name (char *e, dReal px, dReal py, dReal pz, dReal * res):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_motor_create"></a>46.197 int raydium_ode_motor_create (char *name, int obj, signed char type):</h3>
This function will create a new motor, using <tt>name</tt> (single), for<br />
object <tt>obj</tt>, with <tt>type</tt>. As said before, available types are<br />
<tt>RAYDIUM_ODE_MOTOR_ENGINE</tt>, <tt>RAYDIUM_ODE_MOTOR_ANGULAR</tt> and<br />
<tt>RAYDIUM_ODE_MOTOR_ROCKET</tt>. See the first part of this chapter for more<br />
informations about motor types.<br />
<br />
<h3><a name="raydium_ode_motor_attach"></a>46.198 void raydium_ode_motor_attach (int motor, int joint, int joint_axe):</h3>
This function will link <tt>motor</tt> to <tt>joint</tt>, on axe <tt>joint_axe</tt> (first axe<br />
is axe <tt>0</tt> and so on ...). This is only suitable for engine and angular motors.<br />
<br />
<h3><a name="raydium_ode_motor_attach_name"></a>46.199 void raydium_ode_motor_attach_name (char *motor, char *joint, int joint_axe):</h3>
Same as above, but using motor's name and joint's name.<br />
<br />
<h3><a name="raydium_ode_motor_speed_get"></a>46.200 dReal raydium_ode_motor_speed_get (int m, int gears):</h3>
Will return current motor speed.<br />
For engine style motors, if <tt>gears</tt> is sets to 1 (true), returned speed<br />
will be relative to current motor's gear. Useless for other types.<br />
<br />
<h3><a name="raydium_ode_motor_speed_get_name"></a>46.201 dReal raydium_ode_motor_speed_get_name (char *name, int gears):</h3>
same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_motor_angle_get"></a>46.202 dReal raydium_ode_motor_angle_get(int m, int axe):</h3>
Will return current motor angle on <tt>axe</tt> axe. Avaible only for angular motor.<br />
<br />
<h3><a name="raydium_ode_motor_angle_get_name"></a>46.203 dReal raydium_ode_motor_angle_get_name(char *name, int axe):</h3>
same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_motor_rocket_set"></a>46.204 void raydium_ode_motor_rocket_set (int m, int element, dReal x, dReal y, dReal z):</h3>
This function will configure rocket motor <tt>m</tt> on <tt>element</tt> at position<br />
(<tt>x</tt>,<tt>y</tt>,<tt>z</tt>). Rocket motors are unusable until this function is called.<br />
<br />
<h3><a name="raydium_ode_motor_rocket_set_name"></a>46.205 void raydium_ode_motor_rocket_set_name (char *motor, char *element, dReal x, dReal y, dReal z):</h3>
same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_motor_rocket_orientation"></a>46.206 void raydium_ode_motor_rocket_orientation (int m, dReal rx, dReal ry, dReal rz):</h3>
This function will rotate rocket <tt>m</tt> using <tt>rx</tt>,<tt>ry</tt> and <tt>rz</tt> angles<br />
in degrees. Base orientation is z up.<br />
<br />
<h3><a name="raydium_ode_motor_rocket_orientation_name"></a>46.207 void raydium_ode_motor_rocket_orientation_name (char *name, dReal rx, dReal ry, dReal rz):</h3>
same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_motor_rocket_playermovement"></a>46.208 void raydium_ode_motor_rocket_playermovement (int m, signed char isplayermovement):</h3>
Will configure rocket <tt>m</tt> for player movements. This type of rocket will be<br />
automatically disabled when linked element is not touched by<br />
anything (ground in most cases).<br />
<br />
<h3><a name="raydium_ode_motor_rocket_playermovement_name"></a>46.209 void raydium_ode_motor_rocket_playermovement_name (char *m, signed char isplayermovement):</h3>
same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_motor_delete"></a>46.210 signed char raydium_ode_motor_delete (int e):</h3>
Will obviously delete motor <tt>e</tt>.<br />
<br />
<h3><a name="raydium_ode_motor_delete_name"></a>46.211 signed char raydium_ode_motor_delete_name (char *name):</h3>
same as above, but using motor's name.<br />
<br />
<h3><a name="raydium_ode_joint_delete"></a>46.212 signed char raydium_ode_joint_delete (int joint):</h3>
Will obviously delete <tt>joint</tt>.<br />
<br />
<h3><a name="raydium_ode_joint_delete_name"></a>46.213 signed char raydium_ode_joint_delete_name (char *name):</h3>
same as above, but using joint's name.<br />
<br />
<h3><a name="raydium_ode_element_delete"></a>46.214 signed char raydium_ode_element_delete (int e, signed char deletejoints):</h3>
Will obviously delete element <tt>e</tt>. Deletion may me queued for some reason,<br />
for a very short time (current collide loop). For now, you <b>must</b> set<br />
<tt>deletejoints</tt> to 1 (true), since joints without 2 linked elements<br />
are invalid.<br />
Linked rocket engines will be deleted, too.<br />
<br />
<h3><a name="raydium_ode_element_delete_name"></a>46.215 signed char raydium_ode_element_delete_name (char *name, signed char deletejoints):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_object_delete"></a>46.216 signed char raydium_ode_object_delete (int obj):</h3>
Will obviously delete object <tt>obj</tt>. All elements, joints and motors will<br />
be deleted with object.<br />
<br />
<h3><a name="raydium_ode_object_delete_name"></a>46.217 signed char raydium_ode_object_delete_name (char *name):</h3>
Same as above, but using object's name.<br />
<br />
<h3><a name="raydium_ode_explosion_delete"></a>46.218 signed char raydium_ode_explosion_delete (int e):</h3>
Will delete <tt>RAYDIUM_ODE_NETWORK_EXPLOSION_EXPL</tt> type explosion <tt>e</tt>.<br />
<br />
<h3><a name="raydium_ode_element_moveto"></a>46.219 signed char raydium_ode_element_moveto (int element, int object, signed char deletejoints):</h3>
This function will move <tt>element</tt> from his owner object to another <tt>object</tt>.<br />
This "migration" will not be completed until <tt>element</tt> is not touching<br />
anymore his previous owner.<br />
For now, you <b>must</b> set <tt>deletejoints</tt> to 1 (true), deleting linked joints.<br />
<br />
<h3><a name="raydium_ode_element_moveto_name"></a>46.220 signed char raydium_ode_element_moveto_name (char *element, char *object, signed char deletejoints):</h3>
Same as above, but using element's name and object's name.<br />
<br />
<h3><a name="raydium_ode_joint_break"></a>46.221 void raydium_ode_joint_break (int j):</h3>
Internal joint testing function.<br />
<br />
<h3><a name="raydium_ode_launcher"></a>46.222 signed char raydium_ode_launcher (int element, int from_element, dReal * rot, dReal force):</h3>
This function will launch an <tt>element</tt> from <tt>from_element</tt>.<br />
You must provide <tt>rot</tt>, an array of 3 dReal angles in degreees, relative<br />
to <tt>from_element</tt> current orientation.<br />
You must also provide a <tt>force</tt>, with no particular unit.<br />
<br />
<h3><a name="raydium_ode_launcher_name"></a>46.223 signed char raydium_ode_launcher_name (char *element, char *from_element, dReal * rot, dReal force):</h3>
Same as above, using <tt>element</tt> and <tt>from_element</tt> names.<br />
<br />
<h3><a name="raydium_ode_launcher_name_3f"></a>46.224 signed char raydium_ode_launcher_name_3f (char *element, char *from_element, dReal rx, dReal ry, dReal rz, dReal force):</h3>
Same as above, but using 3 dReal values for rotation.<br />
<br />
<h3><a name="raydium_ode_launcher_simple"></a>46.225 signed char raydium_ode_launcher_simple (int element, int from_element, dReal * lrot, dReal force):</h3>
This function will act the same as previous ones, adding a few things:<br />
- <tt>element</tt> will be aligned with <tt>from_element</tt> (position and rotation).<br />
- <tt>element</tt> will be "migrated" to GLOBAL object during launch.<br />
<br />
<h3><a name="raydium_ode_launcher_simple_name"></a>46.226 signed char raydium_ode_launcher_simple_name (char *element, char *from_element, dReal * rot, dReal force):</h3>
Same as above, using <tt>element</tt> and <tt>from_element</tt> names.<br />
<br />
<h3><a name="raydium_ode_launcher_simple_name_3f"></a>46.227 signed char raydium_ode_launcher_simple_name_3f (char *element, char *from_element, dReal rx, dReal ry, dReal rz, dReal force):</h3>
Same as above, but using 3 dReal values for rotation.<br />
<br />
<h3><a name="raydium_ode_explosion_blow"></a>46.228 void raydium_ode_explosion_blow (dReal radius, dReal max_force, dReal * pos):</h3>
This function will create an instantaneous explosion, generating a degressive<br />
blowing effect.<br />
You must provide a <tt>radius</tt> (normal world units), a maximum force<br />
(<tt>max_force</tt>), and a position (<tt>pos</tt>, 3 x dReal array).<br />
<br />
<h3><a name="raydium_ode_explosion_blow_3f"></a>46.229 void raydium_ode_explosion_blow_3f (dReal radius, dReal max_force, dReal px, dReal py, dReal pz):</h3>
Same as above, but using 3 dReal values for position.<br />
<br />
<h3><a name="raydium_ode_explosion_blow_rand"></a>46.230 void raydium_ode_explosion_blow_rand(dReal radius, dReal max_force, dReal rand_factor, dReal *pos):</h3>
Same as <tt>raydium_ode_explosion_blow_rand()</tt>, but introducing a random factor<br />
on resulting torque for blowed objects, for a more realistic effect.<br />
<br />
<h3><a name="raydium_ode_explosion_blow_rand_3f"></a>46.231 void raydium_ode_explosion_blow_rand_3f(dReal radius, dReal max_force, dReal rand_factor, dReal px, dReal py, dReal pz):</h3>
Same as above, but using 3 dReal values for position.<br />
<br />
<h3><a name="raydium_ode_explosion_create"></a>46.232 int raydium_ode_explosion_create (char *name, dReal final_radius, dReal propag, dReal * pos):</h3>
This function will create an spherical growing explosion. Any element in the<br />
explosion will be ejected.<br />
As said before: "Use this for very consequent explosions only !".<br />
You must provide <tt>final_radius</tt>, <tt>propag</tt> (growing size) and a<br />
position (<tt>pos</tt>, 3 x dReal array).<br />
When an explosion reach its final radius, it will be deleted.<br />
<br />
<h3><a name="raydium_ode_element_camera_inboard"></a>46.233 void raydium_ode_element_camera_inboard (int e, dReal px, dReal py, dReal pz, dReal lookx, dReal looky, dReal lookz):</h3>
<a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> to camera API bridge.<br />
Sets the camera on element <tt>e</tt> at relative position (<tt>px</tt>,<tt>py</tt>,<tt>pz</tt>),<br />
and looking at (<tt>lookx</tt>,<tt>looky</tt>,<tt>lookz</tt>) relative point.<br />
Works with normal and static elements.<br />
<br />
<h3><a name="raydium_ode_element_camera_inboard_name"></a>46.234 void raydium_ode_element_camera_inboard_name (char *name, dReal px, dReal py, dReal pz, dReal lookx, dReal looky, dReal lookz):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_draw_all_post"></a>46.235 void raydium_ode_draw_all_post(void):</h3>
This function is called automatically when you render the frame with <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a><br />
using <tt>raydium_ode_draw_all(RAYDIUM_ODE_DRAW_NORMAL)</tt>.<br />
Currently, it will generate and apply HDR map, render particles and lensflares.<br />
<br />
<h3><a name="raydium_ode_draw_all"></a>46.236 void raydium_ode_draw_all(signed char names):</h3>
This function will draw all <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> scene. You must call this function<br />
by yourself.<br />
Set <tt>names</tt> to <tt>RAYDIUM_ODE_DRAW_NORMAL</tt> for normal rendering.<br />
Other <tt>names</tt> values will:<br />
- draw only elements, joints and motors names and elements bounding boxes<br />
with <tt>RAYDIUM_ODE_DRAW_DEBUG</tt><br />
- draw only objets AABB (Axis-Aligned Bounding Box) with <tt>RAYDIUM_ODE_DRAW_AABB</tt><br />
- draw only element rays (if any) with <tt>RAYDIUM_ODE_DRAW_RAY</tt><br />
- do the same as regular rendering, but will not apply post-rendering to the<br />
frame with the value <tt>RAYDIUM_ODE_DRAW_NORMAL_NO_POST</tt> (see previous function)<br />
... so you may need multiple call to this function each frame.<br />
<br />
<h3><a name="raydium_ode_near_callback"></a>46.237 void raydium_ode_near_callback (void *data, dGeomID o1, dGeomID o2):</h3>
Internal callback.<br />
<br />
<h3><a name="raydium_ode_callback"></a>46.238 void raydium_ode_callback (void):</h3>
Internal frame callback.<br />
<br />
<h3><a name="raydium_ode_time_change"></a>46.239 void raydium_ode_time_change (GLfloat perc):</h3>
This function will change <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> timecall frequency, allowing slow motion<br />
effects, for example, where <tt>perc</tt> is the percentage of the normal time base.<br />
Since this function obviously do not change physics accuracy, be careful<br />
with <tt>perc</tt> &gt; 100, wich will generate a big load for the CPU.<br />
This function also change particles and mesh animations time.<br />
<br />
<h3><a name="raydium_ode_element_particle"></a>46.240 void raydium_ode_element_particle (int elem, char *filename):</h3>
This function will "fix" a particle generator on element <tt>elem</tt>. You must<br />
provide particle generator's <tt>filename</tt>.<br />
<br />
<h3><a name="raydium_ode_element_particle_name"></a>46.241 void raydium_ode_element_particle_name (char *elem, char *filename):</h3>
Same as above, using element's name.<br />
<br />
<h3><a name="raydium_ode_element_particle_offset"></a>46.242 void raydium_ode_element_particle_offset (int elem, char *filename, dReal * offset):</h3>
Same as <tt>raydium_ode_element_particle</tt>, but with an <tt>offset</tt>, relative<br />
to element. <tt>offset</tt> is an array of 3 dReal values.<br />
<br />
<h3><a name="raydium_ode_element_particle_offset_name"></a>46.243 void raydium_ode_element_particle_offset_name (char *elem, char *filename, dReal * offset):</h3>
Same as above, using element's name.<br />
<br />
<h3><a name="raydium_ode_element_particle_offset_name_3f"></a>46.244 void raydium_ode_element_particle_offset_name_3f (char *elem, char *filename, dReal ox, dReal oy, dReal oz):</h3>
Same as above, but using 3 dReal values for offset.<br />
<br />
<h3><a name="raydium_ode_element_particle_point"></a>46.245 void raydium_ode_element_particle_point (int elem, char *filename):</h3>
Same as <tt>raydium_ode_element_particle</tt>, but generator will not be linked<br />
with element, only positioned at current element's position.<br />
<br />
<h3><a name="raydium_ode_element_particle_point_name"></a>46.246 void raydium_ode_element_particle_point_name (char *elem, char *filename):</h3>
Same as above, using element's name.<br />
<br />
<h3><a name="raydium_ode_internal_particle_genetator_deleted_callback"></a>46.247 void raydium_ode_internal_particle_genetator_deleted_callback(int gen):</h3>
Internal callback.<br />
<br />
<h3><a name="raydium_ode_element_lensflare_offset"></a>46.248 int raydium_ode_element_lensflare_offset(int elem, char *flare_name, char *filename, dReal *offset):</h3>
This function will attach a lensflare to element <tt>elem</tt> at desired <tt>offset</tt>.<br />
Even if this function will load the lensflare by itslef, you should have a look<br />
to <tt>raydium_lensflare_create()</tt> for more informations about lensflares.<br />
<br />
<h3><a name="raydium_ode_element_lensflare_offset_name"></a>46.249 int raydium_ode_element_lensflare_offset_name(char *elem, char *flare_name, char *filename, dReal *offset):</h3>
Same as above, using element's name.<br />
<br />
<h3><a name="raydium_ode_element_lensflare_offset_name_3f"></a>46.250 int raydium_ode_element_lensflare_offset_name_3f(char *elem, char *flare_name, char *filename, dReal offx, dReal offy, dReal offz):</h3>
Same as above, but using 3 dReal values for offset.<br />
<br />
<h3><a name="raydium_camera_smooth_path_to_element"></a>46.251 void raydium_camera_smooth_path_to_element (char *path, int element, GLfloat path_step, GLfloat smooth_step):</h3>
This function is a clone of <tt>raydium_camera_smooth_path_to_pos</tt> dedicated to<br />
<a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a>, looking at <tt>element</tt> from path.<br />
You may look at suitable chapter for more informations about <tt>path</tt>,<br />
<tt>path_step</tt> and <tt>smooth_step</tt>.<br />
<br />
<h3><a name="raydium_camera_smooth_path_to_element_name"></a>46.252 void raydium_camera_smooth_path_to_element_name (char *path, char *element, GLfloat path_step, GLfloat smooth_step):</h3>
Same as above, using element's name.<br />
<br />
<h3><a name="raydium_camera_smooth_element_to_path_name"></a>46.253 void raydium_camera_smooth_element_to_path_name (char *element, char *path, GLfloat path_step, GLfloat smooth_step):</h3>
This function is a clone of <tt>raydium_camera_smooth_pos_to_path</tt> dedicated to<br />
<a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a>, looking at path, from <tt>element</tt>.<br />
Here, you must provide element's name.<br />
You may look at suitable chapter for more informations about <tt>path</tt>,<br />
<tt>path_step</tt> and <tt>smooth_step</tt>.<br />
<br />
<h3><a name="raydium_camera_smooth_element_to_path_offset"></a>46.254 void raydium_camera_smooth_element_to_path_offset (int element, GLfloat offset_x, GLfloat offset_y, GLfloat offset_z, char *path, GLfloat path_step, GLfloat smooth_step):</h3>
This function is a clone of <tt>raydium_camera_smooth_pos_to_path</tt> dedicated to<br />
<a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> and providing an offset (for <tt>element</tt>), looking at path, from<br />
<tt>element</tt>.<br />
You may look at suitable chapter for more informations about <tt>path</tt>,<br />
<tt>path_step</tt> and <tt>smooth_step</tt>.<br />
<br />
<h3><a name="raydium_camera_smooth_element_to_path_offset_name"></a>46.255 void raydium_camera_smooth_element_to_path_offset_name (char *element, GLfloat offset_x, GLfloat offset_y, GLfloat offset_z, char *path, GLfloat path_step, GLfloat smooth_step):</h3>
Same as above, using element's name.<br />
<br />
<h3><a name="raydium_ode_capture_3d"></a>46.256 int raydium_ode_capture_3d(char *filename):</h3>
This function is provided "for fun" only. The main idea is to dump all scene<br />
to a .tri file (<tt>filename</tt>). A .sprt file will also be created, wich is a<br />
special file format with all particles found during the dump. You can reload<br />
.sprt files with <tt>raydium_particle_state_restore</tt>.<br />
Note from source code:<br />
<div class="code"><pre><span style="color: #808080; font-style: italic;">// This function is provided &quot;for fun&quot; only. Not all effects are dumped:</span>
<span style="color: #808080; font-style: italic;">// Missing : shadows, forced colors, before/after callbacks,</span>
<span style="color: #808080; font-style: italic;">// fixed elements, ...</span>
<span style="color: #808080; font-style: italic;">// Some code is pasted from file.c (and this is BAD ! :) </span>
&nbsp;</pre>
</div><br />
<br />
<h3><a name="raydium_ode_orphans_check"></a>46.257 int raydium_ode_orphans_check(void):</h3>
Search orphans in all objects. An orphan is a geometry that exists into ODE<br />
but is not managed by <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a>.<br />
This function will print object with orphans and return total orphan count.<br />
<br />
<h3><a name="raydium_ode_mouse_pick"></a>46.258 int raydium_ode_mouse_pick(dReal dist,dReal pos[3],dReal *depth):</h3>
Mouse picking function. Return raydium_element pointed by mouse on the screen.<br />
<tt>dist</tt> is maximal detection distance (range).<br />
<tt>pos</tt> Global 3D position of pointed point. <tt>depth</tt> distance from point of view.<br />
Use <tt>raydium_ode_PickCallback</tt> (as signed char f(int,int,dContact*)) to filter<br />
contacts points. Uses as other collide callback but is specific to Pick function.<br />
<br />
<h3><a name="raydium_ode_set_physics_freq"></a>46.259 void raydium_ode_set_physics_freq (GLfloat freq):</h3>
You can use <tt>raydium_ode_set_physics_freq</tt> to change the frequence of physical engine call. 400Hz is default.<br />
This will change physical behaviour.<br />
<br />
<h3><a name="raydium_ode_get_physics_freq"></a>46.260 GLfloat raydium_ode_get_physics_freq(void):</h3>
Return the actual value of physical engine calling frequency.<br />
<br />
<h3><a name="raydium_ode_set_timestep"></a>46.261 void raydium_ode_set_timestep(GLfloat tstep):</h3>
Set physical engine time step (which is 0.006f by default).<br />
This value is related to <tt>raydium_ode_physics_freq</tt>.<br />
<br />
<h3><a name="raydium_ode_get_timestep"></a>46.262 GLfloat raydium_ode_get_timestep(void):</h3>
Return physical engine iteration timestep.<br />
<br />
<h3><a name="raydium_ode_capture_internal_create"></a>46.263 void raydium_ode_capture_internal_create(int type, int id, dReal *sizes, char *mesh):</h3>
Internal. Add entity creation to the replay.<br />
<br />
<h3><a name="raydium_ode_capture_internal_create_all"></a>46.264 void raydium_ode_capture_internal_create_all(void):</h3>
Internal. Add all entities to the replay.<br />
<br />
<h3><a name="raydium_ode_capture_internal_delete"></a>46.265 void raydium_ode_capture_internal_delete(int id):</h3>
Internal. Add entity deletion to the replay.<br />
<br />
<h3><a name="raydium_ode_capture_record"></a>46.266 void raydium_ode_capture_record(char *rrp_filename):</h3>
Records to a RRP file all ODE events to create a replay.<br />
Recording is done at <tt>RAYDIUM_ODE_RECORD_RATE_DEFAULT</tt> rate.<br />
You can play another RRP file while recording.<br />
<br />
WARNING: experimental feature ! API may change.<br />
<br />
<h3><a name="raydium_ode_capture_record_rate"></a>46.267 void raydium_ode_capture_record_rate(char *rrp_filename, int rate_hz):</h3>
Same as above, but allowing you to select the recording rate.<br />
Valid range is [1,400] Hz.<br />
<br />
<h3><a name="raydium_ode_capture_record_stop"></a>46.268 void raydium_ode_capture_record_stop(void):</h3>
Stops the recording. Not needed to get a valid record.<br />
<br />
<h3><a name="raydium_ode_capture_play_internal_index_build"></a>46.269 void raydium_ode_capture_play_internal_index_build(void):</h3>
Internal. Builds index, needed for RRP playing.<br />
<br />
<h3><a name="raydium_ode_record_play_ghost"></a>46.270 void raydium_ode_record_play_ghost(signed char ghost):</h3>
Set <tt>ghost</tt> to true (1) if you want to avoid all collisions between "your"<br />
elements and replay ones. Default is false (0).<br />
<br />
<h3><a name="raydium_ode_capture_play"></a>46.271 void raydium_ode_capture_play(char *rrp_filename, signed char change_ground):</h3>
This function will play <tt>rrp_filename</tt> file, and default speed.<br />
If <tt>change_ground</tt> is true (1), this function will set/change the<br />
current <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> ground (like raydium_ode_ground_set_name()) with the one<br />
used in the replay file.<br />
You can start recording during a replay, if you want.<br />
<br />
<h3><a name="raydium_ode_capture_stop"></a>46.272 void raydium_ode_capture_stop(void):</h3>
Stops the replay.<br />
<br />
<h3><a name="raydium_ode_capture_seek"></a>46.273 signed char raydium_ode_capture_seek(double time):</h3>
This function will seek into the replay to jump at <tt>time</tt> seconds.<br />
The CPU cost of this function is proportional to the size of the jump<br />
from the current position to <tt>time</tt>.<br />
Returns false (0) on failure (ex:<tt>time</tt> out of range)<br />
<br />
<h3><a name="raydium_ode_capture_seek_rel"></a>46.274 signed char raydium_ode_capture_seek_rel(double time):</h3>
Same as above, but using a relative <tt>time</tt>.<br />
Example: <tt>raydium_ode_capture_seek_rel(-2.5)</tt> will rewind the replay of<br />
two and half a second from the current time.<br />
<br />
<h3><a name="raydium_ode_capture_speed"></a>46.275 void raydium_ode_capture_speed(GLfloat factor):</h3>
Change the speed of the capture replay. The default factor is <tt>1</tt>, and a value<br />
of <tt>2</tt> will play the record twice the normal speed, for example.<br />
<b>You can use negative values</b> to play the record backwards.<br />
The value <tt>0</tt> will pause the replay.<br />
<br />
<h3><a name="raydium_ode_capture_internal_read_event"></a>46.276 void raydium_ode_capture_internal_read_event(signed char sense):</h3>
Internal. Reads "special" events at the current file position (sense=1 means<br />
forward and sens=-1 means backward)<br />
<br />
<h3><a name="raydium_ode_capture_internal_read_move"></a>46.277 void raydium_ode_capture_internal_read_move(signed char pass):</h3>
Internal. Reads a "move" event at the current file position.<br />
<br />
<h3><a name="raydium_ode_capture_play_callback"></a>46.278 void raydium_ode_capture_play_callback(void):</h3>
Internal frame callback for capture playing.<br />
<br />
<h3><a name="raydium_ode_autodisable_set"></a>46.279 void raydium_ode_autodisable_set(signed char autod):</h3>
<a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> can automatically disable resting elements.<br />
This is useful for physical solver. It don't have to reserve space in<br />
the solver matrix and compute solution for this element.<br />
<br />
This can greatly speed up the program, but may cause some strange<br />
behaviors, like elements resting in mid-air.<br />
<br />
This feature is disabled by default.<br />
<br />
<h3><a name="raydium_ode_autodisable_get"></a>46.280 signed char raydium_ode_autodisable_get(void):</h3>
Is <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> autodisable feature is enabled ? This function will<br />
return <tt>1</tt> (true) if yes, <tt>0</tt> (false) otherwise.<br />
<br />
<h3><a name="raydium_ode_element_disable_get"></a>46.281 signed char raydium_ode_element_disable_get(int elem):</h3>
Return whatever or not an element is disabled.<br />
In this case it is not treated by the solver.<br />
Will return <tt>1</tt> if element is disabled, <tt>0</tt> if not.<br />
<br />
<h3><a name="raydium_ode_element_disable_get_name"></a>46.282 signed char raydium_ode_element_disable_get_name (char *e):</h3>
Same as above using element name.<br />
<br />
<h3><a name="raydium_ode_element_disable_set"></a>46.283 void raydium_ode_element_disable_set(int elem, signed char disable_state):</h3>
Allow user to disable or reactivate an element manually.<br />
if <tt>disable_state</tt> is <tt>1</tt> element will be desactived,<br />
<tt>0</tt> will re-activate the element.<br />
<br />
<h3><a name="raydium_ode_element_disable_set_name"></a>46.284 void raydium_ode_element_disable_set_name (char *e, signed char disable_state):</h3>
Same as above with element name.<br />
<br />
<h3><a name="raydium_ode_contact_feedback_save"></a>46.285 void raydium_ode_contact_feedback_save(int custom_id):</h3>
During your <tt>raydium_ode_CollideCallback</tt>, you may want to save forces<br />
and torques that <b>will</b> be generated by the contact you're creating.<br />
<br />
This function allows you to do this, simply by providing a <tt>custom_id</tt>, a<br />
unique identifier, in the range [0,<tt>RAYDIUM_ODE_CONTACTS_FEEDBACK_MAX</tt>].<br />
Most of the time, this value is the "current" element id, like the wheel id<br />
during a road/wheel contact, for instance. It's then very easy to get the saved<br />
forces and torques during the next physics iteration using the same id (the<br />
wheel id is the same from one iteration to another).<br />
<br />
<h3><a name="raydium_ode_contact_feedback_get"></a>46.286 dJointFeedback *raydium_ode_contact_feedback_get(int custom_id):</h3>
This function will return a pointer to a <tt>dJointFeedback</tt> structure, where<br />
you'll find the forces and torques saved with<br />
<tt>raydium_ode_contact_feedback_save()</tt> during <b>the previous physics iteration</b>.<br />
See above for more informations about <tt>custom_id</tt>.<br />
<div class="code"><pre><span style="color: #993333;">typedef</span> <span style="color: #993333;">struct</span> dJointFeedback <span style="color: #66cc66;">&#123;</span>
dVector3 f1; <span style="color: #808080; font-style: italic;">// force that joint applies to body 1</span>
dVector3 t1; <span style="color: #808080; font-style: italic;">// torque that joint applies to body 1</span>
dVector3 f2; <span style="color: #808080; font-style: italic;">// force that joint applies to body 2</span>
dVector3 t2; <span style="color: #808080; font-style: italic;">// torque that joint applies to body 2</span>
<span style="color: #66cc66;">&#125;</span> dJointFeedback;</pre>
</div><br />
<br />
<a name="ode_net.h"></a><br />
<h2>47 <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> network layer:</h2>
<h3><a name="raydium_ode_contact_feedback_get"></a>47.1 Introduction:</h3>
Physics engines are extremely powerful tools, but it turns to nightmares when<br />
the application must be networked. <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> API provides its own network layer,<br />
using Raydium lower level network API. And the great thing is that you've<br />
almost nothing to do !<br />
Just choose the best "send" function and let Raydium do the rest.<br />
<br />
<a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> Net will use udp streams, netcall (RPC), smart timeouts, predictions,<br />
dead reckoning, and many others voodoo things. Just trust.<br />
<br />
A few things about internals:<br />
- NID: Network ID. Every networked element have a NID.<br />
- Distant elements are localy created using static elements, owned by<br />
an object called "<tt>DISTANT</tt>".<br />
- <tt>raydium_ode_network_maxfreq</tt> defines the paquet sending frequency. By<br />
default, this value is <tt>RAYDIUM_ODE_NETWORK_MAXFREQ</tt>, but you can use<br />
<tt>--ode-rate</tt> command line switch.<br />
- No rotation prediction is done.<br />
- See <tt>config.h</tt> if you want to disable prediction (<tt>ODE_PREDICTION</tt>) or<br />
to debug <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> Net (<tt>DEBUG_ODENET</tt>, <b>very</b> verbose !).<br />
- Explosions are also automatically managed by <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> Net.<br />
- <b>Do NOT use</b> Raydium lower level network API when using <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> Net. Use<br />
netcalls, propags and so on.<br />
<br />
Nothing is said here about how to create a <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> Net server. There's only<br />
a few more things to do if you already have a standard server, but since it's<br />
unsupported for now, you must have a look to existing <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> Net servers.<br />
<br />
<h3><a name="raydium_ode_network_MaxElementsPerPacket"></a>47.2 int raydium_ode_network_MaxElementsPerPacket (void):</h3>
This function will return how many elements may be sent with<br />
current packet size (see <tt>common.h</tt>).<br />
<br />
<h3><a name="raydium_network_nid_element_find"></a>47.3 int raydium_network_nid_element_find (int nid):</h3>
Internal. Find wich element have <tt>nid</tt>.<br />
<br />
<h3><a name="raydium_ode_network_newdel_event"></a>47.4 void raydium_ode_network_newdel_event (int type, char *buff):</h3>
Internal. NEWDEL netcall event.<br />
NEWDEL is fired when a new element is created or deleted somewhere in the<br />
network.<br />
<br />
<h3><a name="raydium_ode_network_nidwho_event"></a>47.5 void raydium_ode_network_nidwho_event (int type, char *buff):</h3>
Internal. NIDWHO netcall event.<br />
NIDWHO is sent when someone received some "update" informations about a<br />
nid, but didn't received previous NEWDEL informations for this nid.<br />
The nid owner will send a reply.<br />
<br />
Most reasons for this are:<br />
- We are a new client and we dont known anything about the whole scene.<br />
- The NEWDEL packet was lost ("TCP style" packets may be lost too ...)<br />
<br />
NIDWHO answer will be used by every peer to refresh its own copy of the<br />
element informations (geometry type, mesh, size and tag).<br />
<br />
<h3><a name="raydium_ode_network_explosion_event"></a>47.6 void raydium_ode_network_explosion_event (int type, char *buff):</h3>
Internal explosion netcall event.(<tt>RAYDIUM_ODE_NETWORK_EXPLOSION_EXPL</tt> and<br />
<tt>RAYDIUM_ODE_NETWORK_EXPLOSION_BLOW</tt>).<br />
<br />
<h3><a name="raydium_ode_network_init"></a>47.7 void raydium_ode_network_init (void):</h3>
Internal. Will initialize all <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> Net layer and register netcalls.<br />
<br />
<h3><a name="raydium_ode_network_TimeToSend"></a>47.8 signed char raydium_ode_network_TimeToSend (void):</h3>
Almost internal. Will return 1 (true) if it's time to send a new packet, using<br />
<tt>raydium_ode_network_maxfreq</tt> value.<br />
<br />
<h3><a name="raydium_ode_network_element_send"></a>47.9 void raydium_ode_network_element_send (short nelems, int *e):</h3>
Will send all elements of <tt>e</tt> array to network. You must provide array lenght<br />
using <tt>nelems</tt>.<br />
No "time to send ?" test is done, you'll probably have to do it yourself.<br />
<br />
<h3><a name="raydium_ode_network_element_send_all"></a>47.10 void raydium_ode_network_element_send_all (void):</h3>
Will try to send all elements to network. Warning, packet size may be to<br />
small to send all elements !.. See next functions, more suitable.<br />
<br />
<h3><a name="raydium_ode_network_element_send_random"></a>47.11 void raydium_ode_network_element_send_random (int nelems):</h3>
Will send randomly chosen elements to network. You must provide how many<br />
elements you want with <tt>nelems</tt>, but RAYDIUM_ODE_NETWORK_OPTIMAL is<br />
available.<br />
<br />
<h3><a name="raydium_ode_network_element_send_iterative"></a>47.12 void raydium_ode_network_element_send_iterative (int nelems):</h3>
Will send elements to network, iteratively chose. You must provide how many<br />
elements you want with <tt>nelems</tt>, but RAYDIUM_ODE_NETWORK_OPTIMAL is<br />
available.<br />
<br />
<h3><a name="raydium_ode_network_nidwho"></a>47.13 void raydium_ode_network_nidwho (int nid):</h3>
Internal. Will ask for informations for <tt>nid</tt> (see above).<br />
NID sending frequency is now limited, since a lot of overhead was generated<br />
when new clients were joining a "big" network.<br />
<br />
<h3><a name="raydium_ode_network_apply"></a>47.14 void raydium_ode_network_apply (raydium_ode_network_Event * ev):</h3>
Internal. This callback is fired when new data is received. A lot of things<br />
are done here (timeouts, dead reckoning, ...)<br />
<br />
<h3><a name="raydium_ode_network_read"></a>47.15 void raydium_ode_network_read (void):</h3>
Internal. Reads new packets, if any.<br />
<br />
<h3><a name="raydium_ode_network_element_new"></a>47.16 void raydium_ode_network_element_new (int e):</h3>
Internal. Send a new element to network.<br />
<br />
<h3><a name="raydium_ode_network_element_delete"></a>47.17 void raydium_ode_network_element_delete (int e):</h3>
Internal. Send "delete event" to network, since we're deleting one of "our" elements.<br />
<br />
<h3><a name="raydium_ode_network_explosion_send"></a>47.18 void raydium_ode_network_explosion_send (raydium_ode_network_Explosion * exp):</h3>
Internal. Send a new explosion event.<br />
<br />
<h3><a name="raydium_ode_network_element_isdistant"></a>47.19 signed char raydium_ode_network_element_isdistant (int elem):</h3>
Will return true (1) if element <tt>elem</tt> is "distant", or false (0) if it's<br />
one of "our" elements.<br />
<br />
<h3><a name="raydium_ode_network_element_isdistant_name"></a>47.20 signed char raydium_ode_network_element_isdistant_name (char *elem):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_network_element_distantowner"></a>47.21 signed char raydium_ode_network_element_distantowner(int elem):</h3>
Returns UID (peer "user" ID) for the distant element owner. See <tt>network.c</tt><br />
documentation for more informations about UID.<br />
<br />
<h3><a name="raydium_ode_network_element_distantowner_name"></a>47.22 signed char raydium_ode_network_element_distantowner_name(char *elem):</h3>
Same as above, but using element's name.<br />
<br />
<h3><a name="raydium_ode_network_element_trajectory_correct"></a>47.23 void raydium_ode_network_element_trajectory_correct (int elem):</h3>
Internal. Applies dead reckoning values to element.<br />
<br />
<h3><a name="raydium_ode_network_elment_next_local"></a>47.24 void raydium_ode_network_elment_next_local(void):</h3>
Call this function when you don't want that the next created element is sent<br />
to network ("local only" element).<br />
<br />
<a name="reg_api.h"></a><br />
<h2>48 <a href="http://wiki.raydium.org/wiki/RegAPI">RegAPI</a>:</h2>
<h3><a name="raydium_ode_network_elment_next_local"></a>48.1 Introduction:</h3>
<a href="http://wiki.raydium.org/wiki/RegAPI">RegAPI</a> is an internal system that exports some Raydium's API functions to<br />
scripting engine, creating bindings.<br />
See <a href="http://wiki.raydium.org/wiki/RayPHP">RayPHP</a> chapter for more informations anout scripting.<br />
<br />
<h3><a name="raydium_register_api"></a>48.2 void raydium_register_api(void):</h3>
Internal. Will register Raydium API.<br />
<br />
<a name="web.h"></a><br />
<h2>49 HTTP Web server and tools:</h2>
<h3><a name="raydium_register_api"></a>49.1 Introduction:</h3>
Raydium applications can embed a small HTTP server. This server is used to be<br />
an entry point to application data. Only simple requests (GET) are supported,<br />
with a limited set of file types. Right now, this server is able to send<br />
static and dynamic data, and dynamic scripted page support is to come, using<br />
Raydium's PHP parser.<br />
<br />
The server is a modified version of IBM's nweb server, from<br />
Nigel Griffiths (nag AT uk DOT ibm DOT com).<br />
<br />
Raydium also provide a very small HTTP client, useful to get data (tracks,<br />
maps, sprays, ...) from the game server.<br />
<br />
To set up a web server in your application, you'll need to do a few things.<br />
First, make sure that HTTP support is enabled (see <tt>raydium_web_init()</tt>) and<br />
that your HTTP server is started (<tt>raydium_web_start()</tt>).<br />
<br />
The HTTP server will use TCP port <tt>RAYDIUM_NETWORK_PORT</tt> (29104), therefore<br />
a typical URL to reach the server is something like <a href="http://127.0.0.1:29104">http://127.0.0.1:29104</a><br />
where you'll find your index page. If the HTTP server (and your application)<br />
is started (see above), you can point your browser to this URL right now.<br />
<br />
The default index page can be changed thru <tt>raydium_web_body_default</tt><br />
variable :<br />
<div class="code">
<pre>
char *index_text=&quot;\
&lt;br/&gt;&lt;center&gt;This is a &lt;b&gt;test&lt;/b&gt; server. You can know more about Raydium by\
&lt;a href=\&quot;http://maniadrive.raydium.org/\&quot;&gt;by clicking here&lt;/a&gt;&lt;/center&gt;&quot;;

...

int main(int argc, char **argv)
{
...
raydium_web_start(&quot;test server&quot;);
raydium_web_body_default=index_text;
}
</pre>
</div><br />
<br />
You can also change default header and footer the same way, using<br />
<tt>raydium_web_header</tt> and <tt>raydium_web_footer</tt> variables.<br />
<br />
Then you may need to register "file" extensions (static data or dynamic<br />
handler) using <tt>raydium_web_extension_add()</tt> function.<br />
<br />
Please note that Raydium's not Apache ! You're supposed to serve light<br />
pages, with almost no processing. The server is not even threaded, so you<br />
may hit hardly framerate not following these recommendations, or if too<br />
many HTTP requests are sent concurrently to the server.<br />
<br />
<h3><a name="raydium_web_answer"></a>49.2 void raydium_web_answer(char *message, int fd):</h3>
Internal use. Default HTTP handler (HTML message).<br />
<br />
<h3><a name="raydium_web_request"></a>49.3 void raydium_web_request(int fd):</h3>
Internal use. Will decode HTTP client request.<br />
<br />
<h3><a name="raydium_web_start"></a>49.4 void raydium_web_start(char *title):</h3>
Will start the Raydium embedded HTTP server. The TCP port 29104 must be free.<br />
The <tt>title</tt> will be used in HTTP headers and in the default HTML header.<br />
<br />
<h3><a name="raydium_web_callback"></a>49.5 void raydium_web_callback(void):</h3>
Internal use. Will accept any pending connection.<br />
<br />
<h3><a name="raydium_web_init"></a>49.6 void raydium_web_init(void):</h3>
You should not have to call this function by yourself, unless your application<br />
is a game server. (see <tt>raydium_network_only_init()</tt> for more informations<br />
about network only applications)<br />
<br />
<h3><a name="raydium_web_extension_add"></a>49.7 void raydium_web_extension_add(char *ext, char *mime, void *handler):</h3>
This function will register a new file extension to the web server.<br />
<br />
Note that Raydium HTTP server have no idea of URL parameters and will consider<br />
that everything after the root slash in the URL is the requested "filename".<br />
<br />
So the <tt>ext</tt> could be of any size and will only try to match the end<br />
of URLs ("tga" or ".tga" for instance).<br />
As an example, an URL like <a href="http://myhost/toto.php?f=a.tga">http://myhost/toto.php?f=a.tga</a> <b>will match</b><br />
the extension ".tga" (the filename will be <tt>toto.php?f=a.tga</tt>, here).<br />
But this one will not: <a href="http://myhost/toto.php?f=a.tga&r=12">http://myhost/toto.php?f=a.tga&r=12</a><br />
<br />
This behavior may change soon, so please contact us before doing anything<br />
complex with extension.<br />
<br />
<br />
You can also set a <tt>handler</tt> for your extension. A sample handler may<br />
look like this:<br />
<div class="code"><pre><span style="color: #993333;">signed</span> <span style="color: #993333;">char</span> http_req<span style="color: #66cc66;">&#40;</span><span style="color: #993333;">char</span> *req, <span style="color: #993333;">char</span> *response, <span style="color: #993333;">int</span> max_size<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
<span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>!strcmp<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"a.dyn"</span>,req<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
sprintf<span style="color: #66cc66;">&#40;</span>response,<span style="color: #ff0000;">"This a sample for &lt;b&gt;a.dyn&lt;/b&gt;"</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #b1b100;">return</span> <span style="color: #cc66cc;">1</span>;
<span style="color: #66cc66;">&#125;</span>
<span style="color: #b1b100;">if</span><span style="color: #66cc66;">&#40;</span>!strcmp<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"b.dyn"</span>,req<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
sprintf<span style="color: #66cc66;">&#40;</span>response,<span style="color: #ff0000;">"This a sample for &lt;b&gt;b.dyn&lt;/b&gt;"</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #b1b100;">return</span> <span style="color: #cc66cc;">1</span>;
<span style="color: #66cc66;">&#125;</span>
&nbsp;
<span style="color: #b1b100;">return</span> <span style="color: #cc66cc;">0</span>;
<span style="color: #66cc66;">&#125;</span></pre>
</div><br />
<br />
In this handler, <tt>req</tt> is the requested "filename" (see above about<br />
extensions) and <tt>response</tt> is a pre-allocated buffer (of <tt>max_size</tt> bytes,<br />
usually 8 kB) where you must write your response data/text. The hanlder<br />
must return <tt>1</tt> if everything is correct, and <tt>0</tt> to deny the request.<br />
<br />
If you set <tt>handler</tt> to NULL, the HTTP server will sent the requested file<br />
directly to the browser.<br />
<br />
<br />
Then you can define a <tt>mime</tt> type, particularly if you set <tt>handler</tt> to<br />
<tt>NULL</tt>, so the file is sent with a correct MIME type ("raw/unknown",<br />
"text/plain", ...).<br />
When using a handler, you should probably set <tt>mime</tt> to <tt>NULL</tt>, since it<br />
will then use the default HTML Raydium handler. But you can even set <tt>mime</tt><br />
type when using your handlers, allowing you to create fully custom responses.<br />
<br />
<h3><a name="raydium_web_client_get"></a>49.8 signed char raydium_web_client_get(char *filename):</h3>
This is a small HTTP 1.0 client, used to download data from a Raydium server.<br />
For any other use, you should use PHP (See PHP and <a href="http://wiki.raydium.org/wiki/RayPHP">RayPHP</a> chapters).<br />
<br />
To use this function you must be connected to a game server (see<br />
<tt>raydium_network_client_connect_to()</tt> for more informations), therefore<br />
<tt>filename</tt> should be only a path or a filename, not an URL.<br />
<br />
Warning: no proxy support is provided here.<br />
<br />
This function is very useful for downloading data from the game server<br />
you're currently connected to, like tracks, maps, skins, ...<br />
This client is able to detect Raydium HTTP server messages, so it will not<br />
download HTML content instead of data when a Raydium server returns an error.<br />
<br />
It will not overwrite the local file if the downloaded one is the same.<br />
<br />
No upload support is available yet.<br />
<br />
<a name="hdr.h"></a><br />
<h2>50 Pseudo HDR:</h2>
<h3><a name="raydium_web_client_get"></a>50.1 Introduction:</h3>
Currently, HDR features of Raydium are highly experimental, because of<br />
performance issues with some hardware.<br />
<br />
The basic idea behind Raydium's HDR rendering is to use a few tricks to<br />
allow such rendering even on low-end hardware.<br />
<br />
Let's take a example scene:<br />
<img src="http://ftp.cqfd-corp.org/pseudo-hdr-scene_s.jpg" alt="base" /><br />
<br />
During this regular rendering, Raydium will use the (boolean) "HDR tag" of<br />
each texture to know if the texture is bright or not. This tag is toggled<br />
using the <tt>raydium_hdr_texture()</tt> function. The result is a very contrasted<br />
version of the rendered image, like this:<br />
<img src="http://ftp.cqfd-corp.org/pseudo-hdr-stencil_s.png" alt="stencil" /><br />
<br />
Raydium will then downscale this image, and apply a heavy blur effect:<br />
<img src="http://ftp.cqfd-corp.org/pseudo-hdr-stencil-64-blur.png" alt="blur" /><br />
<br />
This blurred texture is uploaded back to the video card, upscaled, and added<br />
to the already rendered color buffer:<br />
<img src="http://ftp.cqfd-corp.org/pseudo-hdr-scene-final_s.jpg" alt="final" /><br />
<br />
<br />
<h3><a name="raydium_hdr_init"></a>50.2 void raydium_hdr_init(void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_hdr_enable"></a>50.3 void raydium_hdr_enable(void):</h3>
Enables HDR.<br />
<br />
<h3><a name="raydium_hdr_disable"></a>50.4 void raydium_hdr_disable(void):</h3>
Disables HDR.<br />
<br />
<h3><a name="raydium_hdr_internal_window_malloc"></a>50.5 void raydium_hdr_internal_window_malloc(void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_hdr_block"></a>50.6 void raydium_hdr_block(signed char blocking):</h3>
Internal use. Not currenlty used, in facts.<br />
<br />
<h3><a name="raydium_hdr_blur"></a>50.7 void raydium_hdr_blur(unsigned char *in, unsigned char *out):</h3>
Internal use. Will blur <tt>in</tt> to <tt>out</tt>.<br />
<br />
<h3><a name="raydium_hdr_map"></a>50.8 void raydium_hdr_map(void):</h3>
Internal use. Will create HDR texture.<br />
<br />
<h3><a name="raydium_hdr_map_apply"></a>50.9 void raydium_hdr_map_apply(void):</h3>
Internal use. Will apply HDR texture on the screen.<br />
<br />
<h3><a name="raydium_hdr_settings_color_local"></a>50.10 void raydium_hdr_settings_color_local(GLfloat r, GLfloat g, GLfloat b, GLfloat a):</h3>
You can define the color of the HDR effect. This is the "accurate" HDR color,<br />
not the ambient HDR color. (see <tt>raydium_hdr_settings_color_ambient()</tt>).<br />
<br />
Alpha channel (<tt>a</tt> is not currently used). Default is full white, but<br />
it's quiet a good idea to match your background scene color.<br />
<br />
<h3><a name="raydium_hdr_settings_color_ambient"></a>50.11 void raydium_hdr_settings_color_ambient(GLfloat r, GLfloat g, GLfloat b, GLfloat a):</h3>
Same as raydium_hdr_settings_color_local(), but for the ambient HDR mask. This<br />
mask is a zoomed copy of the local HDR mask, and should be a subtile, darker<br />
color of <tt>raydium_hdr_settings_color_local()</tt>.<br />
<br />
You may have to play a bit with this color to find the correct one for your<br />
scene, but it can enhance greatly the HDR rendering.<br />
<br />
You can set <tt>r</tt>, <tt>g</tt> and <tt>b</tt> to <tt>0</tt> to disable the ambient HDR.<br />
<br />
<h3><a name="raydium_hdr_settings_eye"></a>50.12 void raydium_hdr_settings_eye(float speed, float alpha_max):</h3>
Defines the eye settings, where <tt>speed</tt> will define how quickly the eye<br />
will react to a bright scene.<br />
Default is currently <tt>RAYDIUM_HDR_EYE_SPEED_DEFAULT</tt> (<tt>0.1</tt>).<br />
<br />
The other setting, <tt>alpha_max</tt>, will define how visible the HDR effect will<br />
be. The default is <tt>1.0</tt>.<br />
<br />
<h3><a name="raydium_hdr_settings"></a>50.13 void raydium_hdr_settings(GLfloat *color_local, GLfloat *color_ambient, float eye_speed, float alpha_max):</h3>
See <tt>raydium_hdr_settings_color_local()</tt>, <tt>raydium_hdr_settings_color_ambient()</tt><br />
and <tt>raydium_hdr_settings_eye()</tt>.<br />
<br />
<h3><a name="raydium_hdr_texture"></a>50.14 signed char raydium_hdr_texture(int texture, signed char hdr):</h3>
<br />
This function will set the HDR tag on <tt>texture</tt>. If <tt>hdr</tt> is set to<br />
true (<tt>1</tt>), this texture will be used as "bright emitter" by the HDR rendering.<br />
<br />
By default, all textures are loaded with a HDR tag of <tt>0</tt>, except if texture<br />
filename starts with <tt>HDR</tt> letters (example: <tt>HDR_lamp_buld.tga</tt>). Skybox<br />
is also loaded with HDR tag sets to <tt>1</tt>.<br />
<br />
WARNING: Because of display lists, HDR tagging should be done <b>before</b><br />
drawing objects for the first time !<br />
<br />
<h3><a name="raydium_hdr_texture_name"></a>50.15 signed char raydium_hdr_texture_name(char *texture, signed char hdr):</h3>
Same as above, but using <tt>texture</tt> name.<br />
<br />
<h3><a name="raydium_hdr_texture_reset"></a>50.16 void raydium_hdr_texture_reset(void):</h3>
Will reset all HDR tag for textures to <tt>0</tt>.<br />
See note about display lists in <tt>raydium_hdr_texture()</tt>, above.<br />
<br />
<a name="lensflare.h"></a><br />
<h2>51 Lens flare effects:</h2>
<h3><a name="raydium_hdr_texture_reset"></a>51.1 Introduction:</h3>
Lens flare effects can be used to emulate various reflection and scattering<br />
visuals, for example and probably the most common type is the sunlight.<br />
Lens flare effects inside the engine are designed to be highly customizable.<br />
You should be able to create everything with them you can think of. Lamps,<br />
starry skies, headlights for vehicles, explosions, UFO invasions and much more.<br />
<br />
Lets show an example scene of a basic sunlight lens flare effect:<br />
<img src="http://ftp.cqfd-corp.org/lens-flare-scene_s.jpg" alt="lensflare" /><br />
<br />
Currently, lens flare effects support eight different effect layers, so called<br />
FX groups. Each group has size, velocity, color and alpha attributes. You're<br />
also able to use custom textures, see the <tt>raydium_lensflare_texture_name()</tt><br />
function for details.<br />
<br />
The simplest way to create a lens flare effect is to load a lens flare effect<br />
configuration file, usually .lf extension text files.<br />
<div class="code"><pre><span style="color: #808080; font-style: italic;">// Skeleton lens flare effect configuration file.</span>
&nbsp;
<span style="color: #808080; font-style: italic;">// Optional custom set of textures.</span>
<span style="color: #808080; font-style: italic;">// When no texture name was assigned the default set of textures will be used.</span>
<span style="color: #808080; font-style: italic;">// e. g. texture=&quot;hexagon&quot; will load LF_hexagon_glow.tga instead of LFglow.tga.</span>
texture=<span style="color: #ff0000;">""</span>
&nbsp;
<span style="color: #808080; font-style: italic;">// Lens flare FX groups.</span>
<span style="color: #808080; font-style: italic;">// To deactivate a FX group simply do not declare it or comment it out.</span>
<span style="color: #808080; font-style: italic;">// Available FX groups: main, rays, streak, halo, orbs, glow, star, anam.</span>
<span style="color: #808080; font-style: italic;">// fxgrp = { size, velocity, red, green, blue, alpha }</span>
main   = <span style="color: #66cc66;">&#123;</span> <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#125;</span>
rays   = <span style="color: #66cc66;">&#123;</span> <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#125;</span>
streak = <span style="color: #66cc66;">&#123;</span> <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#125;</span>
halo   = <span style="color: #66cc66;">&#123;</span> <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#125;</span>
orbs   = <span style="color: #66cc66;">&#123;</span> <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#125;</span>
glow   = <span style="color: #66cc66;">&#123;</span> <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#125;</span>
star   = <span style="color: #66cc66;">&#123;</span> <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#125;</span>
anam   = <span style="color: #66cc66;">&#123;</span> <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span>, <span style="color: #cc66cc;">1</span>.<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#125;</span></pre>
</div><br />
After creation of the lens flare you can change the position calling<br />
<tt>raydium_lensflare_move()</tt> using the lens flare id returned by<br />
<tt>raydium_lensflare_create()</tt>.<br />
<br />
If you want to use lens flare effects together with HDR, be sure to enable HDR<br />
calling <tt>raydium_hdr_enable()</tt> before creating a lens flare effect, so the<br />
textures will be automagically set to be HDR able.<br />
<br />
This effect can be quiet heavy on the framerate, especially when using multiple<br />
big blended layers. So please be careful, you have been warned. ;)<br />
<br />
<h3><a name="raydium_lensflare_init"></a>51.2 void raydium_lensflare_init(void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_lensflare_enable"></a>51.3 void raydium_lensflare_enable(void):</h3>
Enables the lens flare effect system.<br />
<br />
<h3><a name="raydium_lensflare_disable"></a>51.4 void raydium_lensflare_disable(void):</h3>
Disables the lens flare effect system.<br />
<br />
<h3><a name="raydium_lensflare_isvalid"></a>51.5 signed char raydium_lensflare_isvalid(int lf):</h3>
Internal use, but you can call this function to verify if <tt>lf</tt> lens flare<br />
has a valid id inside array range, see <tt>RAYDIUM_MAX_LENSFLARES</tt>.<br />
<br />
<h3><a name="raydium_lensflare_reset"></a>51.6 void raydium_lensflare_reset(int lf):</h3>
Deactivates and resets <tt>lf</tt> lens flare to the initial state.<br />
<br />
<h3><a name="raydium_lensflare_on"></a>51.7 void raydium_lensflare_on(int lf):</h3>
Turns <tt>lf</tt> lens flare on.<br />
<br />
<h3><a name="raydium_lensflare_off"></a>51.8 void raydium_lensflare_off(int lf):</h3>
Turns <tt>lf</tt> lens flare off.<br />
<br />
<h3><a name="raydium_lensflare_switch"></a>51.9 void raydium_lensflare_switch(int lf):</h3>
Toggles <tt>lf</tt> lens flare state.<br />
<br />
<h3><a name="raydium_lensflare_texture_name"></a>51.10 void raydium_lensflare_texture_name(int lf, char *name):</h3>
This function allows to load custom name lens flare textures.<br />
By default the names of the lens flare textures are:<br />
<tt>LFglow.tga</tt>, <tt>LFstar.tga</tt>, <tt>LFstreak.tga</tt>, <tt>LFhalo.tga</tt>,<br />
<tt>LFray.tga</tt>, <tt>LFanam.tga</tt>.<br />
<br />
However with this function you can define your own set of lens flare textures,<br />
with the following name format:<br />
<tt>LF_&lt;name&gt;_glow.tga</tt>, <tt>LF_&lt;name&gt;_star.tga</tt>, ...<br />
<br />
Example:<br />
<div class="code"><pre>raydium_lensflare_texture_name<span style="color: #66cc66;">&#40;</span>raydium_lensflare_find<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">"myname"</span><span style="color: #66cc66;">&#41;</span>,<span style="color: #ff0000;">"mytex"</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #808080; font-style: italic;">// Lens flare textures will be LF_mytex_glow.tga, LF_mytex_star.tga, ... </span>
&nbsp;</pre>
</div><br />
<br />
If you want to use lens flare effects together with HDR, be sure to enable HDR<br />
calling <tt>raydium_hdr_enable()</tt> before using this function, so the textures<br />
will be automagically set to be HDR able.<br />
<br />
<h3><a name="raydium_lensflare_move"></a>51.11 void raydium_lensflare_move(int lf, float *pos):</h3>
This function will move <tt>lf</tt> lens flare to position <tt>pos</tt>.<br />
<tt>pos</tt> is a float array of three values (x,y,z).<br />
<br />
<h3><a name="raydium_lensflare_move_3f"></a>51.12 void raydium_lensflare_move_3f(int lf, float x, float y, float z):</h3>
Same as above, but using three float values.<br />
<br />
<h3><a name="raydium_lensflare_move_relative_3f"></a>51.13 void raydium_lensflare_move_relative_3f(int lf, float x, float y, float z):</h3>
Same as above, but using relative coordinates. Useful for ingame displacements.<br />
<br />
<h3><a name="raydium_lensflare_fx_isvalid"></a>51.14 signed char raydium_lensflare_fx_isvalid(int fx):</h3>
Internal use, but you can call this function to verify if <tt>fx</tt> FX group<br />
has a valid id inside array range, see <tt>RAYDIUM_LENSFLARE_MAX_FX</tt>.<br />
<br />
<h3><a name="raydium_lensflare_fx_on"></a>51.15 void raydium_lensflare_fx_on(int lf, int fx):</h3>
Turns <tt>fx</tt> FX group on.<br />
<br />
<h3><a name="raydium_lensflare_fx_off"></a>51.16 void raydium_lensflare_fx_off(int lf, int fx):</h3>
Turns <tt>fx</tt> FX group off.<br />
<br />
<h3><a name="raydium_lensflare_fx_switch"></a>51.17 void raydium_lensflare_fx_switch(int lf, int fx):</h3>
Toggles <tt>fx</tt> FX group state.<br />
<br />
<h3><a name="raydium_lensflare_fx_size_change"></a>51.18 void raydium_lensflare_fx_size_change(int lf, int fx, float s):</h3>
Sets <tt>s</tt> size of <tt>fx</tt> FX group within <tt>lf</tt> lens flare effect.<br />
<br />
<h3><a name="raydium_lensflare_fx_color_change"></a>51.19 void raydium_lensflare_fx_color_change(int lf, int fx, float r, float g, float b):</h3>
Sets color of <tt>fx</tt> FX group within <tt>lf</tt> lens flare effect.<br />
<br />
<h3><a name="raydium_lensflare_fx_alpha_change"></a>51.20 void raydium_lensflare_fx_alpha_change(int lf, int fx, float a):</h3>
Sets alpha transparency of <tt>fx</tt> FX group within <tt>lf</tt> lens flare effect.<br />
<br />
<h3><a name="raydium_lensflare_fx_color_rgba"></a>51.21 void raydium_lensflare_fx_color_rgba(int lf, int fx, float r, float g, float b, float a):</h3>
Sets color and alpha of <tt>fx</tt> FX group within <tt>lf</tt> lens flare effect.<br />
<br />
<h3><a name="raydium_lensflare_fx_velocity_change"></a>51.22 void raydium_lensflare_fx_velocity_change(int lf, int fx, float v):</h3>
Sets <tt>v</tt> velocity of <tt>fx</tt> FX group within <tt>lf</tt> lens flare effect.<br />
<br />
<h3><a name="raydium_lensflare_internal_load"></a>51.23 signed char raydium_lensflare_internal_load(int lf, char *filename):</h3>
Internal use, load <tt>lf</tt> lens flare values from <tt>filename</tt> configuration.<br />
<br />
<h3><a name="raydium_lensflare_find"></a>51.24 int raydium_lensflare_find(char *name):</h3>
Resolves lens flare id from its <tt>name</tt>.<br />
<br />
<h3><a name="raydium_lensflare_create"></a>51.25 int raydium_lensflare_create(char *name, char *filename):</h3>
Builds a new lens flare effect with <tt>name</tt> using the values from the<br />
<tt>filename</tt> configuration and returns the new lens flare id or -1 on error.<br />
<br />
You can also call this function several times with the same <tt>name</tt> to<br />
overwrite the lens flare values with different <tt>filename</tt> configurations.<br />
<br />
There are <tt>RAYDIUM_MAX_LENSFLARES</tt> slots available at the same time.<br />
<br />
<h3><a name="raydium_lensflare_internal_point_is_occluded"></a>51.26 signed char raydium_lensflare_internal_point_is_occluded(float x, float y, float z):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_lensflare_fx_internal_draw"></a>51.27 void raydium_lensflare_fx_internal_draw(int lf, int fx, int id, int tex, float d, float cx, float cy, float vx, float vy, float g, float pt):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_lensflare_draw"></a>51.28 void raydium_lensflare_draw(int lf):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_lensflare_draw_all"></a>51.29 void raydium_lensflare_draw_all(void):</h3>
Internal use.<br />
<br />
<a name="atexit.h"></a><br />
<h2>52 Atexit functions:</h2>
<h3><a name="raydium_lensflare_draw_all"></a>52.1 Introduction:</h3>
Raydium provides its own atexit function, since <a href="http://wiki.raydium.org/wiki/Win32">Win32</a> DLL requires a bit<br />
of magic for such things. This support is mainly here for internal reasons,<br />
you can continue to use regular atexit() in your applications.<br />
<br />
<h3><a name="raydium_atexit"></a>52.2 int raydium_atexit(void (*func)(void)):</h3>
As the original atexit():<br />
Register a function to be called at norma program termination.<br />
Functions so registered are called in the reverse order of their<br />
registration; no arguments are passed.<br />
Returns 0 if successful.<br />
<br />
<h3><a name="raydium_atexit_call"></a>52.3 void raydium_atexit_call(void):</h3>
Internal use. Will call all registered functions.<br />
<br />
<h3><a name="raydium_atexit_init"></a>52.4 void raydium_atexit_init(void):</h3>
Internal use.<br />
<br />
<a name="shader.h"></a><br />
<h2>53 Shaders:</h2>
<h3><a name="raydium_atexit_init"></a>53.1 Introduction:</h3>
Raydium provides a support for <a href="http://wiki.raydium.org/wiki/OpenGL">OpenGL</a> Shading Language (GLSL).<br />
This documentation talks only about Raydium Shader API, and not about<br />
the Shading Language itself. With Raydium, shaders works by two: you must<br />
provide a vertex shader and a fragment shader each time. This is a very<br />
usual way to do.<br />
<br />
You must know that <b>only one</b> shader can be active at a time.<br />
Once a shader is loaded, Raydium API allows you to attach this shader to<br />
a texture, so you don't have to deal manually with activation/deactivation.<br />
<br />
You can also change all "uniform" variables from shaders<br />
using <tt>raydium_shader_var_...()</tt> functions.<br />
Into this set, all functions that does <b>not</b> contain the <b>_name</b><br />
suffix <b>are only able to deal with current shader !</b>.<br />
<br />
You can use the global variable <tt>raydium_shader_support</tt> to detect if<br />
current hardware supports GLSL or not (1=OK 0=no shader support).<br />
<br />
Raydium automatically feeds the "vec3 tangent" attribute if the shader<br />
requests it (you only have to declare this attribute), with a<br />
per vertex value. From this, it's easy to generate the binormal<br />
vector in the shader, using a simple cross product:<br />
<div class="code">
<pre>
vec3 binormal = cross(tangent, gl_Normal);
</pre>
</div><br />
<br />
<h3><a name="raydium_shader_init"></a>53.2 void raydium_shader_init(void):</h3>
Internal use. Init all shader subsystem.<br />
<br />
<h3><a name="raydium_shader_isvalid"></a>53.3 signed char raydium_shader_isvalid(int shader):</h3>
Internal use. Returns true (1) if <tt>shader</tt> slot is in bounds and filled.<br />
<br />
<h3><a name="raydium_shader_find"></a>53.4 int raydium_shader_find(char *name):</h3>
Returns shader's ID using its <tt>name</tt>.<br />
<br />
<h3><a name="raydium_shader_infolog"></a>53.5 void raydium_shader_infolog(GLhandleARB shader):</h3>
Internal use.<br />
Reports full driver error message when shader compilation or linking fails.<br />
<br />
<h3><a name="raydium_shader_load"></a>53.6 int raydium_shader_load(char *name, char *file_vert, char *file_frag):</h3>
Loads the vertex shader <tt>file_vert</tt> and the fragment shader <tt>file_frag</tt>.<br />
The shader is stored with the provided <tt>name</tt>. This function returns the<br />
shader ID or -1 in case of failure.<br />
<br />
<h3><a name="raydium_shader_variable"></a>53.7 int raydium_shader_variable(int shader, char *name):</h3>
Returns an ID for the variable "<tt>name</tt> of the provided <tt>shader</tt>.<br />
<br />
<h3><a name="raydium_shader_var_i"></a>53.8 signed char raydium_shader_var_i(int var_id, int value):</h3>
This function will change the <tt>value</tt> of the variable <tt>var_id</tt> of<br />
the current shader.<br />
Value is an integer.<br />
<br />
<h3><a name="raydium_shader_var_i_name"></a>53.9 signed char raydium_shader_var_i_name(char *shader, char *variable, int value):</h3>
Same as above, but using shader's name and variable's name. This function is<br />
able to change the <tt>variable</tt>'s <tt>value</tt> even if the <tt>shader</tt> is not<br />
the current one.<br />
<br />
<h3><a name="raydium_shader_var_f"></a>53.10 signed char raydium_shader_var_f(int var_id, float value):</h3>
This function will change the <tt>value</tt> of the variable <tt>var_id</tt> of<br />
the current shader.<br />
Value is a float.<br />
<br />
<h3><a name="raydium_shader_var_f_name"></a>53.11 signed char raydium_shader_var_f_name(char *shader, char *variable, float value):</h3>
Same as above, but using shader's name and variable's name. This function is<br />
able to change the <tt>variable</tt>'s <tt>value</tt> even if the <tt>shader</tt> is not<br />
the current one.<br />
<br />
<h3><a name="raydium_shader_var_2f"></a>53.12 signed char raydium_shader_var_2f(int var_id, float value1, float value2):</h3>
This function will change the <tt>value</tt> of the variable <tt>var_id</tt> of<br />
the current shader.<br />
Value is an "array" of 2 floats (vec2).<br />
<br />
<h3><a name="raydium_shader_var_2f_name"></a>53.13 signed char raydium_shader_var_2f_name(char *shader, char *variable, float value1, float value2):</h3>
Same as above, but using shader's name and variable's name. This function is<br />
able to change the <tt>variable</tt>'s <tt>value</tt> even if the <tt>shader</tt> is not<br />
the current one.<br />
<br />
<h3><a name="raydium_shader_var_3f"></a>53.14 signed char raydium_shader_var_3f(int var_id, float value1, float value2, float value3):</h3>
This function will change the <tt>value</tt> of the variable <tt>var_id</tt> of<br />
the current shader.<br />
Value is an "array" of 3 floats (vec3).<br />
<br />
<h3><a name="raydium_shader_var_3f_name"></a>53.15 signed char raydium_shader_var_3f_name(char *shader, char *variable, float value1, float value2, float value3):</h3>
Same as above, but using shader's name and variable's name. This function is<br />
able to change the <tt>variable</tt>'s <tt>value</tt> even if the <tt>shader</tt> is not<br />
the current one.<br />
<br />
<h3><a name="raydium_shader_var_4f"></a>53.16 signed char raydium_shader_var_4f(int var_id, float value1, float value2, float value3, float value4):</h3>
This function will change the <tt>value</tt> of the variable <tt>var_id</tt> of<br />
the current shader.<br />
Value is an "array" of 4 floats (vec4).<br />
<br />
<h3><a name="raydium_shader_var_4f_name"></a>53.17 signed char raydium_shader_var_4f_name(char *shader, char *variable, float value1, float value2, float value3, float value4):</h3>
Same as above, but using shader's name and variable's name. This function is<br />
able to change the <tt>variable</tt>'s <tt>value</tt> even if the <tt>shader</tt> is not<br />
the current one.<br />
<br />
<h3><a name="raydium_shader_current"></a>53.18 signed char raydium_shader_current(int shader):</h3>
This function will change the current active shader with <tt>shader</tt>.<br />
To disable a shader and get back to regular <a href="http://wiki.raydium.org/wiki/OpenGL">OpenGL</a> fixed function pipeline,<br />
set <tt>shader</tt> value to <tt>-1</tt>.<br />
<br />
<h3><a name="raydium_shader_current_name"></a>53.19 signed char raydium_shader_current_name(char *shader):</h3>
Same as above, but using shader's name.<br />
<br />
<h3><a name="raydium_shader_attach_texture"></a>53.20 signed char raydium_shader_attach_texture(int shader, int texture):</h3>
During rendering, each time the <tt>texture</tt> will be used by any object,<br />
the <tt>shader</tt> will be activated.<br />
<br />
<h3><a name="raydium_shader_attach_texture_name"></a>53.21 signed char raydium_shader_attach_texture_name(char *shader, char *texture):</h3>
Same as above, but using shader's name and texture's name.<br />
<br />
<h3><a name="raydium_shader_internal_vertex_attributes"></a>53.22 void raydium_shader_internal_vertex_attributes(int i):</h3>
Internal. Per vertex "callback" from render.c for shader attributes.<br />
<br />
<h3><a name="raydium_shader_var_fv"></a>53.23 signed char raydium_shader_var_fv(int var_id, int num, float value[]):</h3>
This function will change the array of <tt>num</tt> <tt>values</tt> of the variable <tt>var_id</tt> of<br />
the current shader.<br />
Value is a float array.<br />
Num is an integer.<br />
<br />
<h3><a name="raydium_shader_var_fv_name"></a>53.24 signed char raydium_shader_var_fv_name(char *shader, char *variable, int num, float value[]):</h3>
Same as above, but using shader's name and variable's name. This function is<br />
able to change the <tt>variable</tt>'s <tt>value</tt> even if the <tt>shader</tt> is not<br />
the current one.<br />
<br />
<a name="shadow.h"></a><br />
<h2>54 Shadows:</h2>
<h3><a name="raydium_shader_var_fv_name"></a>54.1 Introduction:</h3>
Raydium provides a simple support for shadowing, on top of the <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> API.<br />
<br />
This shadowing system will draw all <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> elements to a shadow map, from<br />
light point of vue. This map will then be projected to the <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> ground.<br />
<br />
This method have some drawbacks (shadows are projected all over<br />
Z axis [floor-and-ceiling shadows], one frame lag, ...) but have the huge<br />
advantage to be very fast, even on lew-end hardware, and requires no<br />
particular tuning or setup.<br />
<br />
Short story: see <tt>raydium_shadow_enable()</tt> (available in the console).<br />
<br />
<h3><a name="raydium_shadow_init"></a>54.2 void raydium_shadow_init(void):</h3>
Internal use.<br />
<br />
<h3><a name="raydium_shadow_mode"></a>54.3 void raydium_shadow_mode(char mode):</h3>
Raydium now features more accurate shadowmaps, rendering shadows only<br />
around the camera. See <tt>raydium_shadow_camerabox_size()</tt> if you want to<br />
change the size of the bounding box.<br />
This mode is now the default (<tt>RAYDIUM_SHADOW_MODE_CAMERABOX</tt>), but the old<br />
behavior is available with <tt>RAYDIUM_SHADOW_MODE_FULLSCENE</tt>, and you can<br />
switch from one mode to the other anytime.<br />
<br />
<h3><a name="raydium_shadow_camerabox_size"></a>54.4 void raydium_shadow_camerabox_size(GLfloat size):</h3>
Defines the size of the box around the camera where the shadows are generated<br />
and rendered.<br />
Of course, current shadow mode should be <tt>RAYDIUM_SHADOW_MODE_CAMERABOX</tt>.<br />
Default value is <tt>RAYDIUM_SHADOW_BOX_SIZE</tt> (see shadow.h)<br />
<br />
<h3><a name="raydium_shadow_enable"></a>54.5 void raydium_shadow_enable(void):</h3>
Enable shadows. Shadows are disabled by default.<br />
<br />
<h3><a name="raydium_shadow_disable"></a>54.6 void raydium_shadow_disable(void):</h3>
Disable shadows.<br />
<br />
<h3><a name="raydium_shadow_isenabled"></a>54.7 signed char raydium_shadow_isenabled(void):</h3>
Will return true (1) if shadows are enabled, false (0) otherwise.<br />
<br />
<h3><a name="raydium_shadow_light_main"></a>54.8 void raydium_shadow_light_main(GLuint l):</h3>
Defines wich light is use to generate shadows. Light #0 is the default.<br />
<br />
<h3><a name="raydium_shadow_ground_change"></a>54.9 void raydium_shadow_ground_change(int object):</h3>
Internal use. Defines which object is the ground (where shadows are projected).<br />
<br />
<h3><a name="raydium_shadow_map_generate"></a>54.10 void raydium_shadow_map_generate(void):</h3>
Internal use. Will generate shadow map texture.<br />
<br />
<h3><a name="raydium_shadow_map_render"></a>54.11 void raydium_shadow_map_render(void):</h3>
Internal use. Will apply shadow map to the ground.<br />
<br />
<h3><a name="raydium_shadow_object_draw"></a>54.12 void raydium_shadow_object_draw(GLuint o):</h3>
Internal use. Draws an object to the shadow map.<br />
<br />
<a name="myglut.h"></a><br />
<h2>55 <span class="missingpage">MyGLUT</span><a href="http://wiki.raydium.org/wiki/MyGLUT/edit">?</a>:</h2>
<h3><a name="raydium_shadow_object_draw"></a>55.1 Details:</h3>
<span class="missingpage">MyGLUT</span><a href="http://wiki.raydium.org/wiki/MyGLUT/edit">?</a> is an alternative to "real" GLUT, providing a small subset of the<br />
original API, up to Raydium needs, and tries to enhances some GLUT features,<br />
such as window and keyboard management.<br />
<br />
While staying portable on all Raydium targets, <span class="missingpage">MyGLUT</span><a href="http://wiki.raydium.org/wiki/MyGLUT/edit">?</a> is able to use some<br />
platform-specific features, such as Xinerama for Linux.<br />
<br />
<span class="missingpage">MyGLUT</span><a href="http://wiki.raydium.org/wiki/MyGLUT/edit">?</a> is heavily based on PW, the PLIB windowing library<br />
( <a href="http://plib.sourceforge.net/">http://plib.sourceforge.net/</a> ). Huge thanks to Steve Baker for his great work.<br />
<br />
<a name="misc.h"></a><br />
<h2>56 Miscalleneous:</h2>
<h3><a name="raydium_shadow_object_draw"></a>56.1 License:</h3>
Raydium engine and provided applications are released under both BSD license<br />
and Lesser GPL library license.<br />
See "license.txt" file in the source code directory.<br />
<br />
<h3><a name="raydium_shadow_object_draw"></a>56.2 About CQFD Corp Raydium Team:</h3>
Alphabetical order:<br />
batcox, Blue Prawn, Cocorobix, <a href="http://wiki.raydium.org/wiki/FlexH">FlexH</a>, Jimbo, manproc, Mildred, neub, ouille,<br />
<span class="missingpage">RyLe</span><a href="http://wiki.raydium.org/wiki/RyLe/edit">?</a>, vicente, whisky, willou, Xfennec, Yoltie, ... and many others !<br />
<br />
<h3><a name="raydium_shadow_object_draw"></a>56.3 Todo:</h3>
Wiki <a href="http://wiki.raydium.org/wiki/RoadMap">RoadMap</a> and <span class="missingpage">ToDo</span><a href="http://wiki.raydium.org/wiki/ToDo/edit">?</a>: <a href="http://wiki.raydium.org/wiki/RoadMap">http://wiki.raydium.org/wiki/RoadMap</a><br />
See also my todo: <a href="http://wiki.raydium.org/wiki/XfenneC">http://wiki.raydium.org/wiki/XfenneC</a><br />
<br />
Please, if you start working on a feature, say it on the Wiki.<br />
<br />
<h3><a name="raydium_shadow_object_draw"></a>56.4 Links:</h3>
<a href="http://raydium.org">http://raydium.org</a> (Raydium home)<br />
<a href="svn://raydium.org/raydium/trunk">svn://raydium.org/raydium/trunk</a> (SVN trunk)<br />
<a href="http://raydium.org/svn.php">http://raydium.org/svn.php</a> (SVN "live" changelog)<br />
<a href="http://memak.raydium.org/">http://memak.raydium.org/</a> (<a href="http://wiki.raydium.org/wiki/MeMak">MeMak</a> forum: "a game using Raydium", french)<br />
<a href="http://www.cqfd-corp.org/">http://www.cqfd-corp.org/</a> (CQFD homesite)<br />
mailto:xfennec -AT- cqfd-corp.org<br />
<br />
<h3><a name="raydium_shadow_object_draw"></a>56.5 Greets:</h3>
<b><span class="missingpage">RyLe</span><a href="http://wiki.raydium.org/wiki/RyLe/edit">?</a></b>: original implementation of sound.c (<a href="http://wiki.raydium.org/wiki/OpenAL">OpenAL</a> core sound API)<br />
<br />
<b><a href="http://wiki.raydium.org/wiki/BatcoX">BatcoX</a></b>: export of <a href="http://wiki.raydium.org/wiki/RayODE">RayODE</a> functions into <a href="http://wiki.raydium.org/wiki/RayPHP">RayPHP</a> (reg_api.c)<br />
and additional PHP wrappers (wrappers.c)<br />
<br />
<b>Mildred</b>: header and Makefile generator, dynamic version of<br />
Raydium (.so and .a) for Linux.<br />
<br />
<b>vicente</b>: sprite engine, autoconfig system, and a lot of other things.<br />
<br />
<br />
<h2><a name=chapters></a>Chapters:</h2>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#main.h">1 Introduction to Raydium</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#math.h">2 Maths</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#log.h">3 Logging</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#random.h">4 Random</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#fog.h">5 Fog</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#window.h">6 Window management</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#capture.h">7 Capture (2D)</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#background.h">8 Background</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#clear.h">9 Frame clearing</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#light.h">10 Lights</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#key.h">11 Keyboard & keys</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#mouse.h">12 Mouse</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#texture.h">13 Textures</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#render.h">14 Rendering</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#particle2.h">15 Particle engine</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#callback.h">16 Callbacks</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#normal.h">17 Normals</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#vertex.h">18 vertices</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#land.h">19 Land</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#sky.h">20 Sky and environement boxes</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#internal.h">21 "Internal" informations access</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#file.h">22 Files (generic)</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#file_tri.h">23 Files (TRI format)</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#path.h">24 File path</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#anim.h">25 Animation System</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#camera.h">26 Camera</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#object.h">27 Objects</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#init.h">28 Initialization</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#cli.h">29 Command Line Interface</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#signal.h">30 Signals</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#sound.h">31 Sound and music</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#timecall.h">32 Timecalls</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#network.h">33 Network</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#sprites.h">34 Sprites (viewer axis aligned 2D billboards)</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#osd.h">35 OSD (On Screen Display)</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#console.h">36 In-game console</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#joy.h">37 Joysticks, pads and force feedback</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#gui.h">38 Graphic User Interfaces</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#register.h">39 Data registration</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#php.h">40 PHP scripting engine</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#profile.h">41 Profiling (sort of ...)</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#rayphp.h">42 RayPHP (internals)</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#parser.h">43 Text file parsing</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#live.h">44 Live textures and videos API</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#video.h">45 Video playback</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#ode.h">46 Integrated Physics (ODE)</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#ode_net.h">47 RayODE network layer</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#reg_api.h">48 RegAPI</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#web.h">49 HTTP Web server and tools</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#hdr.h">50 Pseudo HDR</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#lensflare.h">51 Lens flare effects</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#atexit.h">52 Atexit functions</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#shader.h">53 Shaders</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#shadow.h">54 Shadows</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#myglut.h">55 MyGLUT</a></h3>
<h3><a href="http://wiki.raydium.org/wiki/RaydiumApiReference#misc.h">56 Miscalleneous</a></h3>
<br />
<h2><a name=index></a>Index:</h2>
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_action_remove"><tt>raydium_anim_action_remove(int instance,int animation)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_action_set"><tt>raydium_anim_action_set(int instance,int animation, float fadein_seconds, float fadeout_seconds, int autolock)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_animation_get_number"><tt>raydium_anim_animation_get_number(int model)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_animation_scale"><tt>raydium_anim_animation_scale(int model,int animation,float scale)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_bone_get_absolute_posrotq"><tt>raydium_anim_bone_get_absolute_posrotq(int instance,int boneid,float pos[],float *rotq)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_action_remove"><tt>raydium_anim_cal3d_action_remove(int instance, int animation)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_action_set"><tt>raydium_anim_cal3d_action_set(int instance,int animation, float fadein_seconds, float fadeout_seconds, int autolock)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_animation_get_number"><tt>raydium_anim_cal3d_animation_get_number(int model)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_animation_scale"><tt>raydium_anim_cal3d_animation_scale(int model,int animation,float scale)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_instance_attach_meshes"><tt>raydium_anim_cal3d_instance_attach_meshes(int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_instance_destroy"><tt>raydium_anim_cal3d_instance_destroy(int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_instance_new_internal"><tt>raydium_anim_cal3d_instance_new_internal(int num,int model)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_instance_render_mesh"><tt>raydium_anim_cal3d_instance_render_mesh(int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_instance_render_skeleton"><tt>raydium_anim_cal3d_instance_render_skeleton(int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_instance_update"><tt>raydium_anim_cal3d_instance_update(int instance, float time)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_loop_clear"><tt>raydium_anim_cal3d_loop_clear(int instance,int animation, float delay_seconds)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_loop_set"><tt>raydium_anim_cal3d_loop_set(int instance,int animation, float influence, float delay_seconds)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_model_load_internal"><tt>raydium_anim_cal3d_model_load_internal(int a,char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_model_lod_set"><tt>raydium_anim_cal3d_model_lod_set(int instance, float lod_level)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_model_materials_apply"><tt>raydium_anim_cal3d_model_materials_apply(int instance, int set)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_cal3d_skeleton_scale"><tt>raydium_anim_cal3d_skeleton_scale(int model,float scale)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_init"><tt>raydium_anim_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instance_attach_meshes"><tt>raydium_anim_instance_attach_meshes(int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instance_destroy"><tt>raydium_anim_instance_destroy(int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instance_get_pos_rot"><tt>raydium_anim_instance_get_pos_rot(int instance, float posrot[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instance_move"><tt>raydium_anim_instance_move(int instance,float x, float y, float z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instance_new"><tt>raydium_anim_instance_new(int model)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instance_render"><tt>raydium_anim_instance_render(int instance, int type)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instance_render_mesh"><tt>raydium_anim_instance_render_mesh(int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instance_render_skeleton"><tt>raydium_anim_instance_render_skeleton(int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instance_rotate"><tt>raydium_anim_instance_rotate(int instance,float x, float y, float z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instance_rotate_relative"><tt>raydium_anim_instance_rotate_relative(int instance,float x, float y, float z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instance_update"><tt>raydium_anim_instance_update(int instance,float time)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_instances_destroy_all"><tt>raydium_anim_instances_destroy_all(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_loop_clear"><tt>raydium_anim_loop_clear(int instance,int animation, float delay_seconds)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_loop_set"><tt>raydium_anim_loop_set(int instance,int animation, float influence, float delay_seconds)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_model_destroy"><tt>raydium_anim_model_destroy(int a)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_model_load"><tt>raydium_anim_model_load(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_model_lod_set"><tt>raydium_anim_model_lod_set(int instance, float lod_level)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_model_materials_apply"><tt>raydium_anim_model_materials_apply(int instance, int set)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_models_destroy_all"><tt>raydium_anim_models_destroy_all(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_anim_skeleton_scale"><tt>raydium_anim_skeleton_scale(int model,float scale)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_atexit"><tt>raydium_atexit(void (*func)(void))</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_atexit_call"><tt>raydium_atexit_call(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_atexit_init"><tt>raydium_atexit_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_background_color_change"><tt>raydium_background_color_change (GLfloat r, GLfloat g, GLfloat b, GLfloat a)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_callback"><tt>raydium_callback (void (*loop))</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_callback_display_set"><tt>raydium_callback_display_set(void (*fdisplay))</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_callback_image"><tt>raydium_callback_image (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_callback_set"><tt>raydium_callback_set (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_freemove"><tt>raydium_camera_freemove(int move)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_get_data"><tt>raydium_camera_get_data(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_internal"><tt>raydium_camera_internal (GLfloat x, GLfloat y, GLfloat z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_internal_prepare"><tt>raydium_camera_internal_prepare(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_look_at"><tt>raydium_camera_look_at (GLfloat x, GLfloat y, GLfloat z, GLfloat x_to, GLfloat y_to, GLfloat z_to)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_orbitmove"><tt>raydium_camera_orbitmove(float x_to, float y_to, float z_to)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_path_draw"><tt>raydium_camera_path_draw (int p)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_path_draw_name"><tt>raydium_camera_path_draw_name (char *path)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_path_find"><tt>raydium_camera_path_find (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_path_init"><tt>raydium_camera_path_init (int p)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_path_init_all"><tt>raydium_camera_path_init_all (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_path_load"><tt>raydium_camera_path_load (char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_path_reset"><tt>raydium_camera_path_reset(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_place"><tt>raydium_camera_place (GLfloat x, GLfloat y, GLfloat z, GLfloat lacet, GLfloat tangage, GLfloat roulis)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_replace"><tt>raydium_camera_replace (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_replace_go"><tt>raydium_camera_replace_go (GLfloat * pos, GLfloat * R)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_rumble"><tt>raydium_camera_rumble(GLfloat amplitude, GLfloat ampl_evo, GLfloat secs)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_smooth"><tt>raydium_camera_smooth (GLfloat px, GLfloat py, GLfloat pz, GLfloat lx, GLfloat ly, GLfloat lz, GLfloat zoom, GLfloat roll, GLfloat step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_smooth_element_to_path_name"><tt>raydium_camera_smooth_element_to_path_name (char *element, char *path, GLfloat path_step, GLfloat smooth_step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_smooth_element_to_path_offset"><tt>raydium_camera_smooth_element_to_path_offset (int element, GLfloat offset_x, GLfloat offset_y, GLfloat offset_z, char *path, GLfloat path_step, GLfloat smooth_step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_smooth_element_to_path_offset_name"><tt>raydium_camera_smooth_element_to_path_offset_name (char *element, GLfloat offset_x, GLfloat offset_y, GLfloat offset_z, char *path, GLfloat path_step, GLfloat smooth_step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_smooth_path"><tt>raydium_camera_smooth_path (char *path, GLfloat step, GLfloat * x, GLfloat * y, GLfloat * z, GLfloat * zoom, GLfloat * roll)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_smooth_path_to_element"><tt>raydium_camera_smooth_path_to_element (char *path, int element, GLfloat path_step, GLfloat smooth_step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_smooth_path_to_element_name"><tt>raydium_camera_smooth_path_to_element_name (char *path, char *element, GLfloat path_step, GLfloat smooth_step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_smooth_path_to_path"><tt>raydium_camera_smooth_path_to_path (char *path_from, GLfloat path_step_from, char *path_to, GLfloat path_step_to, GLfloat smooth_step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_smooth_path_to_pos"><tt>raydium_camera_smooth_path_to_pos (char *path, GLfloat lx, GLfloat ly, GLfloat lz, GLfloat path_step, GLfloat smooth_step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_smooth_pos_to_path"><tt>raydium_camera_smooth_pos_to_path (GLfloat lx, GLfloat ly, GLfloat lz, char *path, GLfloat path_step, GLfloat smooth_step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_camera_vectors"><tt>raydium_camera_vectors (GLfloat * res3)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_capture_filename_auto"><tt>raydium_capture_filename_auto(char *dest,char *format)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_capture_frame"><tt>raydium_capture_frame(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_capture_frame_auto"><tt>raydium_capture_frame_auto(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_capture_frame_jpeg"><tt>raydium_capture_frame_jpeg(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_capture_frame_jpeg_auto"><tt>raydium_capture_frame_jpeg_auto(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_capture_frame_jpeg_now"><tt>raydium_capture_frame_jpeg_now(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_capture_frame_now"><tt>raydium_capture_frame_now(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_clear_color_update"><tt>raydium_clear_color_update (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_clear_frame"><tt>raydium_clear_frame (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_complete"><tt>raydium_console_complete (char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_draw"><tt>raydium_console_draw (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_event"><tt>raydium_console_event (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_exec_last_command"><tt>raydium_console_exec_last_command (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_exec_script"><tt>raydium_console_exec_script (char *file)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_gets"><tt>raydium_console_gets (char *where)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_history_add"><tt>raydium_console_history_add (char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_history_next"><tt>raydium_console_history_next (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_history_previous"><tt>raydium_console_history_previous (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_history_read"><tt>raydium_console_history_read(char * *hist)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_history_save"><tt>raydium_console_history_save (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_init"><tt>raydium_console_init (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_internal_isalphanumuscore"><tt>raydium_console_internal_isalphanumuscore (char c)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_console_line_add"><tt>raydium_console_line_add (char *format, ...)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_basename"><tt>raydium_file_basename(char *dest,char *from)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_binary_fgets"><tt>raydium_file_binary_fgets(char *dest, int max, FILE *stream)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_cache_flush"><tt>raydium_file_cache_flush(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_directory_writable"><tt>raydium_file_directory_writable(char *path)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_dirname"><tt>raydium_file_dirname(char *dest,char *from)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_ext"><tt>raydium_file_ext(char *dest, char *from)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_fopen"><tt>raydium_file_fopen(char *file, char *mode)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_home_path"><tt>raydium_file_home_path(char *file)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_home_path_cpy"><tt>raydium_file_home_path_cpy(char *file, char *dest)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_isdir"><tt>raydium_file_isdir(char *path)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_load"><tt>raydium_file_load(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_log_fopen_display"><tt>raydium_file_log_fopen_display(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_readable"><tt>raydium_file_readable(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_rm_rf"><tt>raydium_file_rm_rf(char *path)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_set_textures"><tt>raydium_file_set_textures (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_sum_simple"><tt>raydium_file_sum_simple(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_sum_simple_mode"><tt>raydium_file_sum_simple_mode(char *filename,char *mode)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_file_utime"><tt>raydium_file_utime(const char *filename, struct utimbuf *times)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_apply"><tt>raydium_fog_apply(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_color_update"><tt>raydium_fog_color_update (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_density"><tt>raydium_fog_density(GLfloat density)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_disable"><tt>raydium_fog_disable (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_enable"><tt>raydium_fog_enable (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_far"><tt>raydium_fog_far(GLfloat far)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_mode"><tt>raydium_fog_mode(GLuint mode)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_near"><tt>raydium_fog_near(GLfloat near)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_volumetric_disable"><tt>raydium_fog_volumetric_disable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_volumetric_enable"><tt>raydium_fog_volumetric_enable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_volumetric_support"><tt>raydium_fog_volumetric_support(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_fog_wait"><tt>raydium_fog_wait(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_button_clicked"><tt>raydium_gui_button_clicked(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_button_create"><tt>raydium_gui_button_create(char *name, int window,  GLfloat px, GLfloat py, char *caption, void *OnClick)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_button_create_simple"><tt>raydium_gui_button_create_simple(char *name, int window,  GLfloat px, GLfloat py, char *caption)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_button_draw"><tt>raydium_gui_button_draw(int w, int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_button_read"><tt>raydium_gui_button_read(int window, int widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_button_write"><tt>raydium_gui_button_write(int window, int widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_check_create"><tt>raydium_gui_check_create(char *name, int window,  GLfloat px, GLfloat py, char *caption, signed char checked)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_check_draw"><tt>raydium_gui_check_draw(int w, int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_check_read"><tt>raydium_gui_check_read(int window, int widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_check_write"><tt>raydium_gui_check_write(int window, int widget, int value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_combo_create"><tt>raydium_gui_combo_create(char *name, int window,  GLfloat px, GLfloat py, char *items, int current)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_combo_draw"><tt>raydium_gui_combo_draw(int w, int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_combo_read"><tt>raydium_gui_combo_read(int window, int widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_combo_write"><tt>raydium_gui_combo_write(int window, int widget, int value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_draw"><tt>raydium_gui_draw(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_edit_create"><tt>raydium_gui_edit_create(char *name, int window,  GLfloat px, GLfloat py, char *default_text)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_edit_draw"><tt>raydium_gui_edit_draw(int w, int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_edit_read"><tt>raydium_gui_edit_read(int window, int widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_edit_write"><tt>raydium_gui_edit_write(int window, int widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_hide"><tt>raydium_gui_hide(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_init"><tt>raydium_gui_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_internal_object_create"><tt>raydium_gui_internal_object_create(char *name, int window, signed char type, GLfloat px, GLfloat py, GLfloat sizex, GLfloat sizey, GLfloat font_size)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_isvisible"><tt>raydium_gui_isvisible(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_label_create"><tt>raydium_gui_label_create(char *name, int window,  GLfloat px, GLfloat py, char *caption, GLfloat r, GLfloat g, GLfloat b)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_label_draw"><tt>raydium_gui_label_draw(int w, int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_label_read"><tt>raydium_gui_label_read(int window, int widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_label_write"><tt>raydium_gui_label_write(int window, int widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_list_id"><tt>raydium_gui_list_id(char *item, char *list)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_read"><tt>raydium_gui_read(int window, int widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_read_name"><tt>raydium_gui_read_name(char *window, char *widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_read_widget"><tt>raydium_gui_read_widget(raydium_gui_Object *w, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_show"><tt>raydium_gui_show(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_theme_init"><tt>raydium_gui_theme_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_theme_load"><tt>raydium_gui_theme_load(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_track_create"><tt>raydium_gui_track_create(char *name, int window,  GLfloat px, GLfloat py, int min, int max, int current)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_track_draw"><tt>raydium_gui_track_draw(int w, int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_track_read"><tt>raydium_gui_track_read(int window, int widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_track_write"><tt>raydium_gui_track_write(int window, int widget, int value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_widget_draw_internal"><tt>raydium_gui_widget_draw_internal(GLfloat *uv, GLfloat *xy)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_widget_find"><tt>raydium_gui_widget_find(char *name, int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_widget_focus"><tt>raydium_gui_widget_focus(int widget, int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_widget_focus_name"><tt>raydium_gui_widget_focus_name(char *widget, char *window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_widget_isvalid"><tt>raydium_gui_widget_isvalid(int i, int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_widget_next"><tt>raydium_gui_widget_next(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_widget_sizes"><tt>raydium_gui_widget_sizes(GLfloat sizex, GLfloat sizey, GLfloat font_size)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_window_OnDelete"><tt>raydium_gui_window_OnDelete(int window, void *OnDelete)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_window_OnDelete_name"><tt>raydium_gui_window_OnDelete_name(char *window, void *OnDelete)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_window_create"><tt>raydium_gui_window_create(char *name, GLfloat px, GLfloat py, GLfloat sizex, GLfloat sizey)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_window_delete"><tt>raydium_gui_window_delete(int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_window_delete_name"><tt>raydium_gui_window_delete_name(char *window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_window_draw"><tt>raydium_gui_window_draw(int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_window_find"><tt>raydium_gui_window_find(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_window_init"><tt>raydium_gui_window_init(int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_window_isvalid"><tt>raydium_gui_window_isvalid(int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_write"><tt>raydium_gui_write(int window, int widget, char *str, int value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_write_name"><tt>raydium_gui_write_name(char *window, char *widget, char *str, int value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_zone_create"><tt>raydium_gui_zone_create(char *name, int window,  GLfloat px, GLfloat py, GLfloat sx, GLfloat sy, int tag, void *OnClick)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_zone_draw"><tt>raydium_gui_zone_draw(int w, int window)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_gui_zone_read"><tt>raydium_gui_zone_read(int window, int widget, char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_block"><tt>raydium_hdr_block(signed char blocking)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_blur"><tt>raydium_hdr_blur(unsigned char *in, unsigned char *out)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_disable"><tt>raydium_hdr_disable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_enable"><tt>raydium_hdr_enable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_init"><tt>raydium_hdr_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_internal_window_malloc"><tt>raydium_hdr_internal_window_malloc(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_map"><tt>raydium_hdr_map(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_map_apply"><tt>raydium_hdr_map_apply(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_settings"><tt>raydium_hdr_settings(GLfloat *color_local, GLfloat *color_ambient, float eye_speed, float alpha_max)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_settings_color_ambient"><tt>raydium_hdr_settings_color_ambient(GLfloat r, GLfloat g, GLfloat b, GLfloat a)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_settings_color_local"><tt>raydium_hdr_settings_color_local(GLfloat r, GLfloat g, GLfloat b, GLfloat a)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_settings_eye"><tt>raydium_hdr_settings_eye(float speed, float alpha_max)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_texture"><tt>raydium_hdr_texture(int texture, signed char hdr)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_texture_name"><tt>raydium_hdr_texture_name(char *texture, signed char hdr)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_hdr_texture_reset"><tt>raydium_hdr_texture_reset(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_init_args"><tt>raydium_init_args(int argc, char * *argv)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_init_args_name"><tt>raydium_init_args_name(int argc, char * *argv, char *app_name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_init_cli_option"><tt>raydium_init_cli_option(char *option, char *value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_init_cli_option_default"><tt>raydium_init_cli_option_default(char *option, char *value, char *default_value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_init_engine"><tt>raydium_init_engine (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_init_internal_homedir_find"><tt>raydium_init_internal_homedir_find(char *)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_init_key"><tt>raydium_init_key (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_init_lights"><tt>raydium_init_lights (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_init_load"><tt>raydium_init_load(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_init_objects"><tt>raydium_init_objects (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_init_reset"><tt>raydium_init_reset (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_internal_dump"><tt>raydium_internal_dump (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_internal_dump_matrix"><tt>raydium_internal_dump_matrix (int n)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_internal_live_close"><tt>raydium_internal_live_close(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_internal_live_video_callback"><tt>raydium_internal_live_video_callback(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_joy_ff_autocenter"><tt>raydium_joy_ff_autocenter (int perc)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_joy_ff_tremble_set"><tt>raydium_joy_ff_tremble_set (GLfloat period, GLfloat force)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_joy_key_emul"><tt>raydium_joy_key_emul (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_key_normal_callback"><tt>raydium_key_normal_callback (GLuint key, int x, int y)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_key_pressed"><tt>raydium_key_pressed (GLuint key)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_key_special_callback"><tt>raydium_key_special_callback (GLuint key, int x, int y)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_key_special_up_callback"><tt>raydium_key_special_up_callback (GLuint key, int x, int y)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_create"><tt>raydium_lensflare_create(char *name, char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_disable"><tt>raydium_lensflare_disable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_draw"><tt>raydium_lensflare_draw(int lf)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_draw_all"><tt>raydium_lensflare_draw_all(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_enable"><tt>raydium_lensflare_enable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_find"><tt>raydium_lensflare_find(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_fx_alpha_change"><tt>raydium_lensflare_fx_alpha_change(int lf, int fx, float a)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_fx_color_change"><tt>raydium_lensflare_fx_color_change(int lf, int fx, float r, float g, float b)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_fx_color_rgba"><tt>raydium_lensflare_fx_color_rgba(int lf, int fx, float r, float g, float b, float a)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_fx_internal_draw"><tt>raydium_lensflare_fx_internal_draw(int lf, int fx, int id, int tex, float d, float cx, float cy, float vx, float vy, float g, float pt)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_fx_isvalid"><tt>raydium_lensflare_fx_isvalid(int fx)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_fx_off"><tt>raydium_lensflare_fx_off(int lf, int fx)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_fx_on"><tt>raydium_lensflare_fx_on(int lf, int fx)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_fx_size_change"><tt>raydium_lensflare_fx_size_change(int lf, int fx, float s)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_fx_switch"><tt>raydium_lensflare_fx_switch(int lf, int fx)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_fx_velocity_change"><tt>raydium_lensflare_fx_velocity_change(int lf, int fx, float v)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_init"><tt>raydium_lensflare_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_internal_load"><tt>raydium_lensflare_internal_load(int lf, char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_internal_point_is_occluded"><tt>raydium_lensflare_internal_point_is_occluded(float x, float y, float z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_isvalid"><tt>raydium_lensflare_isvalid(int lf)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_move"><tt>raydium_lensflare_move(int lf, float *pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_move_3f"><tt>raydium_lensflare_move_3f(int lf, float x, float y, float z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_move_relative_3f"><tt>raydium_lensflare_move_relative_3f(int lf, float x, float y, float z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_off"><tt>raydium_lensflare_off(int lf)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_on"><tt>raydium_lensflare_on(int lf)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_reset"><tt>raydium_lensflare_reset(int lf)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_switch"><tt>raydium_lensflare_switch(int lf)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_lensflare_texture_name"><tt>raydium_lensflare_texture_name(int lf, char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_blink_internal_update"><tt>raydium_light_blink_internal_update (GLuint l)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_blink_start"><tt>raydium_light_blink_start (GLuint l, int fpc)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_callback"><tt>raydium_light_callback (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_disable"><tt>raydium_light_disable (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_enable"><tt>raydium_light_enable (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_move"><tt>raydium_light_move (GLuint l, GLfloat * vect)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_off"><tt>raydium_light_off (GLuint l)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_on"><tt>raydium_light_on (GLuint l)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_reset"><tt>raydium_light_reset (GLuint l)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_switch"><tt>raydium_light_switch (GLuint l)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_texture"><tt>raydium_light_texture(int texture, signed char enable)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_texture_name"><tt>raydium_light_texture_name(char *name, signed char enable)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_to_GL_light"><tt>raydium_light_to_GL_light (GLuint l)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_update_all"><tt>raydium_light_update_all (GLuint l)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_update_intensity"><tt>raydium_light_update_intensity (GLuint l)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_update_position"><tt>raydium_light_update_position (GLuint l)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_light_update_position_all"><tt>raydium_light_update_position_all (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_init"><tt>raydium_live_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_create"><tt>raydium_live_texture_create(char *as, unsigned char *data_source, int tx, int ty, int bpp)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_draw"><tt>raydium_live_texture_draw(int livetex, GLfloat alpha,GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_draw_name"><tt>raydium_live_texture_draw_name(char *texture, GLfloat alpha,GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_find"><tt>raydium_live_texture_find(int original_texture)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_find_free"><tt>raydium_live_texture_find_free(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_isvalid"><tt>raydium_live_texture_isvalid(int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_mask"><tt>raydium_live_texture_mask(int livetex, GLfloat alpha)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_mask_name"><tt>raydium_live_texture_mask_name(char *texture, GLfloat alpha)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_refresh"><tt>raydium_live_texture_refresh(int livetex)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_refresh_callback_set"><tt>raydium_live_texture_refresh_callback_set(int livetex, void *callback)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_refresh_callback_set_name"><tt>raydium_live_texture_refresh_callback_set_name(char *texture, void *callback)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_refresh_name"><tt>raydium_live_texture_refresh_name(char *texture)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_texture_video"><tt>raydium_live_texture_video(int device_id, char *as)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_video_find_free"><tt>raydium_live_video_find_free(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_video_isvalid"><tt>raydium_live_video_isvalid(int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_video_open"><tt>raydium_live_video_open(char *device, int sizex, int sizey)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_video_open_auto"><tt>raydium_live_video_open_auto(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_live_video_read"><tt>raydium_live_video_read(raydium_live_Device *dev)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_log"><tt>raydium_log (char *format, ...)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_loop"><tt>raydium_loop(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_MatrixInverse"><tt>raydium_math_MatrixInverse(const float *m,float *out)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_abs"><tt>raydium_math_abs(a) (macro)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_angle_from_projections"><tt>raydium_math_angle_from_projections(float px, float py)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_cos"><tt>raydium_math_cos (GLfloat i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_cos_inv"><tt>raydium_math_cos_inv (GLfloat i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_hms"><tt>raydium_math_hms(double t, int *h, int *m, int *s, int *ms)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_isfloat"><tt>raydium_math_isfloat(a) (macro)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_max"><tt>raydium_math_max(a,b) (macro)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_min"><tt>raydium_math_min(a,b) (macro)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_point_unproject_3D"><tt>raydium_math_point_unproject_3D(GLfloat x, GLfloat y, GLfloat z, float* resx, float* resy)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_pos_get_modelview"><tt>raydium_math_pos_get_modelview (GLfloat * res)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_pos_to_matrix"><tt>raydium_math_pos_to_matrix (GLfloat * pos, GLfloat * m)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_pow2_next"><tt>raydium_math_pow2_next(int value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_quaternion_multiply"><tt>raydium_math_quaternion_multiply(float *q1, float *q2, float *result)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_quaternion_normalize"><tt>raydium_math_quaternion_normalize(float *quat)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_quaternion_slerp"><tt>raydium_math_quaternion_slerp(float *start, float *end, float alpha,float *result)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_rotate"><tt>raydium_math_rotate (GLfloat * p, GLfloat rx, GLfloat ry, GLfloat rz, GLfloat * res)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_round"><tt>raydium_math_round(a) (macro)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_sin"><tt>raydium_math_sin (GLfloat i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_math_sin_inv"><tt>raydium_math_sin_inv (GLfloat i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_mouse_button_pressed"><tt>raydium_mouse_button_pressed (int button)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_mouse_click_callback"><tt>raydium_mouse_click_callback (int but, int state, int x, int y)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_mouse_grab_delta"><tt>raydium_mouse_grab_delta(int *x, int *y)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_mouse_hide"><tt>raydium_mouse_hide() (macro)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_mouse_init"><tt>raydium_mouse_init (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_mouse_isvisible"><tt>raydium_mouse_isvisible(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_mouse_move"><tt>raydium_mouse_move(int x, int y)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_mouse_move_callback"><tt>raydium_mouse_move_callback (int x, int y)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_mouse_show"><tt>raydium_mouse_show() (macro)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_broadcast"><tt>raydium_network_broadcast (signed char type, char *buff)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_client_connect_to"><tt>raydium_network_client_connect_to (char *server)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_client_disconnect"><tt>raydium_network_client_disconnect(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_client_discover"><tt>raydium_network_client_discover(char *game,int version)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_close"><tt>raydium_network_close (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_discover_getserver"><tt>raydium_network_discover_getserver(int num, char *name, char *ip, char *info, int *player_count, int *player_max)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_discover_numservers"><tt>raydium_network_discover_numservers(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_init"><tt>raydium_network_init (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_init_sub"><tt>raydium_network_init_sub(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_internal_dump"><tt>raydium_network_internal_dump (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_internal_find_delay_addr"><tt>raydium_network_internal_find_delay_addr (int player)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_internal_server_delays_dump"><tt>raydium_network_internal_server_delays_dump (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_internet_test"><tt>raydium_network_internet_test(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_linux_find_broadcast_interfaces"><tt>raydium_network_linux_find_broadcast_interfaces(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_netcall_add"><tt>raydium_network_netcall_add (void *ptr, int type, signed char tcp)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_netcall_exec"><tt>raydium_network_netcall_exec (int type, char *buff)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_nid_element_find"><tt>raydium_network_nid_element_find (int nid)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_player_name"><tt>raydium_network_player_name (char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_propag_add"><tt>raydium_network_propag_add (int type, void *data, int size)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_propag_find"><tt>raydium_network_propag_find (int type)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_propag_recv"><tt>raydium_network_propag_recv (int type, char *buff)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_propag_refresh"><tt>raydium_network_propag_refresh (int type)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_propag_refresh_all"><tt>raydium_network_propag_refresh_all (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_propag_refresh_id"><tt>raydium_network_propag_refresh_id (int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_queue_ack_recv"><tt>raydium_network_queue_ack_recv (int type, char *buff)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_queue_ack_send"><tt>raydium_network_queue_ack_send (unsigned short tcpid, struct sockaddr *to)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_queue_check_time"><tt>raydium_network_queue_check_time (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_queue_element_add"><tt>raydium_network_queue_element_add (char *packet, struct sockaddr *to)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_queue_element_init"><tt>raydium_network_queue_element_init (raydium_network_Tcp * e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_queue_is_tcpid"><tt>raydium_network_queue_is_tcpid (int type)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_queue_tcpid_gen"><tt>raydium_network_queue_tcpid_gen (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_queue_tcpid_known"><tt>raydium_network_queue_tcpid_known (unsigned short tcpid, unsigned short player)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_queue_tcpid_known_add"><tt>raydium_network_queue_tcpid_known_add (int tcpid, int player)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_read"><tt>raydium_network_read (int *id, signed char *type, char *buff)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_read_faked"><tt>raydium_network_read_faked(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_read_flushed"><tt>raydium_network_read_flushed (int *id, signed char *type, char *buff)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_server_broadcast"><tt>raydium_network_server_broadcast(char *name, char *app_or_mod, int version)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_server_broadcast_check"><tt>raydium_network_server_broadcast_check(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_server_broadcast_info"><tt>raydium_network_server_broadcast_info(char *info)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_server_create"><tt>raydium_network_server_create (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_set_socket_block"><tt>raydium_network_set_socket_block (int block)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_socket_close"><tt>raydium_network_socket_close(int fd)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_socket_is_readable"><tt>raydium_network_socket_is_readable(int fd)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_timeout_check"><tt>raydium_network_timeout_check (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_network_write"><tt>raydium_network_write (struct sockaddr *to, int from, signed char type, char *buff)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_normal_generate_lastest_tangent"><tt>raydium_normal_generate_lastest_tangent(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_normal_generate_lastest_triangle"><tt>raydium_normal_generate_lastest_triangle (int default_visu)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_normal_internal_smooth_generic"><tt>raydium_normal_internal_smooth_generic(char *type,GLuint from, GLuint to,GLfloat *in,GLfloat *out)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_normal_regenerate_all"><tt>raydium_normal_regenerate_all (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_normal_restore_all"><tt>raydium_normal_restore_all (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_normal_smooth_all"><tt>raydium_normal_smooth_all (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_normal_smooth_from_to"><tt>raydium_normal_smooth_from_to(GLuint from, GLuint to)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_normal_tangent_smooth_all"><tt>raydium_normal_tangent_smooth_all (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_normal_tangent_smooth_from_to"><tt>raydium_normal_tangent_smooth_from_to(GLuint from, GLuint to)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim"><tt>raydium_object_anim(int object, int instance, int anim)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_automatic"><tt>raydium_object_anim_automatic(int object, int anim, GLfloat factor)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_automatic_name"><tt>raydium_object_anim_automatic_name(char *object, char *anim, GLfloat factor)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_default"><tt>raydium_object_anim_default(int object, int anim)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_find"><tt>raydium_object_anim_find(int object, char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_frame"><tt>raydium_object_anim_frame(int object, int instance, GLfloat frame)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_frame_name"><tt>raydium_object_anim_frame_name(char *object, int instance, GLfloat frame)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_generate_internal"><tt>raydium_object_anim_generate_internal(int object, int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_instance"><tt>raydium_object_anim_instance(int object, int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_instance_name"><tt>raydium_object_anim_instance_name(char *object, int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_ispunctually"><tt>raydium_object_anim_ispunctually(int object, int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_ispunctually_name"><tt>raydium_object_anim_ispunctually_name(char *object, int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_name"><tt>raydium_object_anim_name(char *object, int instance, char *anim)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_punctually"><tt>raydium_object_anim_punctually(int object, int anim, int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_anim_punctually_name"><tt>raydium_object_anim_punctually_name(char *object, char *anim, int instance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_callback"><tt>raydium_object_callback(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_deform"><tt>raydium_object_deform (GLuint obj, GLfloat ampl)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_deform_name"><tt>raydium_object_deform_name (char *name, GLfloat ampl)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_draw"><tt>raydium_object_draw (GLuint o)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_draw_name"><tt>raydium_object_draw_name (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_find"><tt>raydium_object_find (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_find_axes_max"><tt>raydium_object_find_axes_max (GLuint obj, GLfloat * tx, GLfloat * ty, GLfloat * tz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_find_center_factors"><tt>raydium_object_find_center_factors(GLuint obj, GLfloat *tx, GLfloat *ty, GLfloat *tz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_find_dist_max"><tt>raydium_object_find_dist_max (GLuint obj)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_find_load"><tt>raydium_object_find_load (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_find_minmax"><tt>raydium_object_find_minmax(GLuint obj, GLfloat *min, GLfloat *max)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_isvalid"><tt>raydium_object_isvalid(int obj)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_load"><tt>raydium_object_load (char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_reset"><tt>raydium_object_reset (GLuint o)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_tangent_smooth"><tt>raydium_object_tangent_smooth(GLuint obj)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_tangent_smooth_name"><tt>raydium_object_tangent_smooth_name(char *obj)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_object_translate"><tt>raydium_object_translate(GLuint obj,GLfloat tx,GLfloat ty,GLfloat tz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_autodisable_get"><tt>raydium_ode_autodisable_get(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_autodisable_set"><tt>raydium_ode_autodisable_set(signed char autod)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_callback"><tt>raydium_ode_callback (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_3d"><tt>raydium_ode_capture_3d(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_internal_create"><tt>raydium_ode_capture_internal_create(int type, int id, dReal *sizes, char *mesh)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_internal_create_all"><tt>raydium_ode_capture_internal_create_all(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_internal_delete"><tt>raydium_ode_capture_internal_delete(int id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_internal_read_event"><tt>raydium_ode_capture_internal_read_event(signed char sense)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_internal_read_move"><tt>raydium_ode_capture_internal_read_move(signed char pass)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_play"><tt>raydium_ode_capture_play(char *rrp_filename, signed char change_ground)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_play_callback"><tt>raydium_ode_capture_play_callback(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_play_internal_index_build"><tt>raydium_ode_capture_play_internal_index_build(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_record"><tt>raydium_ode_capture_record(char *rrp_filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_record_rate"><tt>raydium_ode_capture_record_rate(char *rrp_filename, int rate_hz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_record_stop"><tt>raydium_ode_capture_record_stop(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_seek"><tt>raydium_ode_capture_seek(double time)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_seek_rel"><tt>raydium_ode_capture_seek_rel(double time)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_speed"><tt>raydium_ode_capture_speed(GLfloat factor)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_capture_stop"><tt>raydium_ode_capture_stop(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_contact_feedback_get"><tt>raydium_ode_contact_feedback_get(int custom_id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_contact_feedback_save"><tt>raydium_ode_contact_feedback_save(int custom_id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_draw_all"><tt>raydium_ode_draw_all(signed char names)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_draw_all_post"><tt>raydium_ode_draw_all_post(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_OnBlow"><tt>raydium_ode_element_OnBlow (int e, void *OnBlow)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_OnBlow_name"><tt>raydium_ode_element_OnBlow_name (char *e, void *OnBlow)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_OnDelete"><tt>raydium_ode_element_OnDelete (int e, void *OnDelete)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_OnDelete_name"><tt>raydium_ode_element_OnDelete_name (char *e, void *OnDelete)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_RelPointPos"><tt>raydium_ode_element_RelPointPos (int e, dReal px, dReal py, dReal pz, dReal * res)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_RelPointPos_name"><tt>raydium_ode_element_RelPointPos_name (char *e, dReal px, dReal py, dReal pz, dReal * res)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_aabb_get"><tt>raydium_ode_element_aabb_get (int element, dReal * aabb)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_aabb_get_name"><tt>raydium_ode_element_aabb_get_name (char *element, dReal * aabb)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_addforce"><tt>raydium_ode_element_addforce (int e, dReal *vect)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_addforce_3f"><tt>raydium_ode_element_addforce_3f (int e, dReal fx, dReal fu, dReal fz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_addforce_name"><tt>raydium_ode_element_addforce_name (char *e, dReal * vect)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_addforce_name_3f"><tt>raydium_ode_element_addforce_name_3f (char *e, dReal vx, dReal vy, dReal vz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_addtorque"><tt>raydium_ode_element_addtorque (int e, dReal * vect)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_addtorque_3f"><tt>raydium_ode_element_addtorque_3f(int e, dReal vx, dReal vy, dReal vz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_addtorque_name"><tt>raydium_ode_element_addtorque_name (char *e, dReal * vect)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_addtorque_name_3f"><tt>raydium_ode_element_addtorque_name_3f (char *e, dReal vx, dReal vy, dReal vz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_angularvelocity_get"><tt>raydium_ode_element_angularvelocity_get(int elem)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_angularvelocity_get_name"><tt>raydium_ode_element_angularvelocity_get_name(char *elem)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_angularvelocity_set"><tt>raydium_ode_element_angularvelocity_set (int e,dReal *avel)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_angularvelocity_set_3f"><tt>raydium_ode_element_angularvelocity_set_3f (int e,dReal avelx,dReal avely,dReal avelz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_angularvelocity_set_name"><tt>raydium_ode_element_angularvelocity_set_name (char * e,dReal *avel)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_angularvelocity_set_name_3f"><tt>raydium_ode_element_angularvelocity_set_name_3f (char * e,dReal avelx,dReal avely,dReal avelz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_camera_inboard"><tt>raydium_ode_element_camera_inboard (int e, dReal px, dReal py, dReal pz, dReal lookx, dReal looky, dReal lookz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_camera_inboard_name"><tt>raydium_ode_element_camera_inboard_name (char *name, dReal px, dReal py, dReal pz, dReal lookx, dReal looky, dReal lookz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_data_get"><tt>raydium_ode_element_data_get (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_data_get_name"><tt>raydium_ode_element_data_get_name (char *e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_data_set"><tt>raydium_ode_element_data_set (int e, void *data)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_data_set_name"><tt>raydium_ode_element_data_set_name (char *e, void *data)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_delete"><tt>raydium_ode_element_delete (int e, signed char deletejoints)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_delete_name"><tt>raydium_ode_element_delete_name (char *name, signed char deletejoints)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_disable_get"><tt>raydium_ode_element_disable_get(int elem)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_disable_get_name"><tt>raydium_ode_element_disable_get_name (char *e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_disable_set"><tt>raydium_ode_element_disable_set(int elem, signed char disable_state)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_disable_set_name"><tt>raydium_ode_element_disable_set_name (char *e, signed char disable_state)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_find"><tt>raydium_ode_element_find (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_fix"><tt>raydium_ode_element_fix (char *name, int *elem, int nelems, signed char keepgeoms)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_force_get"><tt>raydium_ode_element_force_get(int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_force_get_name"><tt>raydium_ode_element_force_get_name(char * elem)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_gravity"><tt>raydium_ode_element_gravity (int e, signed char enable)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_gravity_name"><tt>raydium_ode_element_gravity_name (char *e, signed char enable)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ground_texture_get"><tt>raydium_ode_element_ground_texture_get (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ground_texture_get_name"><tt>raydium_ode_element_ground_texture_get_name (char *e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_isvalid"><tt>raydium_ode_element_isvalid (int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_lensflare_offset"><tt>raydium_ode_element_lensflare_offset(int elem, char *flare_name, char *filename, dReal *offset)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_lensflare_offset_name"><tt>raydium_ode_element_lensflare_offset_name(char *elem, char *flare_name, char *filename, dReal *offset)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_lensflare_offset_name_3f"><tt>raydium_ode_element_lensflare_offset_name_3f(char *elem, char *flare_name, char *filename, dReal offx, dReal offy, dReal offz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_linearvelocity_get"><tt>raydium_ode_element_linearvelocity_get (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_linearvelocity_get_name"><tt>raydium_ode_element_linearvelocity_get_name(char *e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_linearvelocity_set"><tt>raydium_ode_element_linearvelocity_set (int e, dReal *vel)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_linearvelocity_set_3f"><tt>raydium_ode_element_linearvelocity_set_3f (int e, dReal velx, dReal vely, dReal velz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_linearvelocity_set_name"><tt>raydium_ode_element_linearvelocity_set_name (char * e, dReal *vel)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_linearvelocity_set_name_3f"><tt>raydium_ode_element_linearvelocity_set_name_3f(char *e, dReal vx, dReal vy, dReal vz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_mass"><tt>raydium_ode_element_mass(int elem, dReal mass)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_mass_get"><tt>raydium_ode_element_mass_get(int elem)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_mass_get_name"><tt>raydium_ode_element_mass_get_name(char * elem)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_mass_name"><tt>raydium_ode_element_mass_name(char *elem, dReal mass)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_mass_set"><tt>raydium_ode_element_mass_set(int elem,dReal mass)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_mass_set_name"><tt>raydium_ode_element_mass_set_name(char *elem, dReal mass)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_material"><tt>raydium_ode_element_material (int e, dReal erp, dReal cfm)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_material_name"><tt>raydium_ode_element_material_name (char *name, dReal erp, dReal cfm)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_mesh_scale"><tt>raydium_ode_element_mesh_scale(int elem, float scale_factor)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_mesh_scale_name"><tt>raydium_ode_element_mesh_scale_name(char *e, float scale_factor)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_move"><tt>raydium_ode_element_move (int elem, dReal * pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_move_3f"><tt>raydium_ode_element_move_3f(int elem, dReal x,dReal y, dReal z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_move_name"><tt>raydium_ode_element_move_name (char *name, dReal * pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_move_name_3f"><tt>raydium_ode_element_move_name_3f (char *name, dReal x, dReal y, dReal z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_moveto"><tt>raydium_ode_element_moveto (int element, int object, signed char deletejoints)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_moveto_name"><tt>raydium_ode_element_moveto_name (char *element, char *object, signed char deletejoints)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_object_get"><tt>raydium_ode_element_object_get (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_object_get_name"><tt>raydium_ode_element_object_get_name (char *e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_particle"><tt>raydium_ode_element_particle (int elem, char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_particle_name"><tt>raydium_ode_element_particle_name (char *elem, char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_particle_offset"><tt>raydium_ode_element_particle_offset (int elem, char *filename, dReal * offset)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_particle_offset_name"><tt>raydium_ode_element_particle_offset_name (char *elem, char *filename, dReal * offset)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_particle_offset_name_3f"><tt>raydium_ode_element_particle_offset_name_3f (char *elem, char *filename, dReal ox, dReal oy, dReal oz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_particle_point"><tt>raydium_ode_element_particle_point (int elem, char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_particle_point_name"><tt>raydium_ode_element_particle_point_name (char *elem, char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_player_angle"><tt>raydium_ode_element_player_angle (int e, dReal angle)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_player_angle_name"><tt>raydium_ode_element_player_angle_name (char *e, dReal angle)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_player_get"><tt>raydium_ode_element_player_get (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_player_get_name"><tt>raydium_ode_element_player_get_name (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_player_set"><tt>raydium_ode_element_player_set (int e, signed char isplayer)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_player_set_name"><tt>raydium_ode_element_player_set_name (char *name, signed char isplayer)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_pos_get"><tt>raydium_ode_element_pos_get (int j)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_pos_get_name"><tt>raydium_ode_element_pos_get_name (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ray_attach"><tt>raydium_ode_element_ray_attach(int element, dReal length, dReal dirx, dReal diry, dReal dirz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ray_attach_name"><tt>raydium_ode_element_ray_attach_name(char *element, dReal length, dReal dirx, dReal diry, dReal dirz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ray_delete"><tt>raydium_ode_element_ray_delete(int element, int ray_id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ray_delete_name"><tt>raydium_ode_element_ray_delete_name(char *element, int ray_id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ray_get"><tt>raydium_ode_element_ray_get(int element, int ray_id, raydium_ode_Ray *result)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ray_get_name"><tt>raydium_ode_element_ray_get_name(char *element, int ray_id, raydium_ode_Ray *result)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ray_pos"><tt>raydium_ode_element_ray_pos(int element, int ray_id, dReal *pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ray_pos_name"><tt>raydium_ode_element_ray_pos_name(char *element, int ray_id, dReal *pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ray_pos_name_3f"><tt>raydium_ode_element_ray_pos_name_3f(char *element, int ray_id, dReal px, dReal py, dReal pz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ray_set_length"><tt>raydium_ode_element_ray_set_length(int element, int ray_id, dReal length)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ray_set_length_name"><tt>raydium_ode_element_ray_set_length_name(char *element, int ray_id, dReal length)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rel2world"><tt>raydium_ode_element_rel2world(int element,dReal *rel,dReal *world)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rot_get"><tt>raydium_ode_element_rot_get (int e, dReal * rx, dReal * ry, dReal * rz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rot_get_name"><tt>raydium_ode_element_rot_get_name (char *e, dReal * rx, dReal * ry, dReal * rz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotate"><tt>raydium_ode_element_rotate (int elem, dReal * rot)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotate_3f"><tt>raydium_ode_element_rotate_3f (int elem, dReal rx, dReal ry, dReal rz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotate_direction"><tt>raydium_ode_element_rotate_direction (int elem, signed char Force0OrVel1)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotate_direction_name"><tt>raydium_ode_element_rotate_direction_name (char *e, signed char Force0OrVel1)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotate_name"><tt>raydium_ode_element_rotate_name (char *name, dReal * rot)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotate_name_3f"><tt>raydium_ode_element_rotate_name_3f (char *name, dReal rx, dReal ry, dReal rz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotateq"><tt>raydium_ode_element_rotateq (int elem, dReal * rot)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotateq_name"><tt>raydium_ode_element_rotateq_name (char *name, dReal * rot)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotfriction"><tt>raydium_ode_element_rotfriction (int e, dReal rotfriction)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotfriction_name"><tt>raydium_ode_element_rotfriction_name (char *e, dReal rotfriction)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotq_get"><tt>raydium_ode_element_rotq_get (int j, dReal * res)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_rotq_get_name"><tt>raydium_ode_element_rotq_get_name (char *name, dReal * res)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_slip"><tt>raydium_ode_element_slip (int e, dReal slip)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_slip_name"><tt>raydium_ode_element_slip_name (char *e, dReal slip)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_sound_update"><tt>raydium_ode_element_sound_update (int e, int source)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_sound_update_name"><tt>raydium_ode_element_sound_update_name (char *e, int source)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_tag_get"><tt>raydium_ode_element_tag_get (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_tag_get_name"><tt>raydium_ode_element_tag_get_name (char *e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_touched_get"><tt>raydium_ode_element_touched_get (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_touched_get_name"><tt>raydium_ode_element_touched_get_name (char *e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ttl_set"><tt>raydium_ode_element_ttl_set (int e, int ttl)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_ttl_set_name"><tt>raydium_ode_element_ttl_set_name (char *e, int ttl)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_unfix"><tt>raydium_ode_element_unfix (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_vect2world"><tt>raydium_ode_element_vect2world(int element,dReal *vect,dReal *world)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_element_world2rel"><tt>raydium_ode_element_world2rel(int element,dReal *world,dReal *rel)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_explosion_blow"><tt>raydium_ode_explosion_blow (dReal radius, dReal max_force, dReal * pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_explosion_blow_3f"><tt>raydium_ode_explosion_blow_3f (dReal radius, dReal max_force, dReal px, dReal py, dReal pz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_explosion_blow_rand"><tt>raydium_ode_explosion_blow_rand(dReal radius, dReal max_force, dReal rand_factor, dReal *pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_explosion_blow_rand_3f"><tt>raydium_ode_explosion_blow_rand_3f(dReal radius, dReal max_force, dReal rand_factor, dReal px, dReal py, dReal pz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_explosion_create"><tt>raydium_ode_explosion_create (char *name, dReal final_radius, dReal propag, dReal * pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_explosion_delete"><tt>raydium_ode_explosion_delete (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_explosion_find"><tt>raydium_ode_explosion_find (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_explosion_isvalid"><tt>raydium_ode_explosion_isvalid (int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_get_physics_freq"><tt>raydium_ode_get_physics_freq(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_get_timestep"><tt>raydium_ode_get_timestep(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_gravity"><tt>raydium_ode_gravity(dReal *vect)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_gravity_3f"><tt>raydium_ode_gravity_3f(dReal gx, dReal gy, dReal gz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_ground_dTriArrayCallback"><tt>raydium_ode_ground_dTriArrayCallback (dGeomID TriMesh, dGeomID RefObject, const int *TriIndices, int TriCount)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_ground_dTriCallback"><tt>raydium_ode_ground_dTriCallback (dGeomID TriMesh, dGeomID RefObject, int TriangleIndex)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_ground_set_name"><tt>raydium_ode_ground_set_name (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_init"><tt>raydium_ode_init (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_init_element"><tt>raydium_ode_init_element (int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_init_explosion"><tt>raydium_ode_init_explosion (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_init_joint"><tt>raydium_ode_init_joint (int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_init_motor"><tt>raydium_ode_init_motor (int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_init_object"><tt>raydium_ode_init_object (int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_internal_particle_genetator_deleted_callback"><tt>raydium_ode_internal_particle_genetator_deleted_callback(int gen)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_attach_fixed"><tt>raydium_ode_joint_attach_fixed (char *name, int elem1, int elem2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_attach_fixed_name"><tt>raydium_ode_joint_attach_fixed_name (char *name, char *elem1, char *elem2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_attach_hinge"><tt>raydium_ode_joint_attach_hinge (char *name, int elem1, int elem2, dReal posx, dReal posy, dReal posz, dReal axe1x, dReal axe1y, dReal axe1z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_attach_hinge2"><tt>raydium_ode_joint_attach_hinge2 (char *name, int elem1, int elem2, dReal axe1x, dReal axe1y, dReal axe1z, dReal axe2x, dReal axe2y, dReal axe2z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_attach_hinge2_name"><tt>raydium_ode_joint_attach_hinge2_name (char *name, char *elem1, char *elem2, dReal axe1x, dReal axe1y, dReal axe1z, dReal axe2x, dReal axe2y, dReal axe2z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_attach_hinge_name"><tt>raydium_ode_joint_attach_hinge_name (char *name, char *elem1, char *elem2, dReal posx, dReal posy, dReal posz, dReal axe1x, dReal axe1y, dReal axe1z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_attach_universal"><tt>raydium_ode_joint_attach_universal (char *name, int elem1, int elem2, dReal posx, dReal posy, dReal posz, dReal axe1x, dReal axe1y, dReal axe1z, dReal axe2x, dReal axe2y, dReal axe2z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_attach_universal_name"><tt>raydium_ode_joint_attach_universal_name (char *name, char *elem1, char *elem2, dReal posx, dReal posy, dReal posz, dReal axe1x, dReal axe1y, dReal axe1z, dReal axe2x, dReal axe2y, dReal axe2z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_break"><tt>raydium_ode_joint_break (int j)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_break_force"><tt>raydium_ode_joint_break_force (int j, dReal maxforce)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_break_force_name"><tt>raydium_ode_joint_break_force_name (char *name, dReal maxforce)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_delete"><tt>raydium_ode_joint_delete (int joint)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_delete_callback"><tt>raydium_ode_joint_delete_callback (int j, void (*f) (int))</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_delete_callback_name"><tt>raydium_ode_joint_delete_callback_name (char *name, void (*f) (int))</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_delete_name"><tt>raydium_ode_joint_delete_name (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_elements_get"><tt>raydium_ode_joint_elements_get (int j, int *e1, int *e2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_elements_get_name"><tt>raydium_ode_joint_elements_get_name (char *j, int *e1, int *e2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_find"><tt>raydium_ode_joint_find (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_hinge2_block"><tt>raydium_ode_joint_hinge2_block (int j, signed char block)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_hinge2_block_name"><tt>raydium_ode_joint_hinge2_block_name (char *name, signed char block)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_hinge2_limits"><tt>raydium_ode_joint_hinge2_limits (int j, dReal lo, dReal hi)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_hinge2_limits_name"><tt>raydium_ode_joint_hinge2_limits_name (char *j, dReal lo, dReal hi)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_hinge_limits"><tt>raydium_ode_joint_hinge_limits (int j, dReal lo, dReal hi)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_hinge_limits_name"><tt>raydium_ode_joint_hinge_limits_name (char *j, dReal lo, dReal hi)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_isvalid"><tt>raydium_ode_joint_isvalid (int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_suspension"><tt>raydium_ode_joint_suspension (int j, dReal erp, dReal cfm)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_suspension_name"><tt>raydium_ode_joint_suspension_name (char *j, dReal erp, dReal cfm)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_universal_limits"><tt>raydium_ode_joint_universal_limits (int j, dReal lo1, dReal hi1, dReal lo2, dReal hi2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_joint_universal_limits_name"><tt>raydium_ode_joint_universal_limits_name (char *j, dReal lo1, dReal hi1, dReal lo2, dReal hi2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_launcher"><tt>raydium_ode_launcher (int element, int from_element, dReal * rot, dReal force)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_launcher_name"><tt>raydium_ode_launcher_name (char *element, char *from_element, dReal * rot, dReal force)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_launcher_name_3f"><tt>raydium_ode_launcher_name_3f (char *element, char *from_element, dReal rx, dReal ry, dReal rz, dReal force)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_launcher_simple"><tt>raydium_ode_launcher_simple (int element, int from_element, dReal * lrot, dReal force)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_launcher_simple_name"><tt>raydium_ode_launcher_simple_name (char *element, char *from_element, dReal * rot, dReal force)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_launcher_simple_name_3f"><tt>raydium_ode_launcher_simple_name_3f (char *element, char *from_element, dReal rx, dReal ry, dReal rz, dReal force)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_angle"><tt>raydium_ode_motor_angle (int j, dReal angle)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_angle_get"><tt>raydium_ode_motor_angle_get(int m, int axe)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_angle_get_name"><tt>raydium_ode_motor_angle_get_name(char *name, int axe)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_angle_name"><tt>raydium_ode_motor_angle_name (char *motor, dReal angle)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_attach"><tt>raydium_ode_motor_attach (int motor, int joint, int joint_axe)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_attach_name"><tt>raydium_ode_motor_attach_name (char *motor, char *joint, int joint_axe)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_create"><tt>raydium_ode_motor_create (char *name, int obj, signed char type)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_delete"><tt>raydium_ode_motor_delete (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_delete_name"><tt>raydium_ode_motor_delete_name (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_find"><tt>raydium_ode_motor_find (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_gear_change"><tt>raydium_ode_motor_gear_change (int m, int gear)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_gear_change_name"><tt>raydium_ode_motor_gear_change_name (char *m, int gear)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_gear_ratio"><tt>raydium_ode_motor_gear_ratio(int m)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_gear_ratio_name"><tt>raydium_ode_motor_gear_ratio_name(char *m)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_gears_set"><tt>raydium_ode_motor_gears_set (int m, dReal * gears, int n_gears)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_gears_set_name"><tt>raydium_ode_motor_gears_set_name (char *m, dReal * gears, int n_gears)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_isvalid"><tt>raydium_ode_motor_isvalid (int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_power_max"><tt>raydium_ode_motor_power_max (int j, dReal power)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_power_max_name"><tt>raydium_ode_motor_power_max_name (char *name, dReal power)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_rocket_orientation"><tt>raydium_ode_motor_rocket_orientation (int m, dReal rx, dReal ry, dReal rz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_rocket_orientation_name"><tt>raydium_ode_motor_rocket_orientation_name (char *name, dReal rx, dReal ry, dReal rz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_rocket_playermovement"><tt>raydium_ode_motor_rocket_playermovement (int m, signed char isplayermovement)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_rocket_playermovement_name"><tt>raydium_ode_motor_rocket_playermovement_name (char *m, signed char isplayermovement)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_rocket_set"><tt>raydium_ode_motor_rocket_set (int m, int element, dReal x, dReal y, dReal z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_rocket_set_name"><tt>raydium_ode_motor_rocket_set_name (char *motor, char *element, dReal x, dReal y, dReal z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_speed"><tt>raydium_ode_motor_speed (int j, dReal force)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_speed_get"><tt>raydium_ode_motor_speed_get (int m, int gears)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_speed_get_name"><tt>raydium_ode_motor_speed_get_name (char *name, int gears)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_speed_name"><tt>raydium_ode_motor_speed_name (char *name, dReal force)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_motor_update_joints_data_internal"><tt>raydium_ode_motor_update_joints_data_internal (int j)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_mouse_pick"><tt>raydium_ode_mouse_pick(dReal dist,dReal pos[3],dReal *depth)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_name_auto"><tt>raydium_ode_name_auto (char *prefix, char *dest)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_near_callback"><tt>raydium_ode_near_callback (void *data, dGeomID o1, dGeomID o2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_MaxElementsPerPacket"><tt>raydium_ode_network_MaxElementsPerPacket (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_TimeToSend"><tt>raydium_ode_network_TimeToSend (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_apply"><tt>raydium_ode_network_apply (raydium_ode_network_Event * ev)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_element_delete"><tt>raydium_ode_network_element_delete (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_element_distantowner"><tt>raydium_ode_network_element_distantowner(int elem)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_element_distantowner_name"><tt>raydium_ode_network_element_distantowner_name(char *elem)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_element_isdistant"><tt>raydium_ode_network_element_isdistant (int elem)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_element_isdistant_name"><tt>raydium_ode_network_element_isdistant_name (char *elem)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_element_new"><tt>raydium_ode_network_element_new (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_element_send"><tt>raydium_ode_network_element_send (short nelems, int *e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_element_send_all"><tt>raydium_ode_network_element_send_all (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_element_send_iterative"><tt>raydium_ode_network_element_send_iterative (int nelems)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_element_send_random"><tt>raydium_ode_network_element_send_random (int nelems)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_element_trajectory_correct"><tt>raydium_ode_network_element_trajectory_correct (int elem)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_elment_next_local"><tt>raydium_ode_network_elment_next_local(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_explosion_event"><tt>raydium_ode_network_explosion_event (int type, char *buff)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_explosion_send"><tt>raydium_ode_network_explosion_send (raydium_ode_network_Explosion * exp)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_init"><tt>raydium_ode_network_init (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_newdel_event"><tt>raydium_ode_network_newdel_event (int type, char *buff)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_nidwho"><tt>raydium_ode_network_nidwho (int nid)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_nidwho_event"><tt>raydium_ode_network_nidwho_event (int type, char *buff)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_network_read"><tt>raydium_ode_network_read (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_OnDelete"><tt>raydium_ode_object_OnDelete (int o, void *OnDelete)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_OnDelete_name"><tt>raydium_ode_object_OnDelete_name (char *o, void *OnDelete)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_addforce"><tt>raydium_ode_object_addforce (int o, dReal *vect)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_addforce_3f"><tt>raydium_ode_object_addforce_3f (int o, dReal vx, dReal vy, dReal vz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_addforce_name"><tt>raydium_ode_object_addforce_name (char *o, dReal * vect)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_addforce_name_3f"><tt>raydium_ode_object_addforce_name_3f (char *o, dReal vx, dReal vy, dReal vz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_box_add"><tt>raydium_ode_object_box_add (char *name, int group, dReal mass, dReal tx, dReal ty, dReal tz, signed char type, int tag, char *mesh)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_capsule_add"><tt>raydium_ode_object_capsule_add(char *name, int group, dReal mass, dReal radius, dReal length, signed char type, int tag, char *mesh)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_colliding"><tt>raydium_ode_object_colliding (int o, signed char colliding)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_colliding_name"><tt>raydium_ode_object_colliding_name (char *o, signed char colliding)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_create"><tt>raydium_ode_object_create (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_data_get"><tt>raydium_ode_object_data_get (int e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_data_get_name"><tt>raydium_ode_object_data_get_name (char *e)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_data_set"><tt>raydium_ode_object_data_set (int o, void *data)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_data_set_name"><tt>raydium_ode_object_data_set_name (char *o, void *data)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_delete"><tt>raydium_ode_object_delete (int obj)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_delete_name"><tt>raydium_ode_object_delete_name (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_find"><tt>raydium_ode_object_find (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_isvalid"><tt>raydium_ode_object_isvalid (int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_linearvelocity_set"><tt>raydium_ode_object_linearvelocity_set (int o, dReal * vect)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_linearvelocity_set_name"><tt>raydium_ode_object_linearvelocity_set_name (char *o, dReal * vect)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_linearvelocity_set_name_3f"><tt>raydium_ode_object_linearvelocity_set_name_3f (char *o, dReal vx, dReal vy, dReal vz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_move"><tt>raydium_ode_object_move (int obj, dReal * pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_move_3f"><tt>raydium_ode_object_move_3f (int obj, dReal x, dReal y, dReal z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_move_name"><tt>raydium_ode_object_move_name (char *name, dReal * pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_move_name_3f"><tt>raydium_ode_object_move_name_3f (char *name, dReal x, dReal y, dReal z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_rename"><tt>raydium_ode_object_rename (int o, char *newname)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_rename_name"><tt>raydium_ode_object_rename_name (char *o, char *newname)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_rotate"><tt>raydium_ode_object_rotate(int obj, dReal *rot)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_rotate_name"><tt>raydium_ode_object_rotate_name(char *obj, dReal *rot)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_rotate_name_3f"><tt>raydium_ode_object_rotate_name_3f(char *obj, dReal rx, dReal ry, dReal rz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_rotateq"><tt>raydium_ode_object_rotateq (int obj, dReal * rot)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_rotateq_name"><tt>raydium_ode_object_rotateq_name (char *obj, dReal * rot)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_object_sphere_add"><tt>raydium_ode_object_sphere_add (char *name, int group, dReal mass, dReal radius, signed char type, int tag, char *mesh)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_orphans_check"><tt>raydium_ode_orphans_check(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_record_play_ghost"><tt>raydium_ode_record_play_ghost(signed char ghost)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_set_physics_freq"><tt>raydium_ode_set_physics_freq (GLfloat freq)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_set_timestep"><tt>raydium_ode_set_timestep(GLfloat tstep)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_ode_time_change"><tt>raydium_ode_time_change (GLfloat perc)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_alpha_change"><tt>raydium_osd_alpha_change (GLfloat a)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_color_change"><tt>raydium_osd_color_change (GLfloat r, GLfloat g, GLfloat b)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_color_ega"><tt>raydium_osd_color_ega (char hexa)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_color_rgba"><tt>raydium_osd_color_rgba (GLfloat r, GLfloat g, GLfloat b, GLfloat a)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_cursor_draw"><tt>raydium_osd_cursor_draw (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_cursor_offset"><tt>raydium_osd_cursor_offset(GLfloat xoffset, GLfloat yoffset)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_cursor_set"><tt>raydium_osd_cursor_set (char *texture, GLfloat xsize, GLfloat ysize)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_draw"><tt>raydium_osd_draw (int tex, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_draw_name"><tt>raydium_osd_draw_name (char *tex, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_draw_quad"><tt>raydium_osd_draw_quad(int tex, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2, GLfloat angle)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_draw_quad_name"><tt>raydium_osd_draw_quad_name(char *tex, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2, GLfloat angle)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_fade_callback"><tt>raydium_osd_fade_callback (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_fade_from"><tt>raydium_osd_fade_from (GLfloat * from4, GLfloat * to4, GLfloat time_len, void *OnFadeEnd)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_fade_init"><tt>raydium_osd_fade_init (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_internal_vertex"><tt>raydium_osd_internal_vertex (GLfloat x, GLfloat y, GLfloat top)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_logo"><tt>raydium_osd_logo (char *texture)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_mask"><tt>raydium_osd_mask (GLfloat * color4)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_mask_texture"><tt>raydium_osd_mask_texture(int texture,GLfloat alpha)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_mask_texture_clip"><tt>raydium_osd_mask_texture_clip(int texture,GLfloat alpha, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_mask_texture_clip_name"><tt>raydium_osd_mask_texture_clip_name(char *texture,GLfloat alpha, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_mask_texture_name"><tt>raydium_osd_mask_texture_name(char *texture,GLfloat alpha)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_network_stat_draw"><tt>raydium_osd_network_stat_draw (GLfloat px, GLfloat py, GLfloat size)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_printf"><tt>raydium_osd_printf (GLfloat x, GLfloat y, GLfloat size, GLfloat spacer, char *texture, char *format, ...)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_printf_3D"><tt>raydium_osd_printf_3D (GLfloat x, GLfloat y, GLfloat z, GLfloat size, GLfloat spacer, char *texture, char *format, ...)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_start"><tt>raydium_osd_start (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_osd_stop"><tt>raydium_osd_stop (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_parser_cut"><tt>raydium_parser_cut(char *str, char *part1, char *part2, char separator)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_parser_db_get"><tt>raydium_parser_db_get(char *key, char *value, char *def)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_parser_db_set"><tt>raydium_parser_db_set(char *key, char *value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_parser_isdata"><tt>raydium_parser_isdata(char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_parser_read"><tt>raydium_parser_read(char *var, char *val_s, GLfloat *val_f, int *size, FILE *fp)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_parser_remove"><tt>raydium_parser_remove(char *str, char what)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_parser_replace"><tt>raydium_parser_replace(char *str, char what, char with)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_parser_trim"><tt>raydium_parser_trim(char *org)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_parser_trim_right"><tt>raydium_parser_trim_right(char *org)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_callback"><tt>raydium_particle_callback (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_draw"><tt>raydium_particle_draw (raydium_particle_Particle * p, GLfloat ux, GLfloat uy, GLfloat uz, GLfloat rx, GLfloat ry, GLfloat rz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_draw_all"><tt>raydium_particle_draw_all (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_find_free"><tt>raydium_particle_find_free (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_delete"><tt>raydium_particle_generator_delete (int gen)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_delete_name"><tt>raydium_particle_generator_delete_name (char *gen)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_enable"><tt>raydium_particle_generator_enable (int gen, signed char enabled)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_enable_name"><tt>raydium_particle_generator_enable_name (char *gen, signed char enable)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_find"><tt>raydium_particle_generator_find (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_isvalid"><tt>raydium_particle_generator_isvalid (int g)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_load"><tt>raydium_particle_generator_load (char *filename, char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_load_internal"><tt>raydium_particle_generator_load_internal (int generator, FILE * fp, char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_move"><tt>raydium_particle_generator_move (int gen, GLfloat * pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_move_name"><tt>raydium_particle_generator_move_name (char *gen, GLfloat * pos)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_move_name_3f"><tt>raydium_particle_generator_move_name_3f (char *gen, GLfloat x, GLfloat y, GLfloat z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_particles_OnDelete"><tt>raydium_particle_generator_particles_OnDelete (int gen, void *OnDelete)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_particles_OnDelete_name"><tt>raydium_particle_generator_particles_OnDelete_name (char *gen, void *OnDelete)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_generator_update"><tt>raydium_particle_generator_update (int g, GLfloat step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_init"><tt>raydium_particle_init (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_name_auto"><tt>raydium_particle_name_auto (char *prefix, char *dest)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_preload"><tt>raydium_particle_preload (char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_scale_all"><tt>raydium_particle_scale_all(GLfloat scale)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_state_dump"><tt>raydium_particle_state_dump(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_state_restore"><tt>raydium_particle_state_restore(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_particle_update"><tt>raydium_particle_update (int part, GLfloat step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_add"><tt>raydium_path_add(char *dir)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_add_priority"><tt>raydium_path_add_priority(char *dir, int priority)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_dump"><tt>raydium_path_dump(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_ext"><tt>raydium_path_ext(char *dir, char *ext)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_ext_priority"><tt>raydium_path_ext_priority(char *dir,char *ext,int priority)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_find"><tt>raydium_path_find(char *pathfolder)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_find_free"><tt>raydium_path_find_free(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_init"><tt>raydium_path_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_package_cache_clear"><tt>raydium_path_package_cache_clear(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_package_find"><tt>raydium_path_package_find(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_package_find_free"><tt>raydium_path_package_find_free(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_package_internal_add"><tt>raydium_path_package_internal_add(char * file)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_package_mode"><tt>raydium_path_package_mode(char * name,unsigned char mode)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_package_register"><tt>raydium_path_package_register(char *file)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_reset"><tt>raydium_path_reset(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_resolv"><tt>raydium_path_resolv(char *in, char *out, char mode)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_string_from"><tt>raydium_path_string_from(char *str)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_string_to"><tt>raydium_path_string_to(char *out)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_write"><tt>raydium_path_write(char *dir)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_path_write_local_deny"><tt>raydium_path_write_local_deny(signed char deny)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_php_exec"><tt>raydium_php_exec (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_php_rayphp_path_change"><tt>raydium_php_rayphp_path_change(char *path)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_profile_end"><tt>raydium_profile_end(char *tag)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_profile_start"><tt>raydium_profile_start(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_random_0_x"><tt>raydium_random_0_x (GLfloat i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_random_f"><tt>raydium_random_f (GLfloat min, GLfloat max)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_random_i"><tt>raydium_random_i (int min, int max)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_random_neg_pos_1"><tt>raydium_random_neg_pos_1 (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_random_pos_1"><tt>raydium_random_pos_1 (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_random_proba"><tt>raydium_random_proba (GLfloat proba)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_random_randomize"><tt>raydium_random_randomize (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rayphp_http_test"><tt>raydium_rayphp_http_test(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rayphp_repository_defaults"><tt>raydium_rayphp_repository_defaults(char *def)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rayphp_repository_file_get"><tt>raydium_rayphp_repository_file_get (char *path)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rayphp_repository_file_list"><tt>raydium_rayphp_repository_file_list(char *filter)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rayphp_repository_file_put"><tt>raydium_rayphp_repository_file_put (char *path, int depends)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rayphp_zip_add"><tt>raydium_rayphp_zip_add(char * zip_file, char * full_file_name,char * file_name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rayphp_zip_extract"><tt>raydium_rayphp_zip_extract(char *file, char *to)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_register_api"><tt>raydium_register_api(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_register_dump"><tt>raydium_register_dump (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_register_find_name"><tt>raydium_register_find_name (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_register_function"><tt>raydium_register_function (void *addr, char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_register_modifiy"><tt>raydium_register_modifiy (char *var, char *args)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_register_name_isvalid"><tt>raydium_register_name_isvalid (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_register_variable"><tt>raydium_register_variable (void *addr, int type, char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_register_variable_const_f"><tt>raydium_register_variable_const_f(float val, char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_register_variable_const_i"><tt>raydium_register_variable_const_i(int val, char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_register_variable_unregister_last"><tt>raydium_register_variable_unregister_last (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_render_fps_limit"><tt>raydium_render_fps_limit(float maxfps)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_render_lightmap_color"><tt>raydium_render_lightmap_color(GLfloat *color)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_render_lightmap_color_4f"><tt>raydium_render_lightmap_color_4f(GLfloat r, GLfloat g, GLfloat b, GLfloat a)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_render_loading"><tt>raydium_render_loading(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering"><tt>raydium_rendering (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_displaylists_disable"><tt>raydium_rendering_displaylists_disable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_displaylists_enable"><tt>raydium_rendering_displaylists_enable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_finish"><tt>raydium_rendering_finish (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_from_to"><tt>raydium_rendering_from_to (GLuint from, GLuint to)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_from_to_simple"><tt>raydium_rendering_from_to_simple(GLuint from, GLuint to)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_internal_prepare_texture_render"><tt>raydium_rendering_internal_prepare_texture_render (GLuint tex)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_internal_restore_render_state"><tt>raydium_rendering_internal_restore_render_state (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_normal"><tt>raydium_rendering_normal (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_prepare_texture_unit"><tt>raydium_rendering_prepare_texture_unit (GLenum tu, GLuint tex)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_rgb_force"><tt>raydium_rendering_rgb_force (GLfloat r, GLfloat g, GLfloat b)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_rgb_normal"><tt>raydium_rendering_rgb_normal (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_rendering_wireframe"><tt>raydium_rendering_wireframe (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_server_accept_new"><tt>raydium_server_accept_new (struct sockaddr *from, char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_attach_texture"><tt>raydium_shader_attach_texture(int shader, int texture)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_attach_texture_name"><tt>raydium_shader_attach_texture_name(char *shader, char *texture)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_current"><tt>raydium_shader_current(int shader)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_current_name"><tt>raydium_shader_current_name(char *shader)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_find"><tt>raydium_shader_find(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_infolog"><tt>raydium_shader_infolog(GLhandleARB shader)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_init"><tt>raydium_shader_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_internal_vertex_attributes"><tt>raydium_shader_internal_vertex_attributes(int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_isvalid"><tt>raydium_shader_isvalid(int shader)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_load"><tt>raydium_shader_load(char *name, char *file_vert, char *file_frag)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_2f"><tt>raydium_shader_var_2f(int var_id, float value1, float value2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_2f_name"><tt>raydium_shader_var_2f_name(char *shader, char *variable, float value1, float value2)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_3f"><tt>raydium_shader_var_3f(int var_id, float value1, float value2, float value3)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_3f_name"><tt>raydium_shader_var_3f_name(char *shader, char *variable, float value1, float value2, float value3)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_4f"><tt>raydium_shader_var_4f(int var_id, float value1, float value2, float value3, float value4)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_4f_name"><tt>raydium_shader_var_4f_name(char *shader, char *variable, float value1, float value2, float value3, float value4)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_f"><tt>raydium_shader_var_f(int var_id, float value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_f_name"><tt>raydium_shader_var_f_name(char *shader, char *variable, float value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_fv"><tt>raydium_shader_var_fv(int var_id, int num, float value[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_fv_name"><tt>raydium_shader_var_fv_name(char *shader, char *variable, int num, float value[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_i"><tt>raydium_shader_var_i(int var_id, int value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_var_i_name"><tt>raydium_shader_var_i_name(char *shader, char *variable, int value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shader_variable"><tt>raydium_shader_variable(int shader, char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shadow_camerabox_size"><tt>raydium_shadow_camerabox_size(GLfloat size)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shadow_disable"><tt>raydium_shadow_disable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shadow_enable"><tt>raydium_shadow_enable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shadow_ground_change"><tt>raydium_shadow_ground_change(int object)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shadow_init"><tt>raydium_shadow_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shadow_isenabled"><tt>raydium_shadow_isenabled(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shadow_light_main"><tt>raydium_shadow_light_main(GLuint l)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shadow_map_generate"><tt>raydium_shadow_map_generate(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shadow_map_render"><tt>raydium_shadow_map_render(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shadow_mode"><tt>raydium_shadow_mode(char mode)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_shadow_object_draw"><tt>raydium_shadow_object_draw(GLuint o)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sky_atmosphere_check"><tt>raydium_sky_atmosphere_check(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sky_atmosphere_disable"><tt>raydium_sky_atmosphere_disable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sky_atmosphere_enable"><tt>raydium_sky_atmosphere_enable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sky_atmosphere_render"><tt>raydium_sky_atmosphere_render(GLfloat x, GLfloat y, GLfloat z,int detail)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sky_box_cache"><tt>raydium_sky_box_cache (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sky_box_name"><tt>raydium_sky_box_name(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sky_box_render"><tt>raydium_sky_box_render (GLfloat x, GLfloat y, GLfloat z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sky_check"><tt>raydium_sky_check(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sky_disable"><tt>raydium_sky_disable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sky_enable"><tt>raydium_sky_enable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sky_sphere_render"><tt>raydium_sky_sphere_render(GLfloat x, GLfloat y, GLfloat z, int detail)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_Array3IsValid"><tt>raydium_sound_Array3IsValid(ALfloat *a)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_GetListenerOr"><tt>raydium_sound_GetListenerOr (ALfloat * Or[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_GetListenerPos"><tt>raydium_sound_GetListenerPos (ALfloat * Pos[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_GetListenerVel"><tt>raydium_sound_GetListenerVel (ALfloat * Vel[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_GetSourceDir"><tt>raydium_sound_GetSourceDir (int src, ALfloat * Dir[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_GetSourceGain"><tt>raydium_sound_GetSourceGain (int src, ALfloat * g)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_GetSourcePitch"><tt>raydium_sound_GetSourcePitch (int src, ALfloat * p)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_GetSourcePos"><tt>raydium_sound_GetSourcePos (int src, ALfloat * Pos[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_GetSourceVel"><tt>raydium_sound_GetSourceVel (int src, ALfloat * Vel[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_InitSource"><tt>raydium_sound_InitSource (int src)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_IsPlaying"><tt>raydium_sound_IsPlaying(int src)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_LoadWav"><tt>raydium_sound_LoadWav (const char *fname)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SetListenerOr"><tt>raydium_sound_SetListenerOr (ALfloat Or[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SetListenerPos"><tt>raydium_sound_SetListenerPos (ALfloat Pos[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SetListenerVel"><tt>raydium_sound_SetListenerVel (ALfloat Vel[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SetSourceDir"><tt>raydium_sound_SetSourceDir (int src, ALfloat Dir[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SetSourceGain"><tt>raydium_sound_SetSourceGain (int src, ALfloat g)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SetSourceLoop"><tt>raydium_sound_SetSourceLoop (int src, signed char loop)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SetSourcePitch"><tt>raydium_sound_SetSourcePitch (int src, ALfloat p)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SetSourcePos"><tt>raydium_sound_SetSourcePos (int src, ALfloat Pos[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SetSourcePosCamera"><tt>raydium_sound_SetSourcePosCamera(int src)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SetSourceRefDist"><tt>raydium_sound_SetSourceRefDist(int src, ALfloat distance)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SetSourceVel"><tt>raydium_sound_SetSourceVel (int src, ALfloat Vel[])</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SourcePause"><tt>raydium_sound_SourcePause (int src)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SourcePlay"><tt>raydium_sound_SourcePlay (int src)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SourceStop"><tt>raydium_sound_SourceStop (int src)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SourceUnpause"><tt>raydium_sound_SourceUnpause (int src)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_SourceVerify"><tt>raydium_sound_SourceVerify (int src)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_callback"><tt>raydium_sound_callback (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_close"><tt>raydium_sound_close (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_init"><tt>raydium_sound_init (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_load_music"><tt>raydium_sound_load_music (char *fname)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_music_callback"><tt>raydium_sound_music_callback (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_music_info_init"><tt>raydium_sound_music_info_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_music_info_refresh"><tt>raydium_sound_music_info_refresh(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_source_fade"><tt>raydium_sound_source_fade(int src, ALfloat len)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_source_fade_to"><tt>raydium_sound_source_fade_to(int src, ALfloat len, char *to)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sound_verify"><tt>raydium_sound_verify (char *caller)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_billboard"><tt>raydium_sprite_billboard(float x, float y, float z,float ux, float uy, float uz, float rx, float ry, float rz, int textureid, float s0, float s1, float t0, float t1,float size)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_change_sprite_time"><tt>raydium_sprite_change_sprite_time(int id,float time)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_change_sprite_time_relative"><tt>raydium_sprite_change_sprite_time_relative(int id,float time)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_check_available"><tt>raydium_sprite_check_available(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_display"><tt>raydium_sprite_display(int id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_dump_info"><tt>raydium_sprite_dump_info(int id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_find"><tt>raydium_sprite_find(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_free"><tt>raydium_sprite_free(int sprite)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_free_name"><tt>raydium_sprite_free_name(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_get_current_frame"><tt>raydium_sprite_get_current_frame(int id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_get_current_group"><tt>raydium_sprite_get_current_group(int id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_get_id_from_element"><tt>raydium_sprite_get_id_from_element(int element)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_get_name_from_object"><tt>raydium_sprite_get_name_from_object(int obj)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_get_pos"><tt>raydium_sprite_get_pos(int number)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_group_change"><tt>raydium_sprite_group_change(int sprite,int group)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_is_stopped"><tt>raydium_sprite_is_stopped(int id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_move"><tt>raydium_sprite_move(int sprite,float x, float y, float z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_move_relative"><tt>raydium_sprite_move_relative(int sprite, float deltax, float deltay, float deltaz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_object_get"><tt>raydium_sprite_object_get(int spriteid)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_set_name"><tt>raydium_sprite_set_name(int id,char *cadena)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_sprite_set_type"><tt>raydium_sprite_set_type(int id,int value)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_compression"><tt>raydium_texture_compression(signed char enable)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_current_set"><tt>raydium_texture_current_set (GLuint current)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_current_set_name"><tt>raydium_texture_current_set_name (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_exists"><tt>raydium_texture_exists(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_filter_change"><tt>raydium_texture_filter_change (GLuint filter)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_find_by_name"><tt>raydium_texture_find_by_name (char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_free"><tt>raydium_texture_free(int number)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_free_name"><tt>raydium_texture_free_name(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_get_next_free_slot_internal"><tt>raydium_texture_get_next_free_slot_internal(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_is_slot_used"><tt>raydium_texture_is_slot_used(int slot)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_load"><tt>raydium_texture_load (char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_load_erase"><tt>raydium_texture_load_erase (char *filename, GLuint to_replace)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_load_internal"><tt>raydium_texture_load_internal(char *filename, char *as, signed char faked, int faked_tx, int faked_ty, int faked_bpp, int or_live_id_fake)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_npot_disable"><tt>raydium_texture_npot_disable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_npot_enable"><tt>raydium_texture_npot_enable(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_texture_size_is_correct"><tt>raydium_texture_size_is_correct (GLuint size)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_add"><tt>raydium_timecall_add (void *funct, GLint hz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_callback"><tt>raydium_timecall_callback (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_clock"><tt>raydium_timecall_clock (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_detect_frequency"><tt>raydium_timecall_detect_frequency (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_devrtc_clock"><tt>raydium_timecall_devrtc_clock (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_devrtc_close"><tt>raydium_timecall_devrtc_close (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_devrtc_init"><tt>raydium_timecall_devrtc_init (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_devrtc_rate_change"><tt>raydium_timecall_devrtc_rate_change (unsigned long new_rate)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_freq_change"><tt>raydium_timecall_freq_change (int callback, GLint hz)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_init"><tt>raydium_timecall_init (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_internal_w32_detect_modulo"><tt>raydium_timecall_internal_w32_detect_modulo(int div)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_internal_w32_divmodulo_find"><tt>raydium_timecall_internal_w32_divmodulo_find(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_timecall_raydium"><tt>raydium_timecall_raydium (GLfloat step)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_version"><tt>raydium_version(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_vertex_add"><tt>raydium_vertex_add (GLfloat x, GLfloat y, GLfloat z)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_vertex_uv_add"><tt>raydium_vertex_uv_add (GLfloat x, GLfloat y, GLfloat z, GLfloat u, GLfloat v)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_vertex_uv_normals_add"><tt>raydium_vertex_uv_normals_add (GLfloat x, GLfloat y, GLfloat z, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat u, GLfloat v)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_callback"><tt>raydium_video_callback(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_callback_video"><tt>raydium_video_callback_video(int id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_delete"><tt>raydium_video_delete(int id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_delete_name"><tt>raydium_video_delete_name(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_duration"><tt>raydium_video_duration(int id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_duration_name"><tt>raydium_video_duration_name(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_elapsed"><tt>raydium_video_elapsed(int id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_elapsed_name"><tt>raydium_video_elapsed_name(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_find"><tt>raydium_video_find(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_find_free"><tt>raydium_video_find_free(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_fps_change"><tt>raydium_video_fps_change(int id, float fps)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_fps_change_name"><tt>raydium_video_fps_change_name(char *name, float fps)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_init"><tt>raydium_video_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_isplaying"><tt>raydium_video_isplaying(int id)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_isplaying_name"><tt>raydium_video_isplaying_name(char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_isvalid"><tt>raydium_video_isvalid(int i)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_jpeg_decompress"><tt>raydium_video_jpeg_decompress(FILE *fp,unsigned char *to)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_loop"><tt>raydium_video_loop(int id, signed char loop)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_loop_name"><tt>raydium_video_loop_name(char *name, signed char loop)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_open"><tt>raydium_video_open(char *filename, char *as)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_open_with_sound"><tt>raydium_video_open_with_sound(char *filename, char *as, char *ogg)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_seek"><tt>raydium_video_seek(int id, float time)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_seek_name"><tt>raydium_video_seek_name(char *name, float time)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_seek_rel"><tt>raydium_video_seek_rel(int id, float time)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_seek_rel_name"><tt>raydium_video_seek_rel_name(char *name, float time)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_video_sound_callback"><tt>raydium_video_sound_callback(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_viewport_create"><tt>raydium_viewport_create (char * name,int tx,int ty)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_viewport_draw"><tt>raydium_viewport_draw(char * name, GLfloat tx,GLfloat ty,GLfloat sx,GLfloat sy)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_viewport_enable"><tt>raydium_viewport_enable(char * name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_viewport_init"><tt>raydium_viewport_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_viewport_save"><tt>raydium_viewport_save(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_web_answer"><tt>raydium_web_answer(char *message, int fd)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_web_callback"><tt>raydium_web_callback(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_web_client_get"><tt>raydium_web_client_get(char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_web_extension_add"><tt>raydium_web_extension_add(char *ext, char *mime, void *handler)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_web_init"><tt>raydium_web_init(void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_web_request"><tt>raydium_web_request(int fd)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_web_start"><tt>raydium_web_start(char *title)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_window_close"><tt>raydium_window_close (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_window_create"><tt>raydium_window_create (GLuint tx, GLuint ty, signed char rendering, char *name)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_window_resize_callback"><tt>raydium_window_resize_callback (GLsizei Width, GLsizei Height)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_window_view_perspective"><tt>raydium_window_view_perspective(GLfloat fov, GLfloat fnear, GLfloat ffar)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#raydium_window_view_update"><tt>raydium_window_view_update (void)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#unsupportedintread_vertex_from"><tt>unsupported - int read_vertex_from (char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#unsupportedintv4l_yuv420p2rgb"><tt>unsupported - int v4l_yuv420p2rgb (unsigned char *rgb_out, unsigned char *yuv_in, int width, int height, int bits)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#unsupportedvoiddump_vertex_to"><tt>unsupported - void dump_vertex_to (char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#unsupportedvoiddump_vertex_to_alpha"><tt>unsupported - void dump_vertex_to_alpha (char *filename)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#unsupportedvoidsprite_render_frame"><tt>unsupported - void sprite_render_frame(float x, float y, float z, int spriteid,int frame,float scalex,float scaley)</tt></a><br />
<a href="http://wiki.raydium.org/wiki/RaydiumApiReference#unsupportedvoidv4l_copy_420_block"><tt>unsupported - void v4l_copy_420_block (int yTL, int yTR, int yBL, int yBR, int u, int v, int rowPixels, unsigned char *rgb, int bits)</tt></a><hr class="hr_clear" />
</div>




<div class="footer">
<form action="http://wiki.raydium.org/wiki/RechercheTexte" method="get">
<img src='/img/edit.gif'alt='[Editer]'/><a href="http://wiki.raydium.org/wiki/RaydiumApiReference/edit" title="Cliquez pour &eacute;diter cette page.">&Eacute;diter</a> ::
<img src='/img/log.gif' alt='[Modif]' /><a href="http://wiki.raydium.org/wiki/RaydiumApiReference/revisions" title="Cliquez pour voir les derni&egrave;res modifications sur cette page.">Historique</a> ::
<img src='/img/proprio.gif' alt='[Proprio]' /> <span class="missingpage">JeanFran</span><a href="http://wiki.raydium.org/wiki/JeanFran/edit">?</a> :: 
<img src='/img/refers.png' alt='[Ref]'/><a href="http://wiki.raydium.org/wiki/RaydiumApiReference/referrers" title="Cliquez pour voir les URLs faisant r&eacute;f&eacute;rence &agrave; cette page.">
R&eacute;f&eacute;rences</a> ::
<img src='/img/find.gif' alt='[Rechercher]'/> Recherche : <input name="phrase" size="15" class="searchbox"/>

<!-- :: <a href="/wiki/FluxRSS"> <img src="/img/rss.png" alt="Flux RSS" border='0' /></a>-->
:: <a href="http://raydium.org/"> <img src="http://raydium.org/rayicomini.png" alt="Raydium" border='0' /></a>

</form>
</div>


<div class="copyright">
<a href="http://validator.w3.org/check/referer">XHTML 1.0 valide ?</a>
-- Fonctionne avec <a href="http://www.wikini.net/wakka.php?wiki=PagePrincipale">WikiNi 0.4.2 (interwiki)</a> CQFD Corp. Custom
</div>
 
</body>
</html>
